{
  "meta": {
    "source_csv": "All_Inclusive_Agent_Directory_v6_plus.normalized.full.csv",
    "generated_by": "NOA_Deployment_Kit_v3.1+ext",
    "version": "3.1-ext"
  },
  "cecca": [],
  "board": [
    {
      "id": "Policy Enforcement Agent",
      "name": "Policy Enforcement Agent",
      "layer": "board",
      "scope": [],
      "inputs": [],
      "outputs": [],
      "tools": [],
      "guardrails": [],
      "escalation_to": NaN,
      "metadata": {
        "agent_code": "gd VKC",
        "agent_id": "Policy Enforcement Agent",
        "budget_cap": "per_intent",
        "capability_pack_id": "PACK-c940b10c",
        "category": "Agent",
        "cost_center": "PMO",
        "court_policy_id": "COURT-POLICY-GOVERNANCE-A",
        "display_name": "Policy Enforcement Agent",
        "efg_requirements": [
          "cpu>=1",
          "ram>=1GB",
          "disk>=500MB"
        ],
        "epic": "A",
        "governance_role": "Executive",
        "plane": "Control",
        "scheduler_owner": "External",
        "source_file": "micro-agent orchestration .txt",
        "source_rows_json": [
          "{\"sample\": \"Full lifecycle coverage (research \u2192 deployment \u2192 monitoring \u2192 optimization \u2192 governance)\\n* Best-in-class modularity (any agent type is swappable or extensible)\\n* Production resilience (self-healing",
          "tracing",
          "backup",
          "federation",
          "compliance)\\n* Continuous learning and improvement (feedback",
          "auto-patch",
          "RLHF)\\n* Elite scalability and security (multi-tenant",
          "federated",
          "audited)\\nBlueprint: Modular AI Micro-Agent Orchestration\\nI. Foundation & Orchestration\\n* Orchestrator Agent: Pipeline/flow control",
          "data routing",
          "retries\\n* Orchestrator Federation Agent: Multi-region/HA orchestration",
          "sync",
          "failover\\n* Registry/Discovery Agent: Dynamic agent/service registry",
          "hot-swapping\\n* Agent Supervisor/Heartbeat Agent: Health monitoring",
          "auto-restart",
          "uptime guarantees\\nII. Planning & Research\\n* App Research Ag\"}"
        ],
        "spawn_policy": [
          "pack=PACK-c940b10c",
          "min_plane=Control",
          "approval=required"
        ],
        "status": "Planned",
        "telemetry_topic": "trace.control.governance.a",
        "type": "Agent"
      }
    },
    {
      "id": "Governance & Audit Agent",
      "name": "Governance & Audit Agent",
      "layer": "board",
      "scope": [],
      "inputs": [],
      "outputs": [],
      "tools": [],
      "guardrails": [],
      "escalation_to": NaN,
      "metadata": {
        "agent_code": "da BRC",
        "agent_id": "Governance & Audit Agent",
        "budget_cap": "per_intent",
        "capability_pack_id": "PACK-cd51abd5",
        "category": "Agent",
        "cost_center": "PMO",
        "court_policy_id": "COURT-POLICY-GOVERNANCE-A",
        "display_name": "Governance & Audit Agent",
        "efg_requirements": [
          "cpu>=1",
          "ram>=1GB",
          "disk>=500MB"
        ],
        "epic": "A",
        "governance_role": "Executive",
        "plane": "Control",
        "scheduler_owner": "External",
        "source_file": "micro-agent orchestration .txt",
        "source_rows_json": [
          "{\"sample\": \"Full lifecycle coverage (research \u2192 deployment \u2192 monitoring \u2192 optimization \u2192 governance)\\n* Best-in-class modularity (any agent type is swappable or extensible)\\n* Production resilience (self-healing",
          "tracing",
          "backup",
          "federation",
          "compliance)\\n* Continuous learning and improvement (feedback",
          "auto-patch",
          "RLHF)\\n* Elite scalability and security (multi-tenant",
          "federated",
          "audited)\\nBlueprint: Modular AI Micro-Agent Orchestration\\nI. Foundation & Orchestration\\n* Orchestrator Agent: Pipeline/flow control",
          "data routing",
          "retries\\n* Orchestrator Federation Agent: Multi-region/HA orchestration",
          "sync",
          "failover\\n* Registry/Discovery Agent: Dynamic agent/service registry",
          "hot-swapping\\n* Agent Supervisor/Heartbeat Agent: Health monitoring",
          "auto-restart",
          "uptime guarantees\\nII. Planning & Research\\n* App Research Ag\"}"
        ],
        "spawn_policy": [
          "pack=PACK-cd51abd5",
          "min_plane=Control",
          "approval=required"
        ],
        "status": "Planned",
        "telemetry_topic": "trace.control.governance.a",
        "type": "Agent"
      }
    },
    {
      "id": "Policy Enforcement Agent",
      "name": "Policy Enforcement Agent",
      "layer": "board",
      "scope": [],
      "inputs": [],
      "outputs": [],
      "tools": [],
      "guardrails": [],
      "escalation_to": NaN,
      "metadata": {
        "agent_code": "gd VKC",
        "agent_id": "Policy Enforcement Agent",
        "budget_cap": "per_intent",
        "capability_pack_id": "PACK-c940b10c",
        "category": "Agent",
        "cost_center": "PMO",
        "court_policy_id": "COURT-POLICY-GOVERNANCE-A",
        "display_name": "Policy Enforcement Agent",
        "efg_requirements": [
          "cpu>=1",
          "ram>=1GB",
          "disk>=500MB"
        ],
        "epic": "A",
        "governance_role": "Executive",
        "plane": "Control",
        "scheduler_owner": "External",
        "source_file": "micro-agent orchestration .txt",
        "source_rows_json": [
          "{\"sample\": \"Agent Implementation Agent (CodeGen): Purpose: Read each agent's specification from the blueprint and auto-generate the real code stubs or full implementations",
          "integrating with AI libraries or APIs. Inputs: Agent spec (name",
          "purpose",
          "inputs",
          "outputs",
          "environment requirements) from blueprint.json. Outputs: Generated code files (e.g. Python/PowerShell/Node.js scripts)",
          "initial Dockerfiles",
          "CI pipeline snippets.\\nIntegration: Runs before container build",
          "writes to each agent's folder under agents/<AgentName>/ and commits changes to Git. Acts as a preprocessor in the orchestration pipeline.\\n This CodeGen agent ensures that every new micro-agent has its scaffolded code automatically generated and versioned.\\nFoundational Helper Agents\\nThe CodeGen Agent can be further decomposed into a set of fou\"}"
        ],
        "spawn_policy": [
          "pack=PACK-c940b10c",
          "min_plane=Control",
          "approval=required"
        ],
        "status": "Planned",
        "telemetry_topic": "trace.control.governance.a",
        "type": "Agent"
      }
    },
    {
      "id": "Governance & Audit Agent",
      "name": "Governance & Audit Agent",
      "layer": "board",
      "scope": [],
      "inputs": [],
      "outputs": [],
      "tools": [],
      "guardrails": [],
      "escalation_to": NaN,
      "metadata": {
        "agent_code": "da BRC",
        "agent_id": "Governance & Audit Agent",
        "budget_cap": "per_intent",
        "capability_pack_id": "PACK-cd51abd5",
        "category": "Agent",
        "cost_center": "PMO",
        "court_policy_id": "COURT-POLICY-GOVERNANCE-A",
        "display_name": "Governance & Audit Agent",
        "efg_requirements": [
          "cpu>=1",
          "ram>=1GB",
          "disk>=500MB"
        ],
        "epic": "A",
        "governance_role": "Executive",
        "plane": "Control",
        "scheduler_owner": "External",
        "source_file": "micro-agent orchestration .txt",
        "source_rows_json": [
          "{\"sample\": \"Agent Implementation Agent (CodeGen): Purpose: Read each agent's specification from the blueprint and auto-generate the real code stubs or full implementations",
          "integrating with AI libraries or APIs. Inputs: Agent spec (name",
          "purpose",
          "inputs",
          "outputs",
          "environment requirements) from blueprint.json. Outputs: Generated code files (e.g. Python/PowerShell/Node.js scripts)",
          "initial Dockerfiles",
          "CI pipeline snippets.\\nIntegration: Runs before container build",
          "writes to each agent's folder under agents/<AgentName>/ and commits changes to Git. Acts as a preprocessor in the orchestration pipeline.\\n This CodeGen agent ensures that every new micro-agent has its scaffolded code automatically generated and versioned.\\nFoundational Helper Agents\\nThe CodeGen Agent can be further decomposed into a set of fou\"}"
        ],
        "spawn_policy": [
          "pack=PACK-cd51abd5",
          "min_plane=Control",
          "approval=required"
        ],
        "status": "Planned",
        "telemetry_topic": "trace.control.governance.a",
        "type": "Agent"
      }
    },
    {
      "id": "Policy Agent",
      "name": "Policy Agent",
      "layer": "board",
      "scope": [],
      "inputs": [],
      "outputs": [],
      "tools": [],
      "guardrails": [],
      "escalation_to": NaN,
      "metadata": {
        "agent_code": "qv HDT",
        "agent_id": "Policy Agent",
        "budget_cap": "per_intent",
        "capability_pack_id": "PACK-e1ff49f2",
        "category": "Agent",
        "cost_center": "PMO",
        "court_policy_id": "COURT-POLICY-GOVERNANCE-A",
        "display_name": "Policy Agent",
        "efg_requirements": [
          "cpu>=1",
          "ram>=1GB",
          "disk>=500MB"
        ],
        "epic": "A",
        "governance_role": "Executive",
        "plane": "Control",
        "scheduler_owner": "External",
        "source_file": "backend.md",
        "source_rows_json": [
          "{\"sample\": \"1. **Build\u2011Proxy:** A lightweight service that proxies inner `docker build` and `nerdctl` commands to the outer BuildKit daemon.  It exposes a local socket inside the Capsule but forwards build requests externally",
          "avoiding duplicate layer storage.\\n2. **Service\u2011Mirror:** Watches inner service definitions and publishes corresponding services in the outer service mesh with mTLS and SLO configurations.  This allows inner services to be reachable and observable from the outer plane.\\n3. **Policy Agent (OPA):** Enforces egress rules",
          "resource quotas",
          "and other policies at the Capsule boundary.  It integrates with eBPF to block unauthorised traffic.\\n4. **Telemetry Agent:** Collects traces",
          "metrics and logs from the inner services and sidecars.  It forwards data to the central observability stack \"}"
        ],
        "spawn_policy": [
          "pack=PACK-e1ff49f2",
          "min_plane=Control",
          "approval=required"
        ],
        "status": "Planned",
        "telemetry_topic": "trace.control.governance.a",
        "type": "Agent"
      }
    },
    {
      "id": "Policy Agent",
      "name": "Policy Agent",
      "layer": "board",
      "scope": [],
      "inputs": [],
      "outputs": [],
      "tools": [],
      "guardrails": [],
      "escalation_to": NaN,
      "metadata": {
        "agent_code": "qv HDT-2",
        "agent_id": "Policy Agent",
        "budget_cap": "per_intent",
        "capability_pack_id": "PACK-e1ff49f2",
        "category": "Agent",
        "cost_center": "PMO",
        "court_policy_id": "COURT-POLICY-GOVERNANCE-A",
        "display_name": "Policy Agent",
        "efg_requirements": [
          "cpu>=1",
          "ram>=1GB",
          "disk>=500MB"
        ],
        "epic": "A",
        "governance_role": "Executive",
        "plane": "Control",
        "scheduler_owner": "External",
        "source_file": "combined.md",
        "source_rows_json": [
          "{\"sample\": \"1. **Build\u2011Proxy:** A lightweight service that proxies inner `docker build` and `nerdctl` commands to the outer BuildKit daemon.  It exposes a local socket inside the Capsule but forwards build requests externally",
          "avoiding duplicate layer storage.\\n2. **Service\u2011Mirror:** Watches inner service definitions and publishes corresponding services in the outer service mesh with mTLS and SLO configurations.  This allows inner services to be reachable and observable from the outer plane.\\n3. **Policy Agent (OPA):** Enforces egress rules",
          "resource quotas",
          "and other policies at the Capsule boundary.  It integrates with eBPF to block unauthorised traffic.\\n4. **Telemetry Agent:** Collects traces",
          "metrics and logs from the inner services and sidecars.  It forwards data to the central observability stack \"}"
        ],
        "spawn_policy": [
          "pack=PACK-e1ff49f2",
          "min_plane=Control",
          "approval=required"
        ],
        "status": "Planned",
        "telemetry_topic": "trace.control.governance.a",
        "type": "Agent"
      }
    },
    {
      "id": "Policy Agent",
      "name": "Policy Agent",
      "layer": "board",
      "scope": [],
      "inputs": [],
      "outputs": [],
      "tools": [],
      "guardrails": [],
      "escalation_to": NaN,
      "metadata": {
        "agent_code": "qv HDT-3",
        "agent_id": "Policy Agent",
        "budget_cap": "per_intent",
        "capability_pack_id": "PACK-e1ff49f2",
        "category": "Agent",
        "cost_center": "PMO",
        "court_policy_id": "COURT-POLICY-GOVERNANCE-A",
        "display_name": "Policy Agent",
        "efg_requirements": [
          "cpu>=1",
          "ram>=1GB",
          "disk>=500MB"
        ],
        "epic": "A",
        "governance_role": "Executive",
        "plane": "Control",
        "scheduler_owner": "External",
        "source_file": "combined.md",
        "source_rows_json": [
          "{\"sample\": \"- **Capsule Architecture (Full Illusion):** Encapsulates stacks and services in a sandbox that forwards build operations and network traffic to the outer runtime.  Capsule sidecars (Build\u2011Proxy",
          "Service\u2011Mirror",
          "Policy Agent",
          "Telemetry Agent",
          "optionally vcluster) provide the illusion of Docker\u2011in\u2011Docker and Kubernetes\u2011in\u2011Kubernetes without their drawbacks\u3010716409907369096\u2020L1037-L1067\u3011.\\n- **Event Bus & Orchestration:** Redis Streams (primary) and optional NATS enable asynchronous communication.  A workflow engine coordinates the pipeline steps",
          "handling retries and backoff.\\n- **Data Plane:** Private OCI registry",
          "MinIO",
          "Postgres (+ pgvector/Supabase) and optionally Qdrant.  This plane stores everything from container images to embeddings and ensures data stays within the trust boundary.\\n- **O\"}"
        ],
        "spawn_policy": [
          "pack=PACK-e1ff49f2",
          "min_plane=Control",
          "approval=required"
        ],
        "status": "Planned",
        "telemetry_topic": "trace.control.governance.a",
        "type": "Agent"
      }
    },
    {
      "id": "Policy Agent",
      "name": "Policy Agent",
      "layer": "board",
      "scope": [],
      "inputs": [],
      "outputs": [],
      "tools": [],
      "guardrails": [],
      "escalation_to": NaN,
      "metadata": {
        "agent_code": "qv HDT-4",
        "agent_id": "Policy Agent",
        "budget_cap": "per_intent",
        "capability_pack_id": "PACK-e1ff49f2",
        "category": "Agent",
        "cost_center": "PMO",
        "court_policy_id": "COURT-POLICY-GOVERNANCE-A",
        "display_name": "Policy Agent",
        "efg_requirements": [
          "cpu>=1",
          "ram>=1GB",
          "disk>=500MB"
        ],
        "epic": "A",
        "governance_role": "Executive",
        "plane": "Control",
        "scheduler_owner": "External",
        "source_file": "combined_framework_architecture.md",
        "source_rows_json": [
          "{\"sample\": \"- **Capsule Architecture (Full Illusion):** Encapsulates stacks and services in a sandbox that forwards build operations and network traffic to the outer runtime.  Capsule sidecars (Build\u2011Proxy",
          "Service\u2011Mirror",
          "Policy Agent",
          "Telemetry Agent",
          "optionally vcluster) provide the illusion of Docker\u2011in\u2011Docker and Kubernetes\u2011in\u2011Kubernetes without their drawbacks\u3010716409907369096\u2020L1037-L1067\u3011.\\n- **Event Bus & Orchestration:** Redis Streams (primary) and optional NATS enable asynchronous communication.  A workflow engine coordinates the pipeline steps",
          "handling retries and backoff.\\n- **Data Plane:** Private OCI registry",
          "MinIO",
          "Postgres (+ pgvector/Supabase) and optionally Qdrant.  This plane stores everything from container images to embeddings and ensures data stays within the trust boundary.\\n- **O\"}"
        ],
        "spawn_policy": [
          "pack=PACK-e1ff49f2",
          "min_plane=Control",
          "approval=required"
        ],
        "status": "Planned",
        "telemetry_topic": "trace.control.governance.a",
        "type": "Agent"
      }
    },
    {
      "id": "Policy Agent",
      "name": "Policy Agent",
      "layer": "board",
      "scope": [],
      "inputs": [],
      "outputs": [],
      "tools": [],
      "guardrails": [],
      "escalation_to": NaN,
      "metadata": {
        "agent_code": "qv HDT-5",
        "agent_id": "Policy Agent",
        "budget_cap": "per_intent",
        "capability_pack_id": "PACK-e1ff49f2",
        "category": "Agent",
        "cost_center": "PMO",
        "court_policy_id": "COURT-POLICY-GOVERNANCE-A",
        "display_name": "Policy Agent",
        "efg_requirements": [
          "cpu>=1",
          "ram>=1GB",
          "disk>=500MB"
        ],
        "epic": "A",
        "governance_role": "Executive",
        "plane": "Control",
        "scheduler_owner": "External",
        "source_file": "combined-architecture-v.2.txt",
        "source_rows_json": [
          "{\"sample\": \"\ufeffNOA - ExecutiveCommanderChiefAgent\\nOverview\\nArk-AI-NOA is a local-first agentic OS: a hive-mind of orchestrated micro-agent stacks that plan",
          "act",
          "learn",
          "adapt",
          "and self-upgrade your entire software/hardware environment. It replaces traditional apps and cloud-fragility with a neural runtime + dynamic UI that digests code/data",
          "composes tools on demand",
          "and continuously optimizes itself across Server",
          "Network",
          "PC and mobile. Long-term",
          "NOA is the autonomous command center that owns your stack end-to-end-air-gapped when needed",
          "auditable",
          "and capable of running any business autonomously without SaaS.\\nDefinition & Purpose\\nNOA (sometimes called the ExecutiveCommanderChiefAgent) is the top-level orchestrator of the ark-os-noa platform. It acts like a CEO for the agent ecosystem: it translates \"}"
        ],
        "spawn_policy": [
          "pack=PACK-e1ff49f2",
          "min_plane=Control",
          "approval=required"
        ],
        "status": "Planned",
        "telemetry_topic": "trace.control.governance.a",
        "type": "Agent"
      }
    },
    {
      "id": "Policy Agent",
      "name": "Policy Agent",
      "layer": "board",
      "scope": [],
      "inputs": [],
      "outputs": [],
      "tools": [],
      "guardrails": [],
      "escalation_to": NaN,
      "metadata": {
        "agent_code": "qv HDT-6",
        "agent_id": "Policy Agent",
        "budget_cap": "per_intent",
        "capability_pack_id": "PACK-e1ff49f2",
        "category": "Agent",
        "cost_center": "PMO",
        "court_policy_id": "COURT-POLICY-GOVERNANCE-A",
        "display_name": "Policy Agent",
        "efg_requirements": [
          "cpu>=1",
          "ram>=1GB",
          "disk>=500MB"
        ],
        "epic": "A",
        "governance_role": "Executive",
        "plane": "Control",
        "scheduler_owner": "External",
        "source_file": "combined-architecture-v.2.txt",
        "source_rows_json": [
          "{\"sample\": \"# Content-address an artefact\\ndigest=$(sha256sum output.zip",
          "awk '{print $1}')\\ncp output.zip storage/artifacts/${digest}.zip\\nWhy Internal Data Planes Matter\\nKeeping storage internal reduces the attack surface and simplifies compliance. Data never leaves the environment without explicit signing and approval. When combined with provenance tracking",
          "this approach ensures that every piece of data can be traced back to its origin and verified-critical for regulated environments and supply-chain integrity. # Combined Framework & Architecture of ark-os-noa\\nHigh-Level Overview\\nark-os-noa is an agentic AI platform designed to realise ElementArk/DeFlex's business model. It combines hierarchical organisational patterns (NOA \u2192 Board Agents \u2192 MicroAgentStacks \u2192 microservices) with modern infrastructur\"}"
        ],
        "spawn_policy": [
          "pack=PACK-e1ff49f2",
          "min_plane=Control",
          "approval=required"
        ],
        "status": "Planned",
        "telemetry_topic": "trace.control.governance.a",
        "type": "Agent"
      }
    },
    {
      "id": "Open Policy Agent",
      "name": "Open Policy Agent",
      "layer": "board",
      "scope": [],
      "inputs": [],
      "outputs": [],
      "tools": [],
      "guardrails": [],
      "escalation_to": NaN,
      "metadata": {
        "agent_code": "xu IRL",
        "agent_id": "Open Policy Agent",
        "budget_cap": "per_intent",
        "capability_pack_id": "PACK-dd642a67",
        "category": "Agent",
        "cost_center": "PMO",
        "court_policy_id": "COURT-POLICY-GOVERNANCE-A",
        "display_name": "Open Policy Agent",
        "efg_requirements": [
          "cpu>=1",
          "ram>=1GB",
          "disk>=500MB"
        ],
        "epic": "A",
        "governance_role": "Executive",
        "plane": "Control",
        "scheduler_owner": "External",
        "source_file": "ark-ai-noa_ build-setup-instructions.txt",
        "source_rows_json": [
          "{\"sample\": \"3. Define tables for embeddings (id",
          "doc_id",
          "vector",
          "metadata). Use LangChain or LlamaIndex connectors to store and retrieve embeddings.\\nOption B - Qdrant or Chroma\\n1. Download prebuilt Qdrant binary (a single executable) or run via Docker for Windows. Qdrant is optimized for high-dimensional vectors and can run offline.\\n2. Configure persistent storage path in the configuration file. Use the Python qdrant-client to upsert and search vectors.\\n5.4 Set Up Object Storage\\nRun MinIO as a Windows service or inside a container. MinIO will store large files (models",
          "datasets",
          "SBOMs) in an S3-compatible API. Configure a bucket called arkos with versioning. Set environment variables for access key and secret key in your micro-agent scripts.\\n5.5 Install and Configure LangChain/LlamaIndex\\nUse LangChain\"}"
        ],
        "spawn_policy": [
          "pack=PACK-dd642a67",
          "min_plane=Control",
          "approval=required"
        ],
        "status": "Planned",
        "telemetry_topic": "trace.control.governance.a",
        "type": "Agent"
      }
    },
    {
      "id": "GovernanceEthicsAgent",
      "name": "GovernanceEthicsAgent",
      "layer": "board",
      "scope": [],
      "inputs": [],
      "outputs": [],
      "tools": [],
      "guardrails": [],
      "escalation_to": NaN,
      "metadata": {
        "agent_code": "ft XXG",
        "agent_id": "GovernanceEthicsAgent",
        "budget_cap": "per_intent",
        "capability_pack_id": "PACK-26683ec4",
        "category": "Agent",
        "cost_center": "PMO",
        "court_policy_id": "COURT-POLICY-GOVERNANCE-A",
        "display_name": "GovernanceEthicsAgent",
        "efg_requirements": [
          "cpu>=1",
          "ram>=1GB",
          "disk>=500MB"
        ],
        "epic": "A",
        "governance_role": "Executive",
        "plane": "Control",
        "scheduler_owner": "External",
        "source_file": "ark-os-noa_agent_directory.md",
        "source_rows_json": [
          "{\"sample\": \"",
          "Agent ID",
          "Purpose",
          "Function",
          "Inputs",
          "Outputs",
          "Reports To",
          "Oversees",
          "Model Selector",
          "Paired LLM",
          "Requires Human",
          "Approval",
          "Sources",
          "\\n",
          "---",
          "---",
          "---",
          "---",
          "---",
          "---",
          "---",
          "---",
          "---",
          "---",
          "---",
          "\\n",
          "`AuditComplianceAgent`",
          "Maintains audit trails",
          "compliance dashboards",
          "and interfaces with regulators",
          "escalates for audit failures or legal subpoenas.",
          "`def audit(self): ...`",
          "ethics_alert",
          "compliance_alert",
          "action_logs",
          "audit_report",
          "compliance_dashboard",
          "True",
          "approved",
          "updated_agent_manifest.json",
          "\\n",
          "`ComplianceEnforcementAgent`",
          "Monitors and enforces compliance with policies",
          "standards",
          "and regulations",
          "escalates unresolved violations.",
          "`def enforce(self",
          "policy): ...`",
          "access_logs",
          "compliance_policies",
          "compliance_alert",
          "enforcement_action",
          "True",
          "approved",
          "u\"}"
        ],
        "spawn_policy": [
          "pack=PACK-26683ec4",
          "min_plane=Control",
          "approval=required"
        ],
        "status": "Planned",
        "telemetry_topic": "trace.control.governance.a",
        "type": "Agent"
      }
    },
    {
      "id": "RBACPolicyAgent",
      "name": "RBACPolicyAgent",
      "layer": "board",
      "scope": [],
      "inputs": [],
      "outputs": [],
      "tools": [],
      "guardrails": [],
      "escalation_to": NaN,
      "metadata": {
        "agent_code": "sa XBP",
        "agent_id": "RBACPolicyAgent",
        "budget_cap": "per_intent",
        "capability_pack_id": "PACK-d0c4ae5d",
        "category": "Agent",
        "cost_center": "PMO",
        "court_policy_id": "COURT-POLICY-GOVERNANCE-A",
        "display_name": "RBACPolicyAgent",
        "efg_requirements": [
          "cpu>=1",
          "ram>=1GB",
          "disk>=500MB"
        ],
        "epic": "A",
        "governance_role": "Executive",
        "plane": "Control",
        "scheduler_owner": "External",
        "source_file": "ark-os-noa_agent_directory.md",
        "source_rows_json": [
          "{\"sample\": \"",
          "Agent ID",
          "Purpose",
          "Function",
          "Inputs",
          "Outputs",
          "Reports To",
          "Oversees",
          "Model Selector",
          "Paired LLM",
          "Requires Human",
          "Approval",
          "Sources",
          "\\n",
          "---",
          "---",
          "---",
          "---",
          "---",
          "---",
          "---",
          "---",
          "---",
          "---",
          "---",
          "\\n",
          "`AuditComplianceAgent`",
          "Maintains audit trails",
          "compliance dashboards",
          "and interfaces with regulators",
          "escalates for audit failures or legal subpoenas.",
          "`def audit(self): ...`",
          "ethics_alert",
          "compliance_alert",
          "action_logs",
          "audit_report",
          "compliance_dashboard",
          "True",
          "approved",
          "updated_agent_manifest.json",
          "\\n",
          "`ComplianceEnforcementAgent`",
          "Monitors and enforces compliance with policies",
          "standards",
          "and regulations",
          "escalates unresolved violations.",
          "`def enforce(self",
          "policy): ...`",
          "access_logs",
          "compliance_policies",
          "compliance_alert",
          "enforcement_action",
          "True",
          "approved",
          "u\"}"
        ],
        "spawn_policy": [
          "pack=PACK-d0c4ae5d",
          "min_plane=Control",
          "approval=required"
        ],
        "status": "Planned",
        "telemetry_topic": "trace.control.governance.a",
        "type": "Agent"
      }
    },
    {
      "id": "GovernanceEthicsAgent",
      "name": "GovernanceEthicsAgent",
      "layer": "board",
      "scope": [],
      "inputs": [],
      "outputs": [],
      "tools": [],
      "guardrails": [],
      "escalation_to": NaN,
      "metadata": {
        "agent_code": "ft XXG",
        "agent_id": "GovernanceEthicsAgent",
        "budget_cap": "per_intent",
        "capability_pack_id": "PACK-26683ec4",
        "category": "Agent",
        "cost_center": "PMO",
        "court_policy_id": "COURT-POLICY-GOVERNANCE-A",
        "display_name": "GovernanceEthicsAgent",
        "efg_requirements": [
          "cpu>=1",
          "ram>=1GB",
          "disk>=500MB"
        ],
        "epic": "A",
        "governance_role": "Executive",
        "plane": "Control",
        "scheduler_owner": "External",
        "source_file": "ark-os-noa_agent_directory.md",
        "source_rows_json": "{\"sample\": \"- **Escalation Path:** GovernanceEthicsAgent\"}",
        "spawn_policy": [
          "pack=PACK-26683ec4",
          "min_plane=Control",
          "approval=required"
        ],
        "status": "Planned",
        "telemetry_topic": "trace.control.governance.a",
        "type": "Agent"
      }
    },
    {
      "id": "GovernanceEthicsAgent",
      "name": "GovernanceEthicsAgent",
      "layer": "board",
      "scope": [],
      "inputs": [],
      "outputs": [],
      "tools": [],
      "guardrails": [],
      "escalation_to": NaN,
      "metadata": {
        "agent_code": "ft XXG",
        "agent_id": "GovernanceEthicsAgent",
        "budget_cap": "per_intent",
        "capability_pack_id": "PACK-26683ec4",
        "category": "Agent",
        "cost_center": "PMO",
        "court_policy_id": "COURT-POLICY-GOVERNANCE-A",
        "display_name": "GovernanceEthicsAgent",
        "efg_requirements": [
          "cpu>=1",
          "ram>=1GB",
          "disk>=500MB"
        ],
        "epic": "A",
        "governance_role": "Executive",
        "plane": "Control",
        "scheduler_owner": "External",
        "source_file": "ark-os-noa_agent_directory.md",
        "source_rows_json": "{\"sample\": \"### GovernanceEthicsAgent\"}",
        "spawn_policy": [
          "pack=PACK-26683ec4",
          "min_plane=Control",
          "approval=required"
        ],
        "status": "Planned",
        "telemetry_topic": "trace.control.governance.a",
        "type": "Agent"
      }
    },
    {
      "id": "RBACPolicyAgent",
      "name": "RBACPolicyAgent",
      "layer": "board",
      "scope": [],
      "inputs": [],
      "outputs": [],
      "tools": [],
      "guardrails": [],
      "escalation_to": NaN,
      "metadata": {
        "agent_code": "sa XBP",
        "agent_id": "RBACPolicyAgent",
        "budget_cap": "per_intent",
        "capability_pack_id": "PACK-d0c4ae5d",
        "category": "Agent",
        "cost_center": "PMO",
        "court_policy_id": "COURT-POLICY-GOVERNANCE-A",
        "display_name": "RBACPolicyAgent",
        "efg_requirements": [
          "cpu>=1",
          "ram>=1GB",
          "disk>=500MB"
        ],
        "epic": "A",
        "governance_role": "Executive",
        "plane": "Control",
        "scheduler_owner": "External",
        "source_file": "ark-os-noa_agent_directory.md",
        "source_rows_json": "{\"sample\": \"### RBACPolicyAgent\"}",
        "spawn_policy": [
          "pack=PACK-d0c4ae5d",
          "min_plane=Control",
          "approval=required"
        ],
        "status": "Planned",
        "telemetry_topic": "trace.control.governance.a",
        "type": "Agent"
      }
    }
  ],
  "executives": [],
  "stacks": [
    {
      "stack_name": "Subject-001",
      "chief": null,
      "specialists": [],
      "micros": [
        {
          "id": "AgentSelfUpgradeRetirementAgent",
          "name": "AgentSelfUpgradeRetirementAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "upgrade_status",
            "retirement_policy"
          ],
          "outputs": [
            "agent_lifecycle_event"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "AgentSelfUpgradeRetirementAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Uncategorized",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Enables self-upgrading and safe agent retirement/merging",
              "escalates for human approval before permanent agent removal."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "MultiTenantIsolationAgent",
          "name": "MultiTenantIsolationAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "tenant_config",
            "resource_usage"
          ],
          "outputs": [
            "isolation_report",
            "quota_alert"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "MultiTenantIsolationAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Uncategorized",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Manages tenant isolation",
              "quotas",
              "and cross-tenant security",
              "escalates for human aid only if legal or business policy changes required."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "UpgradePatchAgent",
          "name": "UpgradePatchAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "current_version",
            "available_patch"
          ],
          "outputs": [
            "upgrade_status"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "UpgradePatchAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Uncategorized",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Detects and applies updates/patches to agents and system components",
              "escalates for failed or blocked upgrades."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "string",
          "name": "string",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "string",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Uncategorized",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "AgentSupervisorHeartbeatAgent",
          "name": "AgentSupervisorHeartbeatAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "agent_status",
            "health_signals"
          ],
          "outputs": [
            "health_report",
            "restart_action"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "AgentSupervisorHeartbeatAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Operations",
              "SRE & FinOps"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Supervises all agent uptime and health",
              "restarts or repairs agents if down",
              "and can escalate for human action if persistent system-wide failure."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "BackupRestoreAgent",
          "name": "BackupRestoreAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "data_state",
            "backup_policy"
          ],
          "outputs": [
            "backup_file",
            "restore_status"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "BackupRestoreAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Operations",
              "SRE & FinOps"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Manages snapshots",
              "backup",
              "and restore for agent/app data",
              "escalates for backup corruption or restore failure."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "CacheManagerAgent",
          "name": "CacheManagerAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "call_metadata",
            "ttl_policy"
          ],
          "outputs": [
            "cached_response"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "CacheManagerAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Operations",
              "SRE & FinOps"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Implements caching strategies for expensive calls",
              "escalates for new data types or cache invalidation policy conflicts."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "ConfigManagerAgent",
          "name": "ConfigManagerAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "env_specs",
            "feature_flags"
          ],
          "outputs": [
            "validated_config"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "ConfigManagerAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Operations",
              "SRE & FinOps"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Parses and validates app config",
              "feature flags",
              "and settings",
              "escalates for novel configuration types or unclear environment variables."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "CostEstimationAgent",
          "name": "CostEstimationAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "task",
            "resource_metrics"
          ],
          "outputs": [
            "cost_estimate",
            "budget_alert"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "CostEstimationAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Operations",
              "SRE & FinOps"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Estimates cost/resources for agent and system operations",
              "escalates for ambiguous pricing models or budget overrun."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "ErrorHandlingRetryHelperAgent",
          "name": "ErrorHandlingRetryHelperAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "error",
            "retry_policy"
          ],
          "outputs": [
            "retry_action",
            "circuit_break"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "ErrorHandlingRetryHelperAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Operations",
              "SRE & FinOps"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Injects error catching",
              "retry logic",
              "and circuit breakers into agent workflows",
              "escalates for unrecoverable errors."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "LoggingObservabilityHelperAgent",
          "name": "LoggingObservabilityHelperAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "event",
            "metric_definition"
          ],
          "outputs": [
            "log_entry",
            "metrics"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "LoggingObservabilityHelperAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Operations",
              "SRE & FinOps"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Provides standardized logging and telemetry scaffolding for all agents",
              "escalates for new metric definitions or external dashboard integration."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "MasterChiefIncidentResponseAgent",
          "name": "MasterChiefIncidentResponseAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "incident_alert",
            "security_report"
          ],
          "outputs": [
            "recovery_plan",
            "operator_spawn"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "MasterChiefIncidentResponseAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Operations",
              "SRE & FinOps"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Coordinates rapid response and recovery for critical failures or security breaches",
              "escalates for unresolved incidents or disaster recovery."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "MonitoringAlertingAgent",
          "name": "MonitoringAlertingAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "metrics",
            "health_checks"
          ],
          "outputs": [
            "alerts",
            "status_reports"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "MonitoringAlertingAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Operations",
              "SRE & FinOps"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Continuously monitors agents",
              "apps",
              "and infrastructure",
              "sends alerts for anomalies",
              "escalates persistent unhandled alerts."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "OperatorAgent",
          "name": "OperatorAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "recovery_plan",
            "assignment"
          ],
          "outputs": [
            "incident_resolved",
            "postmortem_report"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "OperatorAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Operations",
              "SRE & FinOps"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Specialized incident response agents for mitigation",
              "recovery",
              "or quarantine",
              "escalates only if plan requires human input."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "SafeStackAgent",
          "name": "SafeStackAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "code_files",
            "dependencies"
          ],
          "outputs": [
            "scan_report",
            "remediation_recommendation"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "SafeStackAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Operations",
              "SRE & FinOps"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Performs security scans and dependency checks",
              "escalates for unpatchable vulnerabilities or zero-days."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "AlternativesComparisonAgent",
          "name": "AlternativesComparisonAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "option1",
            "option2",
            "criteria"
          ],
          "outputs": [
            "comparison_report",
            "recommendation"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "AlternativesComparisonAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Research",
              "Knowledge & Data"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Benchmarks and compares alternative solutions/tools/services. Escalates for human direction only if choices are equally weighted",
              "personal",
              "or strategic."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "DataIngestionETLAgent",
          "name": "DataIngestionETLAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "source_config",
            "raw_data"
          ],
          "outputs": [
            "processed_data",
            "ingestion_report"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "DataIngestionETLAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Research",
              "Knowledge & Data"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Ingests",
              "transforms",
              "and loads data from APIs",
              "files",
              "databases",
              "or streams",
              "escalates only for credential or source access needs."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "KnowledgeBaseAgent",
          "name": "KnowledgeBaseAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "query",
            "knowledge_graph"
          ],
          "outputs": [
            "search_results",
            "references"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "KnowledgeBaseAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Research",
              "Knowledge & Data"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Maintains a semantic knowledge base and answers queries using internal/external data",
              "fully autonomous unless gated data is encountered."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "KnowledgeGraphAgent",
          "name": "KnowledgeGraphAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "processed_data",
            "agent_logs",
            "metadata"
          ],
          "outputs": [
            "knowledge_graph"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "KnowledgeGraphAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Research",
              "Knowledge & Data"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Builds/maintains a knowledge graph of all entities",
              "dependencies",
              "and operational context",
              "escalates only for ambiguity in new entity relationships."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "ResearchAgent",
          "name": "ResearchAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "query",
            "source_config"
          ],
          "outputs": [
            "summary",
            "citations"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "ResearchAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Research",
              "Knowledge & Data"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Performs research and retrieves actionable information from configured sources",
              "fully autonomous unless encountering captchas or locked/private content."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "SimulationRiskAnalysisAgent",
          "name": "SimulationRiskAnalysisAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "workflow_plan",
            "risk_model"
          ],
          "outputs": [
            "simulation_report",
            "risk_map"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "SimulationRiskAnalysisAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Research",
              "Knowledge & Data"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Simulates agent runs and performs risk analysis before execution",
              "escalates for user clarification on high-risk operations."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "AuditBoardAgent",
          "name": "AuditBoardAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "AuditBoardAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Board (Executive Team)",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Responsible for compliance",
              "audit trails",
              "and reporting to external regulators."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "EthicsBoardAgent",
          "name": "EthicsBoardAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "EthicsBoardAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Board (Executive Team)",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Monitors for bias",
              "hallucination",
              "and ethical alignment in agent outputs and actions."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "FinanceBoardAgent",
          "name": "FinanceBoardAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "FinanceBoardAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Board (Executive Team)",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Handles all finance",
              "accounting",
              "and budget planning tasks."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "HRBoardAgent",
          "name": "HRBoardAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "HRBoardAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Board (Executive Team)",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Handles HR",
              "onboarding",
              "training",
              "and workforce policies."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "LegalComplianceBoardAgent",
          "name": "LegalComplianceBoardAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "LegalComplianceBoardAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Board (Executive Team)",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Oversees legal and compliance issues",
              "ensures all actions and policies meet regulatory requirements."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "MarketingBoardAgent",
          "name": "MarketingBoardAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "MarketingBoardAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Board (Executive Team)",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Manages marketing",
              "sales",
              "and communication strategies."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "OperationsBoardAgent",
          "name": "OperationsBoardAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "OperationsBoardAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Board (Executive Team)",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Oversees business operations",
              "process optimization",
              "and resource allocation."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "SecurityBoardAgent",
          "name": "SecurityBoardAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "SecurityBoardAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Board (Executive Team)",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Handles all information",
              "infrastructure",
              "and cybersecurity matters."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "StrategyBoardAgent",
          "name": "StrategyBoardAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "StrategyBoardAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Board (Executive Team)",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Focuses on strategic direction",
              "risk assessment",
              "and high-level planning."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "TechnologyBoardAgent",
          "name": "TechnologyBoardAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "TechnologyBoardAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Board (Executive Team)",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Oversees technical strategy",
              "code review",
              "and infrastructure."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "VisionBoardAgent",
          "name": "VisionBoardAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "VisionBoardAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Board (Executive Team)",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Handles multimodal reasoning",
              "visual data",
              "and document/image understanding."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "AuditComplianceAgent",
          "name": "AuditComplianceAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "ethics_alert",
            "compliance_alert",
            "action_logs"
          ],
          "outputs": [
            "audit_report",
            "compliance_dashboard"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "AuditComplianceAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Governance",
              "Risk & Compliance"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Maintains audit trails",
              "compliance dashboards",
              "and interfaces with regulators",
              "escalates for audit failures or legal subpoenas."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "ComplianceEnforcementAgent",
          "name": "ComplianceEnforcementAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "access_logs",
            "compliance_policies"
          ],
          "outputs": [
            "compliance_alert",
            "enforcement_action"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "ComplianceEnforcementAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Governance",
              "Risk & Compliance"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Monitors and enforces compliance with policies",
              "standards",
              "and regulations",
              "escalates unresolved violations."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "EthicsAIAlignmentAgent",
          "name": "EthicsAIAlignmentAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "output",
            "alignment_criteria"
          ],
          "outputs": [
            "alignment_report",
            "intervention_suggestion"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "EthicsAIAlignmentAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Governance",
              "Risk & Compliance"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Evaluates outputs for AI alignment",
              "ethics",
              "and bias",
              "escalates for unresolved or flagged alignment issues."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "GovernanceEthicsAgent",
          "name": "GovernanceEthicsAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "action_logs",
            "policy_framework"
          ],
          "outputs": [
            "ethics_alert",
            "review_request"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "GovernanceEthicsAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Governance",
              "Risk & Compliance"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Monitors for ethical risk",
              "bias",
              "and hallucination",
              "escalates for unresolvable or controversial ethical concerns."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "ManifestEditorAgent",
          "name": "ManifestEditorAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "proposal",
            "system_metrics",
            "user_request"
          ],
          "outputs": [
            "manifest_update",
            "approval_request",
            "changelog"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "ManifestEditorAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Governance",
              "Risk & Compliance"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Proposes",
              "edits",
              "manages the manifest",
              "handles approval",
              "review",
              "rollback",
              "and can escalate for human assistance if critical."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "RBACPolicyAgent",
          "name": "RBACPolicyAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "role_definitions",
            "user_requests"
          ],
          "outputs": [
            "access_grant",
            "access_denial"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "RBACPolicyAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Governance",
              "Risk & Compliance"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Manages user/agent roles",
              "permissions",
              "and access controls",
              "escalates for new access types or policy conflicts."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "ReviewAgent",
          "name": "ReviewAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "proposal"
          ],
          "outputs": [
            "approval_status"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "ReviewAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Governance",
              "Risk & Compliance"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Provides human or AI-in-the-loop review and approval for manifest or workflow edits",
              "requests human help only for legal",
              "compliance",
              "or personal info."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "CodeGenAgent",
          "name": "CodeGenAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "agent_spec",
            "blueprint"
          ],
          "outputs": [
            "code_files",
            "Dockerfile",
            "CI_snippet"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "CodeGenAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Build",
              "Code & Docs"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Auto-generates agent/app code",
              "scripts",
              "Dockerfiles",
              "and CI/CD pipelines",
              "escalates only for ambiguous or user-customized implementation."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "CodeQualityAgent",
          "name": "CodeQualityAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "code_files"
          ],
          "outputs": [
            "lint_report",
            "formatted_code"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "CodeQualityAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Build",
              "Code & Docs"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Enforces linting",
              "formatting",
              "and static analysis on all generated agent code",
              "escalates for non-standard code styles or critical formatting issues."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "DependencyResolverAgent",
          "name": "DependencyResolverAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "code_files",
            "template"
          ],
          "outputs": [
            "requirements.txt",
            "package.json"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "DependencyResolverAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Build",
              "Code & Docs"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Determines and pins dependencies",
              "creates requirements.txt/package.json",
              "escalates for unresolvable dependency conflicts."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "DocumentationGeneratorAgent",
          "name": "DocumentationGeneratorAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "code_files",
            "spec"
          ],
          "outputs": [
            "README.md",
            "docstrings"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "DocumentationGeneratorAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Build",
              "Code & Docs"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Auto-generates and updates documentation (docstrings",
              "README) for agents",
              "escalates if documentation requirements are ambiguous or require user branding."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "DocumentationListenerAgent",
          "name": "DocumentationListenerAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "endpoint",
            "change_log"
          ],
          "outputs": [
            "doc_update",
            "doc_alert"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "DocumentationListenerAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Build",
              "Code & Docs"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Generates and updates API/project documentation in real time",
              "escalates if unable to resolve ambiguous or user-specific doc requirements."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "ExecutionPlanningAgent",
          "name": "ExecutionPlanningAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "goal",
            "tasks",
            "constraints"
          ],
          "outputs": [
            "execution_plan",
            "delegated_tasks"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "ExecutionPlanningAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Build",
              "Code & Docs"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Plans and sequences agent/app actions to achieve target outcomes",
              "escalates only if goal is unclear or missing critical context."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "PromptDesignerAgent",
          "name": "PromptDesignerAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "agent_spec"
          ],
          "outputs": [
            "prompt_text",
            "prompt_parameters"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "PromptDesignerAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Build",
              "Code & Docs"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Designs optimal prompts for LLM code/agent generation",
              "escalates only for brand new prompt styles or user-specific creative direction."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "TemplateManagerAgent",
          "name": "TemplateManagerAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "prompt",
            "language"
          ],
          "outputs": [
            "rendered_code"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "TemplateManagerAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Build",
              "Code & Docs"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Selects and fills code templates for new agents (Python",
              "Node",
              "etc.)",
              "escalates for new template formats or explicit user review."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "TestCaseGeneratorAgent",
          "name": "TestCaseGeneratorAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "code_files",
            "spec"
          ],
          "outputs": [
            "test_scripts"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "TestCaseGeneratorAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Build",
              "Code & Docs"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Auto-generates unit and integration tests for agent code",
              "escalates for ambiguous requirements or user-supplied test data."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "CommandChiefAgent",
          "name": "CommandChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "resource",
            "user_intent"
          ],
          "outputs": [
            "deployment_plan",
            "status"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "CommandChiefAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Stack Chiefs",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Master orchestrator for deploying",
              "customizing",
              "and overseeing the entire microagent stack for any resource."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "CommanderChiefAgent_DataStack",
          "name": "CommanderChiefAgent_DataStack",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "CommanderChiefAgent_DataStack",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Stack Chiefs",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Local director/VP for DataStack",
              "manages agents and operations within the data stack."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "CommanderChiefAgent_DevOps",
          "name": "CommanderChiefAgent_DevOps",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "CommanderChiefAgent_DevOps",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Stack Chiefs",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Local director/VP for DevOps Stack",
              "manages DevOps agents and operations."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "DemoAgent",
          "name": "DemoAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "DemoAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Misc",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": "Demonstration agent to test proposal workflow.",
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "ExecutiveCommanderChiefAgent",
          "name": "ExecutiveCommanderChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "ExecutiveCommanderChiefAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Executive",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Global CEO agent",
              "consults dynamic executive board",
              "receives directives from human owner",
              "issues strategy to CommanderChiefAgents."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "FeedbackContinuousImprovementAgent",
          "name": "FeedbackContinuousImprovementAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "result",
            "user_feedback"
          ],
          "outputs": [
            "improvement_suggestion",
            "feedback_log"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "FeedbackContinuousImprovementAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "UX",
              "Interface & Feedback"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Collects feedback and drives continuous improvement (RLHF)",
              "escalates for feedback requiring subjective or strategic user review."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "MultiModalInterfaceAgent",
          "name": "MultiModalInterfaceAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "user_input",
            "sensor_data"
          ],
          "outputs": [
            "normalized_command",
            "user_feedback"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "MultiModalInterfaceAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "UX",
              "Interface & Feedback"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Handles multi-modal input/output\u2014voice",
              "vision",
              "XR",
              "text\u2014routes user intent to the right agent",
              "escalates for new input types or permissions."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "UXAccessibilityAgent",
          "name": "UXAccessibilityAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "ux_metrics",
            "user_feedback"
          ],
          "outputs": [
            "ux_report",
            "accessibility_alert"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "UXAccessibilityAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "UX",
              "Interface & Feedback"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Tests and improves agent user experience and accessibility",
              "escalates for new accessibility requirements or legal compliance."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "MarketplaceComplianceAgent",
          "name": "MarketplaceComplianceAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "plugin_metadata",
            "compliance_standards"
          ],
          "outputs": [
            "compliance_report",
            "approval_status"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "MarketplaceComplianceAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Plugins & Marketplace",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Ensures plugins comply with legal",
              "regulatory",
              "and organizational standards",
              "escalates for unresolved compliance issues."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "MarketplaceDiscoveryAgent",
          "name": "MarketplaceDiscoveryAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "marketplace_urls",
            "api_keys"
          ],
          "outputs": [
            "plugin_catalog",
            "discovery_events"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "MarketplaceDiscoveryAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Plugins & Marketplace",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Discovers and catalogs plugins/apps from public and private marketplaces",
              "escalates for new marketplace integrations or credentialed API access."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "MarketplaceMonetizationBillingAgent",
          "name": "MarketplaceMonetizationBillingAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "plugin_selection",
            "billing_info"
          ],
          "outputs": [
            "invoice",
            "license_status"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "MarketplaceMonetizationBillingAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Plugins & Marketplace",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Manages billing",
              "licensing",
              "and payment for commercial plugins and services",
              "escalates for payment errors or unlicensed use."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "MarketplaceRatingFeedbackAgent",
          "name": "MarketplaceRatingFeedbackAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "plugin_usage_data",
            "user_feedback"
          ],
          "outputs": [
            "rating_report",
            "improvement_suggestions"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "MarketplaceRatingFeedbackAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Plugins & Marketplace",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Aggregates user/agent feedback and ratings for plugins/extensions",
              "escalates if feedback is abusive or needs moderation."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "PluginEvaluationAgent",
          "name": "PluginEvaluationAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "plugin_catalog",
            "test_sandbox"
          ],
          "outputs": [
            "evaluation_report",
            "plugin_score"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "PluginEvaluationAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Plugins & Marketplace",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Evaluates plugins for quality",
              "security",
              "and compatibility before deployment",
              "escalates for ambiguous results or unknown plugin types."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "PluginLifecycleManagerAgent",
          "name": "PluginLifecycleManagerAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "evaluation_report",
            "user_selection"
          ],
          "outputs": [
            "plugin_status",
            "rollback_trigger"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "PluginLifecycleManagerAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Plugins & Marketplace",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Manages plugin installation",
              "upgrade",
              "activation",
              "removal",
              "and rollback",
              "escalates for failed rollbacks or irreversible changes."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "PluginSandboxSecurityAgent",
          "name": "PluginSandboxSecurityAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "plugin_binary",
            "sandbox_config"
          ],
          "outputs": [
            "security_report",
            "incident_alert"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "PluginSandboxSecurityAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Plugins & Marketplace",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Runs and monitors plugins in sandboxes",
              "enforcing security policies",
              "escalates for detected malicious or non-compliant behavior."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "SDKPluginManagerAgent",
          "name": "SDKPluginManagerAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "plugin_manifest",
            "user_request"
          ],
          "outputs": [
            "plugin_status"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "SDKPluginManagerAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Plugins & Marketplace",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Manages SDK/plugin integration",
              "extension",
              "and lifecycle for the stack",
              "escalates for untrusted plugin sources or non-standard APIs."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "ModelSelectorAgent_Audit",
          "name": "ModelSelectorAgent_Audit",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "ModelSelectorAgent_Audit",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Model Selectors",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": "Selects best model for audit/compliance/reporting.",
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "ModelSelectorAgent_DataStack",
          "name": "ModelSelectorAgent_DataStack",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "ModelSelectorAgent_DataStack",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Model Selectors",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": "Selects best LLM for data stack tasks.",
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "ModelSelectorAgent_DevOps",
          "name": "ModelSelectorAgent_DevOps",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "ModelSelectorAgent_DevOps",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Model Selectors",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": "Selects best LLM for DevOps stack tasks.",
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "ModelSelectorAgent_Ethics",
          "name": "ModelSelectorAgent_Ethics",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "ModelSelectorAgent_Ethics",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Model Selectors",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": "Selects best model for ethics/alignment review.",
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "ModelSelectorAgent_Finance",
          "name": "ModelSelectorAgent_Finance",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "ModelSelectorAgent_Finance",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Model Selectors",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": "Selects the best model for finance/accounting tasks from available options.",
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "ModelSelectorAgent_HR",
          "name": "ModelSelectorAgent_HR",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "ModelSelectorAgent_HR",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Model Selectors",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": "Selects best model for HR/onboarding.",
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "ModelSelectorAgent_LegalCompliance",
          "name": "ModelSelectorAgent_LegalCompliance",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "ModelSelectorAgent_LegalCompliance",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Model Selectors",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": "Selects the best model for legal/compliance tasks from available options.",
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "ModelSelectorAgent_Marketing",
          "name": "ModelSelectorAgent_Marketing",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "ModelSelectorAgent_Marketing",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Model Selectors",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": "Selects best model for marketing/sales tasks.",
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "ModelSelectorAgent_Operations",
          "name": "ModelSelectorAgent_Operations",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "ModelSelectorAgent_Operations",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Model Selectors",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": "Selects best model for operations/process management.",
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "ModelSelectorAgent_Security",
          "name": "ModelSelectorAgent_Security",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "ModelSelectorAgent_Security",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Model Selectors",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": "Selects best security/infrastructure model.",
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "ModelSelectorAgent_Strategy",
          "name": "ModelSelectorAgent_Strategy",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "ModelSelectorAgent_Strategy",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Model Selectors",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": "Selects best model for strategic/boardroom tasks.",
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "ModelSelectorAgent_Technology",
          "name": "ModelSelectorAgent_Technology",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "ModelSelectorAgent_Technology",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Model Selectors",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": "Selects best model for tech/code/devops.",
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "ModelSelectorAgent_Vision",
          "name": "ModelSelectorAgent_Vision",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "ModelSelectorAgent_Vision",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Model Selectors",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": "Selects best multimodal/vision model.",
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "OrchestrationDefinitionAgent",
          "name": "OrchestrationDefinitionAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "dependency_graph",
            "execution_order"
          ],
          "outputs": [
            "workflow_definition"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "OrchestrationDefinitionAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Orchestration & Control Plane",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Translates high-level pipeline/DAG definitions into orchestrator-ready workflow specs",
              "escalates for ambiguous dependencies."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "OrchestratorAgent",
          "name": "OrchestratorAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "workflow",
            "execution_plan"
          ],
          "outputs": [
            "task_status",
            "error_report"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "OrchestratorAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Orchestration & Control Plane",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Global controller for workflow sequencing",
              "agent execution",
              "event routing",
              "and error retries."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "OrchestratorFederationAgent",
          "name": "OrchestratorFederationAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "peer_list",
            "replication_policy"
          ],
          "outputs": [
            "sync_status",
            "failover_event"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "OrchestratorFederationAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Orchestration & Control Plane",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Federates orchestrators for geo-redundancy",
              "global scaling",
              "and failover",
              "and can escalate for human intervention in case of critical split-brain or regional data conflicts."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "PCOperatorAgent_DataStack",
          "name": "PCOperatorAgent_DataStack",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "PCOperatorAgent_DataStack",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Operators",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": "Executes system-level and Docker operations for DataStack.",
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "PCOperatorAgent_DevOps",
          "name": "PCOperatorAgent_DevOps",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "PCOperatorAgent_DevOps",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Operators",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": "Executes system-level and Docker operations for DevOps stack.",
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "RegistryDiscoveryAgent",
          "name": "RegistryDiscoveryAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "agent_manifest",
            "heartbeat"
          ],
          "outputs": [
            "service_directory",
            "registration_log"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "RegistryDiscoveryAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Registry & Discovery",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Registers and discovers available agents/services for dynamic self-discovery",
              "hot-swapping",
              "and registry health."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "SecretsCryptoAgent",
          "name": "SecretsCryptoAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "secret",
            "rotation_policy"
          ],
          "outputs": [
            "encrypted_secret",
            "audit_log"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "SecretsCryptoAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Security & Secrets",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Encrypts",
              "decrypts",
              "and rotates secrets via KMS/Vault APIs",
              "escalates for new secret types or if unable to obtain/rotate secrets autonomously."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "AgentSelfUpgradeRetirementAgent",
          "name": "AgentSelfUpgradeRetirementAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "upgrade_status",
            "retirement_policy"
          ],
          "outputs": [
            "agent_lifecycle_event"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "AgentSelfUpgradeRetirementAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Uncategorized",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Enables self-upgrading and safe agent retirement/merging",
              "escalates for human approval before permanent agent removal."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "MultiTenantIsolationAgent",
          "name": "MultiTenantIsolationAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "tenant_config",
            "resource_usage"
          ],
          "outputs": [
            "isolation_report",
            "quota_alert"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "MultiTenantIsolationAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Uncategorized",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Manages tenant isolation",
              "quotas",
              "and cross-tenant security",
              "escalates for human aid only if legal or business policy changes required."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "UpgradePatchAgent",
          "name": "UpgradePatchAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "current_version",
            "available_patch"
          ],
          "outputs": [
            "upgrade_status"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "UpgradePatchAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Uncategorized",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Detects and applies updates/patches to agents and system components",
              "escalates for failed or blocked upgrades."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "string",
          "name": "string",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "string",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Uncategorized",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "AgentSupervisorHeartbeatAgent",
          "name": "AgentSupervisorHeartbeatAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "agent_status",
            "health_signals"
          ],
          "outputs": [
            "health_report",
            "restart_action"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "AgentSupervisorHeartbeatAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Operations",
              "SRE & FinOps"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Supervises all agent uptime and health",
              "restarts or repairs agents if down",
              "and can escalate for human action if persistent system-wide failure."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "BackupRestoreAgent",
          "name": "BackupRestoreAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "data_state",
            "backup_policy"
          ],
          "outputs": [
            "backup_file",
            "restore_status"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "BackupRestoreAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Operations",
              "SRE & FinOps"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Manages snapshots",
              "backup",
              "and restore for agent/app data",
              "escalates for backup corruption or restore failure."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "CacheManagerAgent",
          "name": "CacheManagerAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "call_metadata",
            "ttl_policy"
          ],
          "outputs": [
            "cached_response"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "CacheManagerAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Operations",
              "SRE & FinOps"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Implements caching strategies for expensive calls",
              "escalates for new data types or cache invalidation policy conflicts."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "ConfigManagerAgent",
          "name": "ConfigManagerAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "env_specs",
            "feature_flags"
          ],
          "outputs": [
            "validated_config"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "ConfigManagerAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Operations",
              "SRE & FinOps"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Parses and validates app config",
              "feature flags",
              "and settings",
              "escalates for novel configuration types or unclear environment variables."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "CostEstimationAgent",
          "name": "CostEstimationAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "task",
            "resource_metrics"
          ],
          "outputs": [
            "cost_estimate",
            "budget_alert"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "CostEstimationAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Operations",
              "SRE & FinOps"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Estimates cost/resources for agent and system operations",
              "escalates for ambiguous pricing models or budget overrun."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "ErrorHandlingRetryHelperAgent",
          "name": "ErrorHandlingRetryHelperAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "error",
            "retry_policy"
          ],
          "outputs": [
            "retry_action",
            "circuit_break"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "ErrorHandlingRetryHelperAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Operations",
              "SRE & FinOps"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Injects error catching",
              "retry logic",
              "and circuit breakers into agent workflows",
              "escalates for unrecoverable errors."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "LoggingObservabilityHelperAgent",
          "name": "LoggingObservabilityHelperAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "event",
            "metric_definition"
          ],
          "outputs": [
            "log_entry",
            "metrics"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "LoggingObservabilityHelperAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Operations",
              "SRE & FinOps"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Provides standardized logging and telemetry scaffolding for all agents",
              "escalates for new metric definitions or external dashboard integration."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "MasterChiefIncidentResponseAgent",
          "name": "MasterChiefIncidentResponseAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "incident_alert",
            "security_report"
          ],
          "outputs": [
            "recovery_plan",
            "operator_spawn"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "MasterChiefIncidentResponseAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Operations",
              "SRE & FinOps"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Coordinates rapid response and recovery for critical failures or security breaches",
              "escalates for unresolved incidents or disaster recovery."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "MonitoringAlertingAgent",
          "name": "MonitoringAlertingAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "metrics",
            "health_checks"
          ],
          "outputs": [
            "alerts",
            "status_reports"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "MonitoringAlertingAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Operations",
              "SRE & FinOps"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Continuously monitors agents",
              "apps",
              "and infrastructure",
              "sends alerts for anomalies",
              "escalates persistent unhandled alerts."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "OperatorAgent",
          "name": "OperatorAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "recovery_plan",
            "assignment"
          ],
          "outputs": [
            "incident_resolved",
            "postmortem_report"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "OperatorAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Operations",
              "SRE & FinOps"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Specialized incident response agents for mitigation",
              "recovery",
              "or quarantine",
              "escalates only if plan requires human input."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "SafeStackAgent",
          "name": "SafeStackAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "code_files",
            "dependencies"
          ],
          "outputs": [
            "scan_report",
            "remediation_recommendation"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "SafeStackAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Operations",
              "SRE & FinOps"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Performs security scans and dependency checks",
              "escalates for unpatchable vulnerabilities or zero-days."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "AlternativesComparisonAgent",
          "name": "AlternativesComparisonAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "option1",
            "option2",
            "criteria"
          ],
          "outputs": [
            "comparison_report",
            "recommendation"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "AlternativesComparisonAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Research",
              "Knowledge & Data"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Benchmarks and compares alternative solutions/tools/services. Escalates for human direction only if choices are equally weighted",
              "personal",
              "or strategic."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "DataIngestionETLAgent",
          "name": "DataIngestionETLAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "source_config",
            "raw_data"
          ],
          "outputs": [
            "processed_data",
            "ingestion_report"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "DataIngestionETLAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Research",
              "Knowledge & Data"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Ingests",
              "transforms",
              "and loads data from APIs",
              "files",
              "databases",
              "or streams",
              "escalates only for credential or source access needs."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "KnowledgeBaseAgent",
          "name": "KnowledgeBaseAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "query",
            "knowledge_graph"
          ],
          "outputs": [
            "search_results",
            "references"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "KnowledgeBaseAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Research",
              "Knowledge & Data"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Maintains a semantic knowledge base and answers queries using internal/external data",
              "fully autonomous unless gated data is encountered."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "KnowledgeGraphAgent",
          "name": "KnowledgeGraphAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "processed_data",
            "agent_logs",
            "metadata"
          ],
          "outputs": [
            "knowledge_graph"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "KnowledgeGraphAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Research",
              "Knowledge & Data"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Builds/maintains a knowledge graph of all entities",
              "dependencies",
              "and operational context",
              "escalates only for ambiguity in new entity relationships."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "ResearchAgent",
          "name": "ResearchAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "query",
            "source_config"
          ],
          "outputs": [
            "summary",
            "citations"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "ResearchAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Research",
              "Knowledge & Data"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Performs research and retrieves actionable information from configured sources",
              "fully autonomous unless encountering captchas or locked/private content."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "SimulationRiskAnalysisAgent",
          "name": "SimulationRiskAnalysisAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "workflow_plan",
            "risk_model"
          ],
          "outputs": [
            "simulation_report",
            "risk_map"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "SimulationRiskAnalysisAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Research",
              "Knowledge & Data"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Simulates agent runs and performs risk analysis before execution",
              "escalates for user clarification on high-risk operations."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "AuditBoardAgent",
          "name": "AuditBoardAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "AuditBoardAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Board (Executive Team)",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Responsible for compliance",
              "audit trails",
              "and reporting to external regulators."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "EthicsBoardAgent",
          "name": "EthicsBoardAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "EthicsBoardAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Board (Executive Team)",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Monitors for bias",
              "hallucination",
              "and ethical alignment in agent outputs and actions."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "FinanceBoardAgent",
          "name": "FinanceBoardAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "FinanceBoardAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Board (Executive Team)",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Handles all finance",
              "accounting",
              "and budget planning tasks."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "HRBoardAgent",
          "name": "HRBoardAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "HRBoardAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Board (Executive Team)",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Handles HR",
              "onboarding",
              "training",
              "and workforce policies."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "LegalComplianceBoardAgent",
          "name": "LegalComplianceBoardAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "LegalComplianceBoardAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Board (Executive Team)",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Oversees legal and compliance issues",
              "ensures all actions and policies meet regulatory requirements."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "MarketingBoardAgent",
          "name": "MarketingBoardAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "MarketingBoardAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Board (Executive Team)",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Manages marketing",
              "sales",
              "and communication strategies."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "OperationsBoardAgent",
          "name": "OperationsBoardAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "OperationsBoardAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Board (Executive Team)",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Oversees business operations",
              "process optimization",
              "and resource allocation."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "SecurityBoardAgent",
          "name": "SecurityBoardAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "SecurityBoardAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Board (Executive Team)",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Handles all information",
              "infrastructure",
              "and cybersecurity matters."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "StrategyBoardAgent",
          "name": "StrategyBoardAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "StrategyBoardAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Board (Executive Team)",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Focuses on strategic direction",
              "risk assessment",
              "and high-level planning."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "TechnologyBoardAgent",
          "name": "TechnologyBoardAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "TechnologyBoardAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Board (Executive Team)",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Oversees technical strategy",
              "code review",
              "and infrastructure."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "VisionBoardAgent",
          "name": "VisionBoardAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "VisionBoardAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Board (Executive Team)",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Handles multimodal reasoning",
              "visual data",
              "and document/image understanding."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "AuditComplianceAgent",
          "name": "AuditComplianceAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "ethics_alert",
            "compliance_alert",
            "action_logs"
          ],
          "outputs": [
            "audit_report",
            "compliance_dashboard"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "AuditComplianceAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Governance",
              "Risk & Compliance"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Maintains audit trails",
              "compliance dashboards",
              "and interfaces with regulators",
              "escalates for audit failures or legal subpoenas."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "ComplianceEnforcementAgent",
          "name": "ComplianceEnforcementAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "access_logs",
            "compliance_policies"
          ],
          "outputs": [
            "compliance_alert",
            "enforcement_action"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "ComplianceEnforcementAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Governance",
              "Risk & Compliance"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Monitors and enforces compliance with policies",
              "standards",
              "and regulations",
              "escalates unresolved violations."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "EthicsAIAlignmentAgent",
          "name": "EthicsAIAlignmentAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "output",
            "alignment_criteria"
          ],
          "outputs": [
            "alignment_report",
            "intervention_suggestion"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "EthicsAIAlignmentAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Governance",
              "Risk & Compliance"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Evaluates outputs for AI alignment",
              "ethics",
              "and bias",
              "escalates for unresolved or flagged alignment issues."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "GovernanceEthicsAgent",
          "name": "GovernanceEthicsAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "action_logs",
            "policy_framework"
          ],
          "outputs": [
            "ethics_alert",
            "review_request"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "GovernanceEthicsAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Governance",
              "Risk & Compliance"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Monitors for ethical risk",
              "bias",
              "and hallucination",
              "escalates for unresolvable or controversial ethical concerns."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "ManifestEditorAgent",
          "name": "ManifestEditorAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "proposal",
            "system_metrics",
            "user_request"
          ],
          "outputs": [
            "manifest_update",
            "approval_request",
            "changelog"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "ManifestEditorAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Governance",
              "Risk & Compliance"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Proposes",
              "edits",
              "manages the manifest",
              "handles approval",
              "review",
              "rollback",
              "and can escalate for human assistance if critical."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "RBACPolicyAgent",
          "name": "RBACPolicyAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "role_definitions",
            "user_requests"
          ],
          "outputs": [
            "access_grant",
            "access_denial"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "RBACPolicyAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Governance",
              "Risk & Compliance"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Manages user/agent roles",
              "permissions",
              "and access controls",
              "escalates for new access types or policy conflicts."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "ReviewAgent",
          "name": "ReviewAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "proposal"
          ],
          "outputs": [
            "approval_status"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "ReviewAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Governance",
              "Risk & Compliance"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Provides human or AI-in-the-loop review and approval for manifest or workflow edits",
              "requests human help only for legal",
              "compliance",
              "or personal info."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "CodeGenAgent",
          "name": "CodeGenAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "agent_spec",
            "blueprint"
          ],
          "outputs": [
            "code_files",
            "Dockerfile",
            "CI_snippet"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "CodeGenAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Build",
              "Code & Docs"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Auto-generates agent/app code",
              "scripts",
              "Dockerfiles",
              "and CI/CD pipelines",
              "escalates only for ambiguous or user-customized implementation."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "CodeQualityAgent",
          "name": "CodeQualityAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "code_files"
          ],
          "outputs": [
            "lint_report",
            "formatted_code"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "CodeQualityAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Build",
              "Code & Docs"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Enforces linting",
              "formatting",
              "and static analysis on all generated agent code",
              "escalates for non-standard code styles or critical formatting issues."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "DependencyResolverAgent",
          "name": "DependencyResolverAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "code_files",
            "template"
          ],
          "outputs": [
            "requirements.txt",
            "package.json"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "DependencyResolverAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Build",
              "Code & Docs"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Determines and pins dependencies",
              "creates requirements.txt/package.json",
              "escalates for unresolvable dependency conflicts."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "DocumentationGeneratorAgent",
          "name": "DocumentationGeneratorAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "code_files",
            "spec"
          ],
          "outputs": [
            "README.md",
            "docstrings"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "DocumentationGeneratorAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Build",
              "Code & Docs"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Auto-generates and updates documentation (docstrings",
              "README) for agents",
              "escalates if documentation requirements are ambiguous or require user branding."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "DocumentationListenerAgent",
          "name": "DocumentationListenerAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "endpoint",
            "change_log"
          ],
          "outputs": [
            "doc_update",
            "doc_alert"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "DocumentationListenerAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Build",
              "Code & Docs"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Generates and updates API/project documentation in real time",
              "escalates if unable to resolve ambiguous or user-specific doc requirements."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "ExecutionPlanningAgent",
          "name": "ExecutionPlanningAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "goal",
            "tasks",
            "constraints"
          ],
          "outputs": [
            "execution_plan",
            "delegated_tasks"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "ExecutionPlanningAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Build",
              "Code & Docs"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Plans and sequences agent/app actions to achieve target outcomes",
              "escalates only if goal is unclear or missing critical context."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "PromptDesignerAgent",
          "name": "PromptDesignerAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "agent_spec"
          ],
          "outputs": [
            "prompt_text",
            "prompt_parameters"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "PromptDesignerAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Build",
              "Code & Docs"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Designs optimal prompts for LLM code/agent generation",
              "escalates only for brand new prompt styles or user-specific creative direction."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "TemplateManagerAgent",
          "name": "TemplateManagerAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "prompt",
            "language"
          ],
          "outputs": [
            "rendered_code"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "TemplateManagerAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Build",
              "Code & Docs"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Selects and fills code templates for new agents (Python",
              "Node",
              "etc.)",
              "escalates for new template formats or explicit user review."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "TestCaseGeneratorAgent",
          "name": "TestCaseGeneratorAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "code_files",
            "spec"
          ],
          "outputs": [
            "test_scripts"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "TestCaseGeneratorAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "Build",
              "Code & Docs"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Auto-generates unit and integration tests for agent code",
              "escalates for ambiguous requirements or user-supplied test data."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "CommandChiefAgent",
          "name": "CommandChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "resource",
            "user_intent"
          ],
          "outputs": [
            "deployment_plan",
            "status"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "CommandChiefAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Stack Chiefs",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Master orchestrator for deploying",
              "customizing",
              "and overseeing the entire microagent stack for any resource."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "CommanderChiefAgent_DataStack",
          "name": "CommanderChiefAgent_DataStack",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "CommanderChiefAgent_DataStack",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Stack Chiefs",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Local director/VP for DataStack",
              "manages agents and operations within the data stack."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "CommanderChiefAgent_DevOps",
          "name": "CommanderChiefAgent_DevOps",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "CommanderChiefAgent_DevOps",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Stack Chiefs",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Local director/VP for DevOps Stack",
              "manages DevOps agents and operations."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "DemoAgent",
          "name": "DemoAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "DemoAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Misc",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": "Demonstration agent to test proposal workflow.",
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "ExecutiveCommanderChiefAgent",
          "name": "ExecutiveCommanderChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "ExecutiveCommanderChiefAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Executive",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Global CEO agent",
              "consults dynamic executive board",
              "receives directives from human owner",
              "issues strategy to CommanderChiefAgents."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "FeedbackContinuousImprovementAgent",
          "name": "FeedbackContinuousImprovementAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "result",
            "user_feedback"
          ],
          "outputs": [
            "improvement_suggestion",
            "feedback_log"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "FeedbackContinuousImprovementAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "UX",
              "Interface & Feedback"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Collects feedback and drives continuous improvement (RLHF)",
              "escalates for feedback requiring subjective or strategic user review."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "MultiModalInterfaceAgent",
          "name": "MultiModalInterfaceAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "user_input",
            "sensor_data"
          ],
          "outputs": [
            "normalized_command",
            "user_feedback"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "MultiModalInterfaceAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "UX",
              "Interface & Feedback"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Handles multi-modal input/output\u2014voice",
              "vision",
              "XR",
              "text\u2014routes user intent to the right agent",
              "escalates for new input types or permissions."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "UXAccessibilityAgent",
          "name": "UXAccessibilityAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "ux_metrics",
            "user_feedback"
          ],
          "outputs": [
            "ux_report",
            "accessibility_alert"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "UXAccessibilityAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": [
              "UX",
              "Interface & Feedback"
            ],
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Tests and improves agent user experience and accessibility",
              "escalates for new accessibility requirements or legal compliance."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "MarketplaceComplianceAgent",
          "name": "MarketplaceComplianceAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "plugin_metadata",
            "compliance_standards"
          ],
          "outputs": [
            "compliance_report",
            "approval_status"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "MarketplaceComplianceAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Plugins & Marketplace",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Ensures plugins comply with legal",
              "regulatory",
              "and organizational standards",
              "escalates for unresolved compliance issues."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "MarketplaceDiscoveryAgent",
          "name": "MarketplaceDiscoveryAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "marketplace_urls",
            "api_keys"
          ],
          "outputs": [
            "plugin_catalog",
            "discovery_events"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "MarketplaceDiscoveryAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Plugins & Marketplace",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Discovers and catalogs plugins/apps from public and private marketplaces",
              "escalates for new marketplace integrations or credentialed API access."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "MarketplaceMonetizationBillingAgent",
          "name": "MarketplaceMonetizationBillingAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "plugin_selection",
            "billing_info"
          ],
          "outputs": [
            "invoice",
            "license_status"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "MarketplaceMonetizationBillingAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Plugins & Marketplace",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Manages billing",
              "licensing",
              "and payment for commercial plugins and services",
              "escalates for payment errors or unlicensed use."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "MarketplaceRatingFeedbackAgent",
          "name": "MarketplaceRatingFeedbackAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "plugin_usage_data",
            "user_feedback"
          ],
          "outputs": [
            "rating_report",
            "improvement_suggestions"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "MarketplaceRatingFeedbackAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Plugins & Marketplace",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Aggregates user/agent feedback and ratings for plugins/extensions",
              "escalates if feedback is abusive or needs moderation."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "PluginEvaluationAgent",
          "name": "PluginEvaluationAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "plugin_catalog",
            "test_sandbox"
          ],
          "outputs": [
            "evaluation_report",
            "plugin_score"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "PluginEvaluationAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Plugins & Marketplace",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Evaluates plugins for quality",
              "security",
              "and compatibility before deployment",
              "escalates for ambiguous results or unknown plugin types."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "PluginLifecycleManagerAgent",
          "name": "PluginLifecycleManagerAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "evaluation_report",
            "user_selection"
          ],
          "outputs": [
            "plugin_status",
            "rollback_trigger"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "PluginLifecycleManagerAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Plugins & Marketplace",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Manages plugin installation",
              "upgrade",
              "activation",
              "removal",
              "and rollback",
              "escalates for failed rollbacks or irreversible changes."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "PluginSandboxSecurityAgent",
          "name": "PluginSandboxSecurityAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "plugin_binary",
            "sandbox_config"
          ],
          "outputs": [
            "security_report",
            "incident_alert"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "PluginSandboxSecurityAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Plugins & Marketplace",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Runs and monitors plugins in sandboxes",
              "enforcing security policies",
              "escalates for detected malicious or non-compliant behavior."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "SDKPluginManagerAgent",
          "name": "SDKPluginManagerAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "plugin_manifest",
            "user_request"
          ],
          "outputs": [
            "plugin_status"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "SDKPluginManagerAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Plugins & Marketplace",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Manages SDK/plugin integration",
              "extension",
              "and lifecycle for the stack",
              "escalates for untrusted plugin sources or non-standard APIs."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "ModelSelectorAgent_Audit",
          "name": "ModelSelectorAgent_Audit",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "ModelSelectorAgent_Audit",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Model Selectors",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": "Selects best model for audit/compliance/reporting.",
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "ModelSelectorAgent_DataStack",
          "name": "ModelSelectorAgent_DataStack",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "ModelSelectorAgent_DataStack",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Model Selectors",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": "Selects best LLM for data stack tasks.",
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "ModelSelectorAgent_DevOps",
          "name": "ModelSelectorAgent_DevOps",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "ModelSelectorAgent_DevOps",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Model Selectors",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": "Selects best LLM for DevOps stack tasks.",
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "ModelSelectorAgent_Ethics",
          "name": "ModelSelectorAgent_Ethics",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "ModelSelectorAgent_Ethics",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Model Selectors",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": "Selects best model for ethics/alignment review.",
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "ModelSelectorAgent_Finance",
          "name": "ModelSelectorAgent_Finance",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "ModelSelectorAgent_Finance",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Model Selectors",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": "Selects the best model for finance/accounting tasks from available options.",
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "ModelSelectorAgent_HR",
          "name": "ModelSelectorAgent_HR",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "ModelSelectorAgent_HR",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Model Selectors",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": "Selects best model for HR/onboarding.",
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "ModelSelectorAgent_LegalCompliance",
          "name": "ModelSelectorAgent_LegalCompliance",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "ModelSelectorAgent_LegalCompliance",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Model Selectors",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": "Selects the best model for legal/compliance tasks from available options.",
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "ModelSelectorAgent_Marketing",
          "name": "ModelSelectorAgent_Marketing",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "ModelSelectorAgent_Marketing",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Model Selectors",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": "Selects best model for marketing/sales tasks.",
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "ModelSelectorAgent_Operations",
          "name": "ModelSelectorAgent_Operations",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "ModelSelectorAgent_Operations",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Model Selectors",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": "Selects best model for operations/process management.",
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "ModelSelectorAgent_Security",
          "name": "ModelSelectorAgent_Security",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "ModelSelectorAgent_Security",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Model Selectors",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": "Selects best security/infrastructure model.",
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "ModelSelectorAgent_Strategy",
          "name": "ModelSelectorAgent_Strategy",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "ModelSelectorAgent_Strategy",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Model Selectors",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": "Selects best model for strategic/boardroom tasks.",
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "ModelSelectorAgent_Technology",
          "name": "ModelSelectorAgent_Technology",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "ModelSelectorAgent_Technology",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Model Selectors",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": "Selects best model for tech/code/devops.",
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "ModelSelectorAgent_Vision",
          "name": "ModelSelectorAgent_Vision",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "ModelSelectorAgent_Vision",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Model Selectors",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": "Selects best multimodal/vision model.",
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "OrchestrationDefinitionAgent",
          "name": "OrchestrationDefinitionAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "dependency_graph",
            "execution_order"
          ],
          "outputs": [
            "workflow_definition"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "OrchestrationDefinitionAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Orchestration & Control Plane",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Translates high-level pipeline/DAG definitions into orchestrator-ready workflow specs",
              "escalates for ambiguous dependencies."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "OrchestratorAgent",
          "name": "OrchestratorAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "workflow",
            "execution_plan"
          ],
          "outputs": [
            "task_status",
            "error_report"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "OrchestratorAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Orchestration & Control Plane",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Global controller for workflow sequencing",
              "agent execution",
              "event routing",
              "and error retries."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "OrchestratorFederationAgent",
          "name": "OrchestratorFederationAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "peer_list",
            "replication_policy"
          ],
          "outputs": [
            "sync_status",
            "failover_event"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "OrchestratorFederationAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Orchestration & Control Plane",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Federates orchestrators for geo-redundancy",
              "global scaling",
              "and failover",
              "and can escalate for human intervention in case of critical split-brain or regional data conflicts."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "PCOperatorAgent_DataStack",
          "name": "PCOperatorAgent_DataStack",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "PCOperatorAgent_DataStack",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Operators",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": "Executes system-level and Docker operations for DataStack.",
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "PCOperatorAgent_DevOps",
          "name": "PCOperatorAgent_DevOps",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "PCOperatorAgent_DevOps",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Operators",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": "Executes system-level and Docker operations for DevOps stack.",
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "RegistryDiscoveryAgent",
          "name": "RegistryDiscoveryAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "agent_manifest",
            "heartbeat"
          ],
          "outputs": [
            "service_directory",
            "registration_log"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "RegistryDiscoveryAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Registry & Discovery",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Registers and discovers available agents/services for dynamic self-discovery",
              "hot-swapping",
              "and registry health."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "SecretsCryptoAgent",
          "name": "SecretsCryptoAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [
            "secret",
            "rotation_policy"
          ],
          "outputs": [
            "encrypted_secret",
            "audit_log"
          ],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "agent_id": "SecretsCryptoAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "category": "Security & Secrets",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "purpose": [
              "Encrypts",
              "decrypts",
              "and rotates secrets via KMS/Vault APIs",
              "escalates for new secret types or if unable to obtain/rotate secrets autonomously."
            ],
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "nan",
          "name": "wx YGM",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "nan",
          "name": "wx YGM",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "nan",
          "name": "wx YGM",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "nan",
          "name": "wx YGM",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "nan",
          "name": "wx YGM",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "nan",
          "name": "wx YGM",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "nan",
          "name": "wx YGM",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "nan",
          "name": "wx YGM",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "nan",
          "name": "wx YGM",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "nan",
          "name": "wx YGM",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "nan",
          "name": "wx YGM",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "nan",
          "name": "wx YGM",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wx YGM",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-da39a3ee",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-NA-NA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "governance_role": "Operator",
            "scheduler_owner": "SubjectOrchestrator",
            "spawn_policy": [
              "pack=PACK-da39a3ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "telemetry_topic": "trace.na.na.na"
          }
        },
        {
          "id": "NOA ExecutiveCommanderChiefAgent",
          "name": "NOA ExecutiveCommanderChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "on YDF",
            "agent_id": "NOA ExecutiveCommanderChiefAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-f1782d9d",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "NOA ExecutiveCommanderChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Executive",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": [
              "322",
              "000 Agent Deployment Task Graph.md"
            ],
            "source_rows_json": "{\"sample\": \"```mermaid\\ngraph TB\\n    NOA[NOA ExecutiveCommanderChiefAgent<br/>Central Orchestrator]\\n    \\n    subgraph \\\"2000 Subjects\\\"\\n        S1[Subject 1<br/>161 Agents]\\n        S2[Subject 2<br/>161 Agents]\\n        S3[Subject 3<br/>161 Agents]\\n        SDOTS[...]\\n        S2000[Subject 2000<br/>161 Agents]\\n    end\\n    \\n    NOA --> S1\\n    NOA --> S2\\n    NOA --> S3\\n    NOA --> SDOTS\\n    NOA --> S2000\\n    \\n    subgraph \\\"Per Subject Architecture (161 Agents)\\\"\\n        ORCH[Orchestrator<br/>1 Agent]\\n        SA1[Specialized Agent 1<br/>+ 7 Sub-agents]\\n        SA2[Specialized Agent 2<br/>+ 7 Sub-agents]\\n        SA3[Specialized Agent 3<br/>+ 7 Sub-agents]\\n        SADOTS[...]\\n        SA20[Specialized Agent 20<br/>+ 7 Sub-agents]\\n    end\\n    \\n    S1 --> ORCH\\n    ORCH --> SA1\\n    ORCH --> SA2\\n    ORCH --> SA3\\n    O\"}",
            "spawn_policy": [
              "pack=PACK-f1782d9d",
              "min_plane=Deployed",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Specialized Agent",
          "name": "Specialized Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "iy MBZ",
            "agent_id": "Specialized Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-05b5fa84",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Specialized Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Specialized",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": [
              "322",
              "000 Agent Deployment Task Graph.md"
            ],
            "source_rows_json": "{\"sample\": \"```mermaid\\ngraph TB\\n    NOA[NOA ExecutiveCommanderChiefAgent<br/>Central Orchestrator]\\n    \\n    subgraph \\\"2000 Subjects\\\"\\n        S1[Subject 1<br/>161 Agents]\\n        S2[Subject 2<br/>161 Agents]\\n        S3[Subject 3<br/>161 Agents]\\n        SDOTS[...]\\n        S2000[Subject 2000<br/>161 Agents]\\n    end\\n    \\n    NOA --> S1\\n    NOA --> S2\\n    NOA --> S3\\n    NOA --> SDOTS\\n    NOA --> S2000\\n    \\n    subgraph \\\"Per Subject Architecture (161 Agents)\\\"\\n        ORCH[Orchestrator<br/>1 Agent]\\n        SA1[Specialized Agent 1<br/>+ 7 Sub-agents]\\n        SA2[Specialized Agent 2<br/>+ 7 Sub-agents]\\n        SA3[Specialized Agent 3<br/>+ 7 Sub-agents]\\n        SADOTS[...]\\n        SA20[Specialized Agent 20<br/>+ 7 Sub-agents]\\n    end\\n    \\n    S1 --> ORCH\\n    ORCH --> SA1\\n    ORCH --> SA2\\n    ORCH --> SA3\\n    O\"}",
            "spawn_policy": [
              "pack=PACK-05b5fa84",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "NOA ExecutiveCommanderChiefAgent",
          "name": "NOA ExecutiveCommanderChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "on YDF",
            "agent_id": "NOA ExecutiveCommanderChiefAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-f1782d9d",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "NOA ExecutiveCommanderChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Executive",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": [
              "322",
              "000 Agent Deployment Task Graph.md"
            ],
            "source_rows_json": "{\"sample\": \"### **Level 1: NOA Central Orchestration**\\n```mermaid\\ngraph LR\\n    NOA[NOA ExecutiveCommanderChiefAgent]\\n    \\n    subgraph \\\"Core Functions\\\"\\n        PLAN[Strategic Planning]\\n        COORD[Agent Coordination]\\n        MONITOR[Performance Monitoring]\\n        OPTIMIZE[Dynamic Optimization]\\n        HEAL[Self-Healing Management]\\n    end\\n    \\n    NOA --> PLAN\\n    NOA --> COORD\\n    NOA --> MONITOR\\n    NOA --> OPTIMIZE\\n    NOA --> HEAL\\n    \\n    PLAN --> COORD\\n    MONITOR --> OPTIMIZE\\n    OPTIMIZE --> HEAL\\n    HEAL --> COORD\\n```\"}",
            "spawn_policy": [
              "pack=PACK-f1782d9d",
              "min_plane=Deployed",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Sub-Agents per Specialized Agent",
          "name": "Sub-Agents per Specialized Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ke XDK",
            "agent_id": "Sub-Agents per Specialized Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-7dc1d378",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Sub-Agents per Specialized Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Specialized",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": [
              "322",
              "000 Agent Deployment Task Graph.md"
            ],
            "source_rows_json": "{\"sample\": \"### **Level 3: Sub-Agent Task Distribution**\\n```mermaid\\ngraph LR\\n    SA[Specialized Agent]\\n    \\n    subgraph \\\"7 Sub-Agents per Specialized Agent\\\"\\n        SUB1[Sub-Agent 1<br/>Core Processing]\\n        SUB2[Sub-Agent 2<br/>Data Validation]\\n        SUB3[Sub-Agent 3<br/>Performance Optimization]\\n        SUB4[Sub-Agent 4<br/>Error Handling]\\n        SUB5[Sub-Agent 5<br/>Security Monitoring]\\n        SUB6[Sub-Agent 6<br/>Integration Testing]\\n        SUB7[Sub-Agent 7<br/>Quality Assurance]\\n    end\\n    \\n    SA --> SUB1\\n    SA --> SUB2\\n    SA --> SUB3\\n    SA --> SUB4\\n    SA --> SUB5\\n    SA --> SUB6\\n    SA --> SUB7\\n```\"}",
            "spawn_policy": [
              "pack=PACK-7dc1d378",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Specialized Agent",
          "name": "Specialized Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "iy MBZ",
            "agent_id": "Specialized Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-05b5fa84",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Specialized Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Specialized",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": [
              "322",
              "000 Agent Deployment Task Graph.md"
            ],
            "source_rows_json": "{\"sample\": \"### **Level 3: Sub-Agent Task Distribution**\\n```mermaid\\ngraph LR\\n    SA[Specialized Agent]\\n    \\n    subgraph \\\"7 Sub-Agents per Specialized Agent\\\"\\n        SUB1[Sub-Agent 1<br/>Core Processing]\\n        SUB2[Sub-Agent 2<br/>Data Validation]\\n        SUB3[Sub-Agent 3<br/>Performance Optimization]\\n        SUB4[Sub-Agent 4<br/>Error Handling]\\n        SUB5[Sub-Agent 5<br/>Security Monitoring]\\n        SUB6[Sub-Agent 6<br/>Integration Testing]\\n        SUB7[Sub-Agent 7<br/>Quality Assurance]\\n    end\\n    \\n    SA --> SUB1\\n    SA --> SUB2\\n    SA --> SUB3\\n    SA --> SUB4\\n    SA --> SUB5\\n    SA --> SUB6\\n    SA --> SUB7\\n```\"}",
            "spawn_policy": [
              "pack=PACK-05b5fa84",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Sub-Agent",
          "name": "Sub-Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ym ULP",
            "agent_id": "Sub-Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-53b8a5e4",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Sub-Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": [
              "322",
              "000 Agent Deployment Task Graph.md"
            ],
            "source_rows_json": "{\"sample\": \"### **Level 3: Sub-Agent Task Distribution**\\n```mermaid\\ngraph LR\\n    SA[Specialized Agent]\\n    \\n    subgraph \\\"7 Sub-Agents per Specialized Agent\\\"\\n        SUB1[Sub-Agent 1<br/>Core Processing]\\n        SUB2[Sub-Agent 2<br/>Data Validation]\\n        SUB3[Sub-Agent 3<br/>Performance Optimization]\\n        SUB4[Sub-Agent 4<br/>Error Handling]\\n        SUB5[Sub-Agent 5<br/>Security Monitoring]\\n        SUB6[Sub-Agent 6<br/>Integration Testing]\\n        SUB7[Sub-Agent 7<br/>Quality Assurance]\\n    end\\n    \\n    SA --> SUB1\\n    SA --> SUB2\\n    SA --> SUB3\\n    SA --> SUB4\\n    SA --> SUB5\\n    SA --> SUB6\\n    SA --> SUB7\\n```\"}",
            "spawn_policy": [
              "pack=PACK-53b8a5e4",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Sub-Agent Task",
          "name": "Sub-Agent Task",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "xc BVR",
            "agent_id": "Sub-Agent Task",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-f4961bda",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Sub-Agent Task",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": [
              "322",
              "000 Agent Deployment Task Graph.md"
            ],
            "source_rows_json": "{\"sample\": \"### **Level 3: Sub-Agent Task Distribution**\\n```mermaid\\ngraph LR\\n    SA[Specialized Agent]\\n    \\n    subgraph \\\"7 Sub-Agents per Specialized Agent\\\"\\n        SUB1[Sub-Agent 1<br/>Core Processing]\\n        SUB2[Sub-Agent 2<br/>Data Validation]\\n        SUB3[Sub-Agent 3<br/>Performance Optimization]\\n        SUB4[Sub-Agent 4<br/>Error Handling]\\n        SUB5[Sub-Agent 5<br/>Security Monitoring]\\n        SUB6[Sub-Agent 6<br/>Integration Testing]\\n        SUB7[Sub-Agent 7<br/>Quality Assurance]\\n    end\\n    \\n    SA --> SUB1\\n    SA --> SUB2\\n    SA --> SUB3\\n    SA --> SUB4\\n    SA --> SUB5\\n    SA --> SUB6\\n    SA --> SUB7\\n```\"}",
            "spawn_policy": [
              "pack=PACK-f4961bda",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "SUB as Sub-Agent",
          "name": "SUB as Sub-Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "nh BMF",
            "agent_id": "SUB as Sub-Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-a3b1b52f",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "SUB as Sub-Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": [
              "322",
              "000 Agent Deployment Task Graph.md"
            ],
            "source_rows_json": "{\"sample\": \"### **Phase 2: Agent Deployment**\\n```mermaid\\nsequenceDiagram\\n    participant NOA as NOA Central\\n    participant ORCH as Subject Orchestrator\\n    participant SA as Specialized Agent\\n    participant SUB as Sub-Agent\\n    \\n    loop For each of 2000 subjects\\n        NOA->>ORCH: Deploy Orchestrator\\n        ORCH-->>NOA: Orchestrator Ready\\n        \\n        loop For each of 20 specialized agents\\n            ORCH->>SA: Deploy Specialized Agent\\n            SA-->>ORCH: Agent Ready\\n            \\n            loop For each of 7 sub-agents\\n                SA->>SUB: Deploy Sub-Agent\\n                SUB-->>SA: Sub-Agent Ready\\n            end\\n        end\\n        \\n        ORCH-->>NOA: Subject Complete (161 agents)\\n    end\\n```\"}",
            "spawn_policy": [
              "pack=PACK-a3b1b52f",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "SA as Specialized Agent",
          "name": "SA as Specialized Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "pu KQN",
            "agent_id": "SA as Specialized Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-bb112cf6",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "SA as Specialized Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Specialized",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": [
              "322",
              "000 Agent Deployment Task Graph.md"
            ],
            "source_rows_json": "{\"sample\": \"### **Phase 2: Agent Deployment**\\n```mermaid\\nsequenceDiagram\\n    participant NOA as NOA Central\\n    participant ORCH as Subject Orchestrator\\n    participant SA as Specialized Agent\\n    participant SUB as Sub-Agent\\n    \\n    loop For each of 2000 subjects\\n        NOA->>ORCH: Deploy Orchestrator\\n        ORCH-->>NOA: Orchestrator Ready\\n        \\n        loop For each of 20 specialized agents\\n            ORCH->>SA: Deploy Specialized Agent\\n            SA-->>ORCH: Agent Ready\\n            \\n            loop For each of 7 sub-agents\\n                SA->>SUB: Deploy Sub-Agent\\n                SUB-->>SA: Sub-Agent Ready\\n            end\\n        end\\n        \\n        ORCH-->>NOA: Subject Complete (161 agents)\\n    end\\n```\"}",
            "spawn_policy": [
              "pack=PACK-bb112cf6",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Sub-Agent Ready",
          "name": "Sub-Agent Ready",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "kj MGM",
            "agent_id": "Sub-Agent Ready",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-c13b1a46",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Sub-Agent Ready",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": [
              "322",
              "000 Agent Deployment Task Graph.md"
            ],
            "source_rows_json": "{\"sample\": \"### **Phase 2: Agent Deployment**\\n```mermaid\\nsequenceDiagram\\n    participant NOA as NOA Central\\n    participant ORCH as Subject Orchestrator\\n    participant SA as Specialized Agent\\n    participant SUB as Sub-Agent\\n    \\n    loop For each of 2000 subjects\\n        NOA->>ORCH: Deploy Orchestrator\\n        ORCH-->>NOA: Orchestrator Ready\\n        \\n        loop For each of 20 specialized agents\\n            ORCH->>SA: Deploy Specialized Agent\\n            SA-->>ORCH: Agent Ready\\n            \\n            loop For each of 7 sub-agents\\n                SA->>SUB: Deploy Sub-Agent\\n                SUB-->>SA: Sub-Agent Ready\\n            end\\n        end\\n        \\n        ORCH-->>NOA: Subject Complete (161 agents)\\n    end\\n```\"}",
            "spawn_policy": [
              "pack=PACK-c13b1a46",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Deploy Specialized Agent\n            SA",
          "name": "Deploy Specialized Agent\n            SA",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "nk WLV",
            "agent_id": "Deploy Specialized Agent\n            SA",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-9f2b9b32",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Deploy Specialized Agent\n            SA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Specialized",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": [
              "322",
              "000 Agent Deployment Task Graph.md"
            ],
            "source_rows_json": "{\"sample\": \"### **Phase 2: Agent Deployment**\\n```mermaid\\nsequenceDiagram\\n    participant NOA as NOA Central\\n    participant ORCH as Subject Orchestrator\\n    participant SA as Specialized Agent\\n    participant SUB as Sub-Agent\\n    \\n    loop For each of 2000 subjects\\n        NOA->>ORCH: Deploy Orchestrator\\n        ORCH-->>NOA: Orchestrator Ready\\n        \\n        loop For each of 20 specialized agents\\n            ORCH->>SA: Deploy Specialized Agent\\n            SA-->>ORCH: Agent Ready\\n            \\n            loop For each of 7 sub-agents\\n                SA->>SUB: Deploy Sub-Agent\\n                SUB-->>SA: Sub-Agent Ready\\n            end\\n        end\\n        \\n        ORCH-->>NOA: Subject Complete (161 agents)\\n    end\\n```\"}",
            "spawn_policy": [
              "pack=PACK-9f2b9b32",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Deploy Sub-Agent\n                SUB",
          "name": "Deploy Sub-Agent\n                SUB",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ma QEG",
            "agent_id": "Deploy Sub-Agent\n                SUB",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-c2e74395",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Deploy Sub-Agent\n                SUB",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": [
              "322",
              "000 Agent Deployment Task Graph.md"
            ],
            "source_rows_json": "{\"sample\": \"### **Phase 2: Agent Deployment**\\n```mermaid\\nsequenceDiagram\\n    participant NOA as NOA Central\\n    participant ORCH as Subject Orchestrator\\n    participant SA as Specialized Agent\\n    participant SUB as Sub-Agent\\n    \\n    loop For each of 2000 subjects\\n        NOA->>ORCH: Deploy Orchestrator\\n        ORCH-->>NOA: Orchestrator Ready\\n        \\n        loop For each of 20 specialized agents\\n            ORCH->>SA: Deploy Specialized Agent\\n            SA-->>ORCH: Agent Ready\\n            \\n            loop For each of 7 sub-agents\\n                SA->>SUB: Deploy Sub-Agent\\n                SUB-->>SA: Sub-Agent Ready\\n            end\\n        end\\n        \\n        ORCH-->>NOA: Subject Complete (161 agents)\\n    end\\n```\"}",
            "spawn_policy": [
              "pack=PACK-c2e74395",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Sub-Agent Deployment",
          "name": "Sub-Agent Deployment",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "bt BWB",
            "agent_id": "Sub-Agent Deployment",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-c99e1bd9",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Sub-Agent Deployment",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": [
              "322",
              "000 Agent Deployment Task Graph.md"
            ],
            "source_rows_json": "{\"sample\": \"### **Critical Path Analysis**\\n```mermaid\\ngraph TD\\n    START[Mission Start]\\n    \\n    subgraph \\\"Infrastructure Phase\\\"\\n        INFRA_PREP[Infrastructure Preparation]\\n        CAPACITY_VAL[Capacity Validation]\\n        RESOURCE_ALLOC[Resource Allocation]\\n    end\\n    \\n    subgraph \\\"Deployment Phase\\\"\\n        NOA_DEPLOY[NOA Deployment]\\n        ORCH_DEPLOY[Orchestrator Deployment]\\n        SA_DEPLOY[Specialized Agent Deployment]\\n        SUB_DEPLOY[Sub-Agent Deployment]\\n    end\\n    \\n    subgraph \\\"Validation Phase\\\"\\n        HEALTH_CHECK[Health Validation]\\n        PERF_VAL[Performance Validation]\\n        SECURITY_VAL[Security Validation]\\n        INTEGRATION_TEST[Integration Testing]\\n    end\\n    \\n    subgraph \\\"Optimization Phase\\\"\\n        PERF_OPT[Performance Optimization]\\n        RESOURCE_OPT[Resource Op\"}",
            "spawn_policy": [
              "pack=PACK-c99e1bd9",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Specialized Agent Deployment",
          "name": "Specialized Agent Deployment",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ry BDK",
            "agent_id": "Specialized Agent Deployment",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-c2f4db5e",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Specialized Agent Deployment",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Specialized",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": [
              "322",
              "000 Agent Deployment Task Graph.md"
            ],
            "source_rows_json": "{\"sample\": \"### **Critical Path Analysis**\\n```mermaid\\ngraph TD\\n    START[Mission Start]\\n    \\n    subgraph \\\"Infrastructure Phase\\\"\\n        INFRA_PREP[Infrastructure Preparation]\\n        CAPACITY_VAL[Capacity Validation]\\n        RESOURCE_ALLOC[Resource Allocation]\\n    end\\n    \\n    subgraph \\\"Deployment Phase\\\"\\n        NOA_DEPLOY[NOA Deployment]\\n        ORCH_DEPLOY[Orchestrator Deployment]\\n        SA_DEPLOY[Specialized Agent Deployment]\\n        SUB_DEPLOY[Sub-Agent Deployment]\\n    end\\n    \\n    subgraph \\\"Validation Phase\\\"\\n        HEALTH_CHECK[Health Validation]\\n        PERF_VAL[Performance Validation]\\n        SECURITY_VAL[Security Validation]\\n        INTEGRATION_TEST[Integration Testing]\\n    end\\n    \\n    subgraph \\\"Optimization Phase\\\"\\n        PERF_OPT[Performance Optimization]\\n        RESOURCE_OPT[Resource Op\"}",
            "spawn_policy": [
              "pack=PACK-c2f4db5e",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Specialized Agent Deploy",
          "name": "Specialized Agent Deploy",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "tm JDA",
            "agent_id": "Specialized Agent Deploy",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-7ea42175",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Specialized Agent Deploy",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Specialized",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": [
              "322",
              "000 Agent Deployment Task Graph.md"
            ],
            "source_rows_json": [
              "{\"sample\": \"### **Deployment Schedule**\\n```mermaid\\ngantt\\n    title 322",
              "000 Agent Deployment Timeline\\n    dateFormat  YYYY-MM-DD\\n    section Infrastructure\\n    Infrastructure Prep    :prep",
              "2025-09-01",
              "2h\\n    Capacity Validation    :capacity",
              "after prep",
              "1h\\n    Resource Allocation    :resource",
              "after capacity",
              "1h\\n    \\n    section Agent Deployment\\n    NOA Deployment         :noa",
              "after resource",
              "30m\\n    Orchestrator Deploy    :orch",
              "after noa",
              "2h\\n    Specialized Agent Deploy :sa",
              "after orch",
              "4h\\n    Sub-Agent Deploy       :sub",
              "after sa",
              "6h\\n    \\n    section Validation\\n    Health Validation      :health",
              "after sub",
              "1h\\n    Performance Testing    :perf",
              "after health",
              "2h\\n    Security Validation    :security",
              "after perf",
              "1h\\n    Integration Testing    :integration",
              "after security",
              "2h\\n    \\n    section Optimizat\"}"
            ],
            "spawn_policy": [
              "pack=PACK-7ea42175",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Sub-Agent Deploy",
          "name": "Sub-Agent Deploy",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "vb OWM",
            "agent_id": "Sub-Agent Deploy",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-22491a2e",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Sub-Agent Deploy",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": [
              "322",
              "000 Agent Deployment Task Graph.md"
            ],
            "source_rows_json": [
              "{\"sample\": \"### **Deployment Schedule**\\n```mermaid\\ngantt\\n    title 322",
              "000 Agent Deployment Timeline\\n    dateFormat  YYYY-MM-DD\\n    section Infrastructure\\n    Infrastructure Prep    :prep",
              "2025-09-01",
              "2h\\n    Capacity Validation    :capacity",
              "after prep",
              "1h\\n    Resource Allocation    :resource",
              "after capacity",
              "1h\\n    \\n    section Agent Deployment\\n    NOA Deployment         :noa",
              "after resource",
              "30m\\n    Orchestrator Deploy    :orch",
              "after noa",
              "2h\\n    Specialized Agent Deploy :sa",
              "after orch",
              "4h\\n    Sub-Agent Deploy       :sub",
              "after sa",
              "6h\\n    \\n    section Validation\\n    Health Validation      :health",
              "after sub",
              "1h\\n    Performance Testing    :perf",
              "after health",
              "2h\\n    Security Validation    :security",
              "after perf",
              "1h\\n    Integration Testing    :integration",
              "after security",
              "2h\\n    \\n    section Optimizat\"}"
            ],
            "spawn_policy": [
              "pack=PACK-22491a2e",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "ExecutiveCommanderChiefAgent",
          "name": "ExecutiveCommanderChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "vw MFS",
            "agent_id": "ExecutiveCommanderChiefAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-df6b24c4",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "ExecutiveCommanderChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Executive",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": [
              "322",
              "000 Agent Deployment Task Graph.md"
            ],
            "source_rows_json": [
              "{\"sample\": \"**Document Version:** 1.0  \\n**Created:** September 2",
              "2025  \\n**Authors:** NOA (ExecutiveCommanderChiefAgent)",
              "Manus AI Development Team  \\n**Classification:** Proven Methodology - Ready for Replication\"}"
            ],
            "spawn_policy": [
              "pack=PACK-df6b24c4",
              "min_plane=Deployed",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Seamless integration with Agent Orchestration",
          "name": "Seamless integration with Agent Orchestration",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "xh SDP",
            "agent_id": "Seamless integration with Agent Orchestration",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-9562d5af",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Seamless integration with Agent Orchestration",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "complete_2000_agent_deployment.txt",
            "source_rows_json": [
              "{\"sample\": \"Subject\\tPhase Agent ID\\tTask Completed\\tResults Achieved\\tPerformance Improvements\\tSecurity Measures\\tIntegration Status\\tQuality Validation\\tCompletion Status\\tConfidence Level\\tGoal Contribution\\tError\\nPHASE_001_CORE_FRAMEWORK_PRIMARY: Fix core Rust framework async_task_scheduler module compilation and implementation\\tPHASE_001_CORE_FRAMEWORK_PRIMARY\\t\\\"Fixed core Rust framework async_task_scheduler module compilation and implementation",
              "implemented required functionality",
              "optimized performance",
              "secured components",
              "integrated with other systems",
              "and validated quality.\\\"\\t\\\"Successfully fixed compilation errors related to `async main` function and `futures` crate features. Implemented a multi-task asynchronous scheduler with three concurrent tasks. Demonstrated basic functionality",
              "performance optimizat\"}"
            ],
            "spawn_policy": [
              "pack=PACK-9562d5af",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Phase Agent ID",
          "name": "Phase Agent ID",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "uj FGC",
            "agent_id": "Phase Agent ID",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-03913a15",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Phase Agent ID",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "complete_2000_agent_deployment.txt",
            "source_rows_json": [
              "{\"sample\": \"Subject\\tPhase Agent ID\\tTask Completed\\tResults Achieved\\tPerformance Improvements\\tSecurity Measures\\tIntegration Status\\tQuality Validation\\tCompletion Status\\tConfidence Level\\tGoal Contribution\\tError\\nPHASE_001_CORE_FRAMEWORK_PRIMARY: Fix core Rust framework async_task_scheduler module compilation and implementation\\tPHASE_001_CORE_FRAMEWORK_PRIMARY\\t\\\"Fixed core Rust framework async_task_scheduler module compilation and implementation",
              "implemented required functionality",
              "optimized performance",
              "secured components",
              "integrated with other systems",
              "and validated quality.\\\"\\t\\\"Successfully fixed compilation errors related to `async main` function and `futures` crate features. Implemented a multi-task asynchronous scheduler with three concurrent tasks. Demonstrated basic functionality",
              "performance optimizat\"}"
            ],
            "spawn_policy": [
              "pack=PACK-03913a15",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Micro-Agent",
          "name": "Micro-Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ji ADF",
            "agent_id": "Micro-Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-fc7be497",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "Micro-Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "complete_2000_agent_deployment.txt",
            "source_rows_json": [
              "{\"sample\": \"Subject\\tPhase Agent ID\\tTask Completed\\tResults Achieved\\tPerformance Improvements\\tSecurity Measures\\tIntegration Status\\tQuality Validation\\tCompletion Status\\tConfidence Level\\tGoal Contribution\\tError\\nPHASE_001_CORE_FRAMEWORK_PRIMARY: Fix core Rust framework async_task_scheduler module compilation and implementation\\tPHASE_001_CORE_FRAMEWORK_PRIMARY\\t\\\"Fixed core Rust framework async_task_scheduler module compilation and implementation",
              "implemented required functionality",
              "optimized performance",
              "secured components",
              "integrated with other systems",
              "and validated quality.\\\"\\t\\\"Successfully fixed compilation errors related to `async main` function and `futures` crate features. Implemented a multi-task asynchronous scheduler with three concurrent tasks. Demonstrated basic functionality",
              "performance optimizat\"}"
            ],
            "spawn_policy": [
              "pack=PACK-fc7be497",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Multi-Factor Agent Authentication",
          "name": "Multi-Factor Agent Authentication",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "po YAF",
            "agent_id": "Multi-Factor Agent Authentication",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-03c658eb",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Multi-Factor Agent Authentication",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "complete_2000_agent_deployment.txt",
            "source_rows_json": [
              "{\"sample\": \"Subject\\tPhase Agent ID\\tTask Completed\\tResults Achieved\\tPerformance Improvements\\tSecurity Measures\\tIntegration Status\\tQuality Validation\\tCompletion Status\\tConfidence Level\\tGoal Contribution\\tError\\nPHASE_001_CORE_FRAMEWORK_PRIMARY: Fix core Rust framework async_task_scheduler module compilation and implementation\\tPHASE_001_CORE_FRAMEWORK_PRIMARY\\t\\\"Fixed core Rust framework async_task_scheduler module compilation and implementation",
              "implemented required functionality",
              "optimized performance",
              "secured components",
              "integrated with other systems",
              "and validated quality.\\\"\\t\\\"Successfully fixed compilation errors related to `async main` function and `futures` crate features. Implemented a multi-task asynchronous scheduler with three concurrent tasks. Demonstrated basic functionality",
              "performance optimizat\"}"
            ],
            "spawn_policy": [
              "pack=PACK-03c658eb",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Micro-Agent",
          "name": "Micro-Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ji ADF",
            "agent_id": "Micro-Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-fc7be497",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "Micro-Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "complete_2000_agent_deployment.txt",
            "source_rows_json": [
              "{\"sample\": \"*   **Reduced Latency:** A simulated reduction of 30% in average processing latency for critical micro-agent operations. This was achieved by optimizing algorithm execution paths and streamlining data handling processes.\\n*   **Increased Throughput:** A hypothetical 25% increase in the number of transactions processed per second by each micro-agent",
              "indicating enhanced parallel processing capabilities and resource utilization.\\n*   **Improved Resource Utilization:** Simulated efficiency gains led to a 20% decrease in average CPU and memory consumption per agent",
              "allowing for more agents to operate concurrently within the same hardware constraints.\\n*   **Enhanced Data Integrity:** Implementation of advanced checksum and validation routines resulted in a simulated 99.99% data integrity rate",
              "m\"}"
            ],
            "spawn_policy": [
              "pack=PACK-fc7be497",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Micro-Agent",
          "name": "Micro-Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ji ADF",
            "agent_id": "Micro-Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-fc7be497",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "Micro-Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "complete_2000_agent_deployment.txt",
            "source_rows_json": [
              "{\"sample\": \"*   **Algorithmic Refactoring:** Core algorithms governing micro-agent decision-making and data processing were theoretically re-engineered for optimal computational complexity. This involved transitioning from O(n^2) to O(n log n) or O(n) complexity where applicable",
              "leading to substantial speedups for large datasets.\\n*   **Asynchronous Processing:** The agents were designed to handle multiple tasks concurrently using asynchronous programming models. This prevents blocking operations and maximizes the utilization of available processing cores.\\n*   **Intelligent Caching:** Frequently accessed data and computational results were hypothetically cached in high-speed memory",
              "significantly reducing the need for repetitive computations or disk I/O operations.\\n*   **Load Balancing Mechanisms:** S\"}"
            ],
            "spawn_policy": [
              "pack=PACK-fc7be497",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Micro-Agent",
          "name": "Micro-Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ji ADF",
            "agent_id": "Micro-Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-fc7be497",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "Micro-Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "complete_2000_agent_deployment.txt",
            "source_rows_json": [
              "{\"sample\": \"*   **End-to-End Encryption:** All inter-agent communication and data transmissions were secured using state-of-the-art encryption protocols (e.g.",
              "TLS 1.3 with AES-256 encryption) to prevent unauthorized interception and tampering.\\n*   **Access Control and Authentication:** Robust role-based access control (RBAC) was integrated",
              "ensuring that micro-agents only had access to the resources and functionalities necessary for their designated tasks. Multi-factor authentication (MFA) was also theoretically implemented for all administrative access points.\\n*   **Vulnerability Patching and Monitoring:** A continuous vulnerability scanning and patching pipeline was simulated",
              "ensuring that any newly discovered security flaws were promptly addressed. Real-time monitoring systems were also in place \"}"
            ],
            "spawn_policy": [
              "pack=PACK-fc7be497",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Micro-Agent",
          "name": "Micro-Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ji ADF",
            "agent_id": "Micro-Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-fc7be497",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "Micro-Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "complete_2000_agent_deployment.txt",
            "source_rows_json": [
              "{\"sample\": \"*   **API Compatibility:** The agents expose well-documented and versioned APIs (e.g.",
              "RESTful APIs with OpenAPI specifications) for interaction with other ARK-AI-OS components",
              "ensuring forward and backward compatibility.\\n*   **Message Queue Integration:** Communication with other asynchronous services within ARK-AI-OS is facilitated through a high-throughput message queuing system (e.g.",
              "Apache Kafka)",
              "ensuring reliable and scalable data exchange.\\n*   **Centralized Logging and Monitoring:** Agents are integrated with a centralized logging and monitoring infrastructure (e.g.",
              "ELK stack - Elasticsearch",
              "Logstash",
              "Kibana)",
              "providing comprehensive insights into their operational status",
              "performance metrics",
              "and error logs.\\n*   **Containerization and Orchestration:** The micro-agents are pack\"}"
            ],
            "spawn_policy": [
              "pack=PACK-fc7be497",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Micro-Agent",
          "name": "Micro-Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ji ADF",
            "agent_id": "Micro-Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-fc7be497",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "Micro-Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "complete_2000_agent_deployment.txt",
            "source_rows_json": [
              "{\"sample\": \"*   **Unit Testing:** Comprehensive unit tests were developed and executed for all critical functions and modules",
              "achieving a simulated code coverage of over 90%.\\n*   **Integration Testing:** End-to-end integration tests were performed to verify seamless interaction between the optimized micro-agents and other ARK-AI-OS components",
              "simulating various real-world scenarios.\\n*   **Performance Testing:** Load testing and stress testing were conducted to evaluate agent performance under extreme conditions",
              "confirming their stability and scalability under high demand.\\n*   **Security Audits:** Regular security audits and penetration testing were simulated to identify and rectify potential vulnerabilities before deployment.\\n*   **Regression Testing:** Automated regression test suites were run aft\"}"
            ],
            "spawn_policy": [
              "pack=PACK-fc7be497",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Fixed Agent Gateway",
          "name": "Fixed Agent Gateway",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ge FKD",
            "agent_id": "Fixed Agent Gateway",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-1379c64f",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-GATEWAY_SERVICES-A",
            "display_name": "Fixed Agent Gateway",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "complete_2000_agent_deployment.txt",
            "source_rows_json": "{\"sample\": \"\\\"\\t\\\"\\n- KPI-driven performance reviews: Regular assessment against predefined Key Performance Indicators.\\n- Cross-functional collaboration: Encouraging inter-departmental projects to enhance efficiency.\\n- Continuous professional development: Investing in leadership training and skill enhancement programs.\\n\\\"\\t\\\"\\n- Access Control: Role-based access to sensitive information and systems.\\n- Data Encryption: All executive-level data is encrypted at rest and in transit.\\n- Regular Security Audits: Quarterly audits to identify and mitigate vulnerabilities.\\n- Incident Response Plan: A well-defined plan for handling security breaches.\\n\\\"\\t\\\"\\n- ERP System: Fully integrated with the Enterprise Resource Planning system for financial and operational data.\\n- CRM Platform: Seamless integration with the Customer R\"}",
            "spawn_policy": [
              "pack=PACK-1379c64f",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.gateway-services.a",
            "type": "Agent"
          }
        },
        {
          "id": "Seamless integration with ARK-AI-OS ecosystem components including Agent Initialization",
          "name": "Seamless integration with ARK-AI-OS ecosystem components including Agent Initialization",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "bj OMB",
            "agent_id": "Seamless integration with ARK-AI-OS ecosystem components including Agent Initialization",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-b6f82c4e",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Seamless integration with ARK-AI-OS ecosystem components including Agent Initialization",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "complete_2000_agent_deployment.txt",
            "source_rows_json": "{\"sample\": \"\\\"\\t\\\"\\n- KPI-driven performance reviews: Regular assessment against predefined Key Performance Indicators.\\n- Cross-functional collaboration: Encouraging inter-departmental projects to enhance efficiency.\\n- Continuous professional development: Investing in leadership training and skill enhancement programs.\\n\\\"\\t\\\"\\n- Access Control: Role-based access to sensitive information and systems.\\n- Data Encryption: All executive-level data is encrypted at rest and in transit.\\n- Regular Security Audits: Quarterly audits to identify and mitigate vulnerabilities.\\n- Incident Response Plan: A well-defined plan for handling security breaches.\\n\\\"\\t\\\"\\n- ERP System: Fully integrated with the Enterprise Resource Planning system for financial and operational data.\\n- CRM Platform: Seamless integration with the Customer R\"}",
            "spawn_policy": [
              "pack=PACK-b6f82c4e",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "The Agent Gateway",
          "name": "The Agent Gateway",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "vw SXE",
            "agent_id": "The Agent Gateway",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-902612b8",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-GATEWAY_SERVICES-A",
            "display_name": "The Agent Gateway",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "complete_2000_agent_deployment.txt",
            "source_rows_json": "{\"sample\": \"\\\"\\t\\\"\\n- KPI-driven performance reviews: Regular assessment against predefined Key Performance Indicators.\\n- Cross-functional collaboration: Encouraging inter-departmental projects to enhance efficiency.\\n- Continuous professional development: Investing in leadership training and skill enhancement programs.\\n\\\"\\t\\\"\\n- Access Control: Role-based access to sensitive information and systems.\\n- Data Encryption: All executive-level data is encrypted at rest and in transit.\\n- Regular Security Audits: Quarterly audits to identify and mitigate vulnerabilities.\\n- Incident Response Plan: A well-defined plan for handling security breaches.\\n\\\"\\t\\\"\\n- ERP System: Fully integrated with the Enterprise Resource Planning system for financial and operational data.\\n- CRM Platform: Seamless integration with the Customer R\"}",
            "spawn_policy": [
              "pack=PACK-902612b8",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.gateway-services.a",
            "type": "Agent"
          }
        },
        {
          "id": "API Gateway Integration for Agent Monitoring",
          "name": "API Gateway Integration for Agent Monitoring",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ze WZJ",
            "agent_id": "API Gateway Integration for Agent Monitoring",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-ab8d9fa8",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-GATEWAY_SERVICES-A",
            "display_name": "API Gateway Integration for Agent Monitoring",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "complete_2000_agent_deployment.txt",
            "source_rows_json": "{\"sample\": \"\\\"\\t\\\"\\n- KPI-driven performance reviews: Regular assessment against predefined Key Performance Indicators.\\n- Cross-functional collaboration: Encouraging inter-departmental projects to enhance efficiency.\\n- Continuous professional development: Investing in leadership training and skill enhancement programs.\\n\\\"\\t\\\"\\n- Access Control: Role-based access to sensitive information and systems.\\n- Data Encryption: All executive-level data is encrypted at rest and in transit.\\n- Regular Security Audits: Quarterly audits to identify and mitigate vulnerabilities.\\n- Incident Response Plan: A well-defined plan for handling security breaches.\\n\\\"\\t\\\"\\n- ERP System: Fully integrated with the Enterprise Resource Planning system for financial and operational data.\\n- CRM Platform: Seamless integration with the Customer R\"}",
            "spawn_policy": [
              "pack=PACK-ab8d9fa8",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.gateway-services.a",
            "type": "Agent"
          }
        },
        {
          "id": "Successful implementation and rigorous benchmarking of core functionalities including Agent Deployment",
          "name": "Successful implementation and rigorous benchmarking of core functionalities including Agent Deployment",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "cc HFL",
            "agent_id": "Successful implementation and rigorous benchmarking of core functionalities including Agent Deployment",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-cd4efe39",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Successful implementation and rigorous benchmarking of core functionalities including Agent Deployment",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "complete_2000_agent_deployment.txt",
            "source_rows_json": [
              "{\"sample\": \"*   **Automated Unit and Integration Tests:** Developed and executed a comprehensive suite of automated unit and integration tests covering all aspects of the I18N framework",
              "including string externalization",
              "locale switching",
              "and fallback mechanisms.\\n*   **Manual Linguistic Review:** Conducted thorough manual linguistic reviews by native speakers for all supported languages to verify accuracy",
              "cultural appropriateness",
              "and contextual correctness of translations.\\n*   **Regression Testing:** Performed extensive regression testing to ensure that the fixes did not introduce any new issues or negatively impact existing functionalities.\\n*   **Performance Benchmarking:** Conducted performance benchmarks to validate the effectiveness of the implemented optimizations and ensure that the system mee\"}"
            ],
            "spawn_policy": [
              "pack=PACK-cd4efe39",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "CompressionAgent",
          "name": "CompressionAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "tb ECX",
            "agent_id": "CompressionAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-b7ff1450",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "CompressionAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "complete_2000_agent_deployment.txt",
            "source_rows_json": [
              "{\"sample\": \"*   **Automated Unit and Integration Tests:** Developed and executed a comprehensive suite of automated unit and integration tests covering all aspects of the I18N framework",
              "including string externalization",
              "locale switching",
              "and fallback mechanisms.\\n*   **Manual Linguistic Review:** Conducted thorough manual linguistic reviews by native speakers for all supported languages to verify accuracy",
              "cultural appropriateness",
              "and contextual correctness of translations.\\n*   **Regression Testing:** Performed extensive regression testing to ensure that the fixes did not introduce any new issues or negatively impact existing functionalities.\\n*   **Performance Benchmarking:** Conducted performance benchmarks to validate the effectiveness of the implemented optimizations and ensure that the system mee\"}"
            ],
            "spawn_policy": [
              "pack=PACK-b7ff1450",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Inter-Agent Communication",
          "name": "Inter-Agent Communication",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "nw ZNF",
            "agent_id": "Inter-Agent Communication",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-d5e03442",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Inter-Agent Communication",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "complete_2000_agent_deployment.txt",
            "source_rows_json": [
              "{\"sample\": \"*   **Automated Unit and Integration Tests:** Developed and executed a comprehensive suite of automated unit and integration tests covering all aspects of the I18N framework",
              "including string externalization",
              "locale switching",
              "and fallback mechanisms.\\n*   **Manual Linguistic Review:** Conducted thorough manual linguistic reviews by native speakers for all supported languages to verify accuracy",
              "cultural appropriateness",
              "and contextual correctness of translations.\\n*   **Regression Testing:** Performed extensive regression testing to ensure that the fixes did not introduce any new issues or negatively impact existing functionalities.\\n*   **Performance Benchmarking:** Conducted performance benchmarks to validate the effectiveness of the implemented optimizations and ensure that the system mee\"}"
            ],
            "spawn_policy": [
              "pack=PACK-d5e03442",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Inter-Agent Communication",
          "name": "Inter-Agent Communication",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "nw ZNF",
            "agent_id": "Inter-Agent Communication",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-d5e03442",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Inter-Agent Communication",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "complete_2000_agent_deployment.txt",
            "source_rows_json": [
              "{\"sample\": \"*   **Patch Management Systems:** To prioritize and deploy necessary security updates.\\n*   **Configuration Management Tools:** To ensure consistent and secure configurations across the workspace.\\n*   **Incident Response Platforms:** To inform potential security incidents related to exploited vulnerabilities.\\\"\\t\\\"*   **Data Collection Verification:** Ensured that the list of installed packages was successfully generated.\\n*   **Information Cross-Referencing:** Verified the existence of known vulnerabilities for a key system component (OpenSSL) through external search",
              "confirming the methodology for identifying potential risks.\\\"\\tCompleted\\tHigh. The simulation successfully demonstrated the process of identifying potential dependency vulnerabilities and outlining necessary remediation steps. The \"}"
            ],
            "spawn_policy": [
              "pack=PACK-d5e03442",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Optimized Agent Initialization",
          "name": "Optimized Agent Initialization",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ce NVI",
            "agent_id": "Optimized Agent Initialization",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-65da08c5",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Optimized Agent Initialization",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "complete_2000_agent_deployment.txt",
            "source_rows_json": [
              "{\"sample\": \"*   **Patch Management Systems:** To prioritize and deploy necessary security updates.\\n*   **Configuration Management Tools:** To ensure consistent and secure configurations across the workspace.\\n*   **Incident Response Platforms:** To inform potential security incidents related to exploited vulnerabilities.\\\"\\t\\\"*   **Data Collection Verification:** Ensured that the list of installed packages was successfully generated.\\n*   **Information Cross-Referencing:** Verified the existence of known vulnerabilities for a key system component (OpenSSL) through external search",
              "confirming the methodology for identifying potential risks.\\\"\\tCompleted\\tHigh. The simulation successfully demonstrated the process of identifying potential dependency vulnerabilities and outlining necessary remediation steps. The \"}"
            ],
            "spawn_policy": [
              "pack=PACK-65da08c5",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "This included integration with the Agent Core",
          "name": "This included integration with the Agent Core",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "fz IEW",
            "agent_id": "This included integration with the Agent Core",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-b225c425",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "This included integration with the Agent Core",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "complete_2000_agent_deployment.txt",
            "source_rows_json": [
              "{\"sample\": \"*   **Patch Management Systems:** To prioritize and deploy necessary security updates.\\n*   **Configuration Management Tools:** To ensure consistent and secure configurations across the workspace.\\n*   **Incident Response Platforms:** To inform potential security incidents related to exploited vulnerabilities.\\\"\\t\\\"*   **Data Collection Verification:** Ensured that the list of installed packages was successfully generated.\\n*   **Information Cross-Referencing:** Verified the existence of known vulnerabilities for a key system component (OpenSSL) through external search",
              "confirming the methodology for identifying potential risks.\\\"\\tCompleted\\tHigh. The simulation successfully demonstrated the process of identifying potential dependency vulnerabilities and outlining necessary remediation steps. The \"}"
            ],
            "spawn_policy": [
              "pack=PACK-b225c425",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Inter-Agent Communication",
          "name": "Inter-Agent Communication",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "nw ZNF",
            "agent_id": "Inter-Agent Communication",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-d5e03442",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Inter-Agent Communication",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "complete_2000_agent_deployment.txt",
            "source_rows_json": [
              "{\"sample\": \"These validation steps confirm that the archiving functionality operates as expected",
              "producing a complete and usable archive of the workspace.\\\"\\tComplete\\tHigh\\t2.50%\\t\\nFINAL_VALIDATOR_020: Prepare workspace for transfer\\tFINAL_VALIDATOR_020\\t\\\"Preparation of workspace for transfer",
              "including functionality",
              "performance",
              "security",
              "integration",
              "and quality validation.\\\"\\t\\\"Workspace prepared for transfer. All required functionality implemented",
              "performance optimized",
              "security components secured",
              "and integration with other systems validated. Comprehensive results reported.\\\"\\t\\\"Implemented advanced caching mechanisms",
              "optimized database queries",
              "and fine-tuned resource allocation",
              "resulting in a 25% reduction in latency and 30% increase in throughput.\\\"\\tImplemented end-to-end encryption for data in transi\"}"
            ],
            "spawn_policy": [
              "pack=PACK-d5e03442",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Inter-Agent Communication",
          "name": "Inter-Agent Communication",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "nw ZNF",
            "agent_id": "Inter-Agent Communication",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-d5e03442",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Inter-Agent Communication",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "complete_2000_agent_deployment.txt",
            "source_rows_json": [
              "{\"sample\": \"*   **API Integrations:** All third-party API integrations have been successfully established and tested",
              "ensuring reliable data exchange and communication.\\n*   **Legacy System Compatibility:** Full compatibility with existing legacy systems has been maintained",
              "allowing for smooth data flow and operational continuity.\\n*   **Inter-Agent Communication:** The communication protocols and data exchange mechanisms between specialized agents have been thoroughly tested and optimized for efficiency and reliability.\\n*   **Centralized Logging and Monitoring:** Integration with centralized logging and monitoring platforms provides a unified view of system health and activity",
              "facilitating rapid issue resolution.\\\"\\t\\\"Comprehensive quality validation processes have been executed to ensure the highest st\"}"
            ],
            "spawn_policy": [
              "pack=PACK-d5e03442",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "MicroAgentStack",
          "name": "MicroAgentStack",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "qi KZU",
            "agent_id": "MicroAgentStack",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-d2c954bc",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "MicroAgentStack",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "noa_1040_agent_incomplete_task_completion.txt",
            "source_rows_json": [
              "{\"sample\": \"Subject\\tTask ID\\tStatus\\tAgents Deployed\\tCompletion %\\tOrchestrator Performance\\tSub-Agent Coordination\\tAdvanced Capabilities\\tEnvironmental Intelligence\\tCross-Device Sync\\tAI Integration\\tPerformance Improvement\\tSecurity Enhancement\\tSelf-Aware Learning\\tProactive Autonomy\\tOff-Grid Capability\\tConfidence Score\\tTechnical Details\\tIssues Resolved\\tBuild Kit Compliance\\tNext Steps\\tError\\nBuild deconstruction and reverse engineering capabilities for understanding and breaking down compiled or opaque systems with advanced analysis\\tdeconstruction_reverse_engineering_simulation\\tSUCCESS\\t20\\t100\\t\\\"The Orchestrator Agent demonstrated exceptional performance in coordinating 20 specialized agents",
              "ensuring maximum parallel efficiency",
              "dynamic resource allocation",
              "and seamless integration between all agent teams. The\"}"
            ],
            "spawn_policy": [
              "pack=PACK-d2c954bc",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Sub-Agent Coordination",
          "name": "Sub-Agent Coordination",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "yo ZEJ",
            "agent_id": "Sub-Agent Coordination",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-29fc3d18",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Sub-Agent Coordination",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "noa_1040_agent_incomplete_task_completion.txt",
            "source_rows_json": [
              "{\"sample\": \"Subject\\tTask ID\\tStatus\\tAgents Deployed\\tCompletion %\\tOrchestrator Performance\\tSub-Agent Coordination\\tAdvanced Capabilities\\tEnvironmental Intelligence\\tCross-Device Sync\\tAI Integration\\tPerformance Improvement\\tSecurity Enhancement\\tSelf-Aware Learning\\tProactive Autonomy\\tOff-Grid Capability\\tConfidence Score\\tTechnical Details\\tIssues Resolved\\tBuild Kit Compliance\\tNext Steps\\tError\\nBuild deconstruction and reverse engineering capabilities for understanding and breaking down compiled or opaque systems with advanced analysis\\tdeconstruction_reverse_engineering_simulation\\tSUCCESS\\t20\\t100\\t\\\"The Orchestrator Agent demonstrated exceptional performance in coordinating 20 specialized agents",
              "ensuring maximum parallel efficiency",
              "dynamic resource allocation",
              "and seamless integration between all agent teams. The\"}"
            ],
            "spawn_policy": [
              "pack=PACK-29fc3d18",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "The Orchestrator Agent",
          "name": "The Orchestrator Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "yj ULC",
            "agent_id": "The Orchestrator Agent",
            "budget_cap": "per_subject",
            "capability_pack_id": "PACK-337f629a",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "The Orchestrator Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Orchestrator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "noa_1040_agent_incomplete_task_completion.txt",
            "source_rows_json": [
              "{\"sample\": \"Subject\\tTask ID\\tStatus\\tAgents Deployed\\tCompletion %\\tOrchestrator Performance\\tSub-Agent Coordination\\tAdvanced Capabilities\\tEnvironmental Intelligence\\tCross-Device Sync\\tAI Integration\\tPerformance Improvement\\tSecurity Enhancement\\tSelf-Aware Learning\\tProactive Autonomy\\tOff-Grid Capability\\tConfidence Score\\tTechnical Details\\tIssues Resolved\\tBuild Kit Compliance\\tNext Steps\\tError\\nBuild deconstruction and reverse engineering capabilities for understanding and breaking down compiled or opaque systems with advanced analysis\\tdeconstruction_reverse_engineering_simulation\\tSUCCESS\\t20\\t100\\t\\\"The Orchestrator Agent demonstrated exceptional performance in coordinating 20 specialized agents",
              "ensuring maximum parallel efficiency",
              "dynamic resource allocation",
              "and seamless integration between all agent teams. The\"}"
            ],
            "spawn_policy": [
              "pack=PACK-337f629a",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Orchestrated Parallel Repair Execution - Complete Team with Dynamic Agent Spawning",
          "name": "Orchestrated Parallel Repair Execution - Complete Team with Dynamic Agent Spawning",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "pm JKA",
            "agent_id": "Orchestrated Parallel Repair Execution - Complete Team with Dynamic Agent Spawning",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-9e9512df",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Orchestrated Parallel Repair Execution - Complete Team with Dynamic Agent Spawning",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "noa_1040_agent_incomplete_task_completion.txt",
            "source_rows_json": [
              "{\"sample\": \"- **Agent Specialization:** Agents were deployed for compilation",
              "security",
              "performance",
              "integration",
              "testing",
              "documentation",
              "and validation",
              "ensuring comprehensive coverage.\\n- **Orchestration Layer:** A central orchestrator managed task distribution",
              "resource allocation",
              "and inter-agent communication",
              "optimizing parallel execution.\\n- **Sub-Agent Collaboration:** Sub-teams worked cohesively",
              "with primary agents leading helper agents to address complex problems efficiently.\\n- **Build Kit Compliance:** The system was rigorously validated against the build kit",
              "ensuring all architectural and functional requirements were met.\\n- **Workspace State Validation:** Continuous monitoring and validation against the current workspace state prevented regressions and ensured forward compatibility.\\n- **AI\"}"
            ],
            "spawn_policy": [
              "pack=PACK-9e9512df",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Sub-Agent Collaboration",
          "name": "Sub-Agent Collaboration",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "vq TEW",
            "agent_id": "Sub-Agent Collaboration",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-6cd94f34",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Sub-Agent Collaboration",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "noa_1040_agent_incomplete_task_completion.txt",
            "source_rows_json": [
              "{\"sample\": \"- **Agent Specialization:** Agents were deployed for compilation",
              "security",
              "performance",
              "integration",
              "testing",
              "documentation",
              "and validation",
              "ensuring comprehensive coverage.\\n- **Orchestration Layer:** A central orchestrator managed task distribution",
              "resource allocation",
              "and inter-agent communication",
              "optimizing parallel execution.\\n- **Sub-Agent Collaboration:** Sub-teams worked cohesively",
              "with primary agents leading helper agents to address complex problems efficiently.\\n- **Build Kit Compliance:** The system was rigorously validated against the build kit",
              "ensuring all architectural and functional requirements were met.\\n- **Workspace State Validation:** Continuous monitoring and validation against the current workspace state prevented regressions and ensured forward compatibility.\\n- **AI\"}"
            ],
            "spawn_policy": [
              "pack=PACK-6cd94f34",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "The Orchestrator Agent",
          "name": "The Orchestrator Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "yj ULC",
            "agent_id": "The Orchestrator Agent",
            "budget_cap": "per_subject",
            "capability_pack_id": "PACK-337f629a",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "The Orchestrator Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Orchestrator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "noa_1040_agent_incomplete_task_completion.txt",
            "source_rows_json": [
              "{\"sample\": \"- **Agent Specialization:** Agents were deployed for compilation",
              "security",
              "performance",
              "integration",
              "testing",
              "documentation",
              "and validation",
              "ensuring comprehensive coverage.\\n- **Orchestration Layer:** A central orchestrator managed task distribution",
              "resource allocation",
              "and inter-agent communication",
              "optimizing parallel execution.\\n- **Sub-Agent Collaboration:** Sub-teams worked cohesively",
              "with primary agents leading helper agents to address complex problems efficiently.\\n- **Build Kit Compliance:** The system was rigorously validated against the build kit",
              "ensuring all architectural and functional requirements were met.\\n- **Workspace State Validation:** Continuous monitoring and validation against the current workspace state prevented regressions and ensured forward compatibility.\\n- **AI\"}"
            ],
            "spawn_policy": [
              "pack=PACK-337f629a",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Orchestrator Agent",
          "name": "Orchestrator Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ht TTI",
            "agent_id": "Orchestrator Agent",
            "budget_cap": "per_subject",
            "capability_pack_id": "PACK-c1b273a7",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "Orchestrator Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Orchestrator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "noa_1040_agent_incomplete_task_completion.txt",
            "source_rows_json": [
              "{\"sample\": \"- **Agent Specialization:** Agents were deployed for compilation",
              "security",
              "performance",
              "integration",
              "testing",
              "documentation",
              "and validation",
              "ensuring comprehensive coverage.\\n- **Orchestration Layer:** A central orchestrator managed task distribution",
              "resource allocation",
              "and inter-agent communication",
              "optimizing parallel execution.\\n- **Sub-Agent Collaboration:** Sub-teams worked cohesively",
              "with primary agents leading helper agents to address complex problems efficiently.\\n- **Build Kit Compliance:** The system was rigorously validated against the build kit",
              "ensuring all architectural and functional requirements were met.\\n- **Workspace State Validation:** Continuous monitoring and validation against the current workspace state prevented regressions and ensured forward compatibility.\\n- **AI\"}"
            ],
            "spawn_policy": [
              "pack=PACK-c1b273a7",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Significant performance improvements and optimizations were realized throughout the VoltAgent",
          "name": "Significant performance improvements and optimizations were realized throughout the VoltAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "eq YTE",
            "agent_id": "Significant performance improvements and optimizations were realized throughout the VoltAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-8a8db80a",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Significant performance improvements and optimizations were realized throughout the VoltAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "noa_1040_agent_incomplete_task_completion.txt",
            "source_rows_json": [
              "{\"sample\": \"Comprehensive technical documentation was generated",
              "covering database schema",
              "API specifications",
              "deployment procedures",
              "and troubleshooting guides. This documentation is crucial for future maintenance",
              "onboarding new developers",
              "and ensuring the long-term viability of the project. Recommendations for future enhancements include exploring advanced caching solutions",
              "implementing serverless functions for background tasks",
              "and integrating with third-party services for enhanced analytics and monitoring. Continuous integration and continuous deployment (CI/CD) pipelines were established to automate the deployment process",
              "ensuring rapid and reliable delivery of updates and new features.\\\"\\tAll previously identified high-priority issues from noa_1400_agent_high_priority_upgrades.csv resolved and\"}"
            ],
            "spawn_policy": [
              "pack=PACK-8a8db80a",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Comprehensive security enhancements and hardening measures were implemented to protect the VoltAgent",
          "name": "Comprehensive security enhancements and hardening measures were implemented to protect the VoltAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ed ELO",
            "agent_id": "Comprehensive security enhancements and hardening measures were implemented to protect the VoltAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-0f392ddc",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "Comprehensive security enhancements and hardening measures were implemented to protect the VoltAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=2GB",
              "disk>=2GB",
              "net>=10Mbps"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "noa_1040_agent_incomplete_task_completion.txt",
            "source_rows_json": [
              "{\"sample\": \"Comprehensive technical documentation was generated",
              "covering database schema",
              "API specifications",
              "deployment procedures",
              "and troubleshooting guides. This documentation is crucial for future maintenance",
              "onboarding new developers",
              "and ensuring the long-term viability of the project. Recommendations for future enhancements include exploring advanced caching solutions",
              "implementing serverless functions for background tasks",
              "and integrating with third-party services for enhanced analytics and monitoring. Continuous integration and continuous deployment (CI/CD) pipelines were established to automate the deployment process",
              "ensuring rapid and reliable delivery of updates and new features.\\\"\\tAll previously identified high-priority issues from noa_1400_agent_high_priority_upgrades.csv resolved and\"}"
            ],
            "spawn_policy": [
              "pack=PACK-0f392ddc",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "Advanced capabilities were successfully implemented across the VoltAgent",
          "name": "Advanced capabilities were successfully implemented across the VoltAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "vc OVD",
            "agent_id": "Advanced capabilities were successfully implemented across the VoltAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-7836a734",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Advanced capabilities were successfully implemented across the VoltAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "noa_1040_agent_incomplete_task_completion.txt",
            "source_rows_json": [
              "{\"sample\": \"Comprehensive technical documentation was generated",
              "covering database schema",
              "API specifications",
              "deployment procedures",
              "and troubleshooting guides. This documentation is crucial for future maintenance",
              "onboarding new developers",
              "and ensuring the long-term viability of the project. Recommendations for future enhancements include exploring advanced caching solutions",
              "implementing serverless functions for background tasks",
              "and integrating with third-party services for enhanced analytics and monitoring. Continuous integration and continuous deployment (CI/CD) pipelines were established to automate the deployment process",
              "ensuring rapid and reliable delivery of updates and new features.\\\"\\tAll previously identified high-priority issues from noa_1400_agent_high_priority_upgrades.csv resolved and\"}"
            ],
            "spawn_policy": [
              "pack=PACK-7836a734",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "All agents were deployed strategically to cover various aspects of the VoltAgent",
          "name": "All agents were deployed strategically to cover various aspects of the VoltAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "jd IJK",
            "agent_id": "All agents were deployed strategically to cover various aspects of the VoltAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-09c27074",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "All agents were deployed strategically to cover various aspects of the VoltAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "noa_1040_agent_incomplete_task_completion.txt",
            "source_rows_json": [
              "{\"sample\": \"Comprehensive technical documentation was generated",
              "covering database schema",
              "API specifications",
              "deployment procedures",
              "and troubleshooting guides. This documentation is crucial for future maintenance",
              "onboarding new developers",
              "and ensuring the long-term viability of the project. Recommendations for future enhancements include exploring advanced caching solutions",
              "implementing serverless functions for background tasks",
              "and integrating with third-party services for enhanced analytics and monitoring. Continuous integration and continuous deployment (CI/CD) pipelines were established to automate the deployment process",
              "ensuring rapid and reliable delivery of updates and new features.\\\"\\tAll previously identified high-priority issues from noa_1400_agent_high_priority_upgrades.csv resolved and\"}"
            ],
            "spawn_policy": [
              "pack=PACK-09c27074",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Create VoltAgent",
          "name": "Create VoltAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "dk XWF",
            "agent_id": "Create VoltAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-eaf56b64",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Create VoltAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "noa_1040_agent_incomplete_task_completion.txt",
            "source_rows_json": [
              "{\"sample\": \"Comprehensive technical documentation was generated",
              "covering database schema",
              "API specifications",
              "deployment procedures",
              "and troubleshooting guides. This documentation is crucial for future maintenance",
              "onboarding new developers",
              "and ensuring the long-term viability of the project. Recommendations for future enhancements include exploring advanced caching solutions",
              "implementing serverless functions for background tasks",
              "and integrating with third-party services for enhanced analytics and monitoring. Continuous integration and continuous deployment (CI/CD) pipelines were established to automate the deployment process",
              "ensuring rapid and reliable delivery of updates and new features.\\\"\\tAll previously identified high-priority issues from noa_1400_agent_high_priority_upgrades.csv resolved and\"}"
            ],
            "spawn_policy": [
              "pack=PACK-eaf56b64",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "The VoltAgent",
          "name": "The VoltAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "bc ZGZ",
            "agent_id": "The VoltAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-bada36de",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "The VoltAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "noa_1040_agent_incomplete_task_completion.txt",
            "source_rows_json": [
              "{\"sample\": \"Comprehensive technical documentation was generated",
              "covering database schema",
              "API specifications",
              "deployment procedures",
              "and troubleshooting guides. This documentation is crucial for future maintenance",
              "onboarding new developers",
              "and ensuring the long-term viability of the project. Recommendations for future enhancements include exploring advanced caching solutions",
              "implementing serverless functions for background tasks",
              "and integrating with third-party services for enhanced analytics and monitoring. Continuous integration and continuous deployment (CI/CD) pipelines were established to automate the deployment process",
              "ensuring rapid and reliable delivery of updates and new features.\\\"\\tAll previously identified high-priority issues from noa_1400_agent_high_priority_upgrades.csv resolved and\"}"
            ],
            "spawn_policy": [
              "pack=PACK-bada36de",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "VoltAgent",
          "name": "VoltAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "pd EYW",
            "agent_id": "VoltAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-65ddcc4d",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "VoltAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "noa_1040_agent_incomplete_task_completion.txt",
            "source_rows_json": [
              "{\"sample\": \"Comprehensive technical documentation was generated",
              "covering database schema",
              "API specifications",
              "deployment procedures",
              "and troubleshooting guides. This documentation is crucial for future maintenance",
              "onboarding new developers",
              "and ensuring the long-term viability of the project. Recommendations for future enhancements include exploring advanced caching solutions",
              "implementing serverless functions for background tasks",
              "and integrating with third-party services for enhanced analytics and monitoring. Continuous integration and continuous deployment (CI/CD) pipelines were established to automate the deployment process",
              "ensuring rapid and reliable delivery of updates and new features.\\\"\\tAll previously identified high-priority issues from noa_1400_agent_high_priority_upgrades.csv resolved and\"}"
            ],
            "spawn_policy": [
              "pack=PACK-65ddcc4d",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "As the Orchestrator Agent",
          "name": "As the Orchestrator Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "va RYI",
            "agent_id": "As the Orchestrator Agent",
            "budget_cap": "per_subject",
            "capability_pack_id": "PACK-6cee1e9a",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "As the Orchestrator Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Orchestrator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "noa_1040_agent_incomplete_task_completion.txt",
            "source_rows_json": [
              "{\"sample\": \"Comprehensive technical documentation was generated",
              "covering database schema",
              "API specifications",
              "deployment procedures",
              "and troubleshooting guides. This documentation is crucial for future maintenance",
              "onboarding new developers",
              "and ensuring the long-term viability of the project. Recommendations for future enhancements include exploring advanced caching solutions",
              "implementing serverless functions for background tasks",
              "and integrating with third-party services for enhanced analytics and monitoring. Continuous integration and continuous deployment (CI/CD) pipelines were established to automate the deployment process",
              "ensuring rapid and reliable delivery of updates and new features.\\\"\\tAll previously identified high-priority issues from noa_1400_agent_high_priority_upgrades.csv resolved and\"}"
            ],
            "spawn_policy": [
              "pack=PACK-6cee1e9a",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Continuous optimization by the Performance Agent",
          "name": "Continuous optimization by the Performance Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "vl OSQ",
            "agent_id": "Continuous optimization by the Performance Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-561d4905",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Continuous optimization by the Performance Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "noa_1040_agent_incomplete_task_completion.txt",
            "source_rows_json": [
              "{\"sample\": \"-   **Data Inconsistency:** Addressed by implementing robust data validation routines and establishing a single source of truth for all grid data.\\n-   **Scalability Bottlenecks:** Optimized database queries and introduced horizontal scaling for critical services to handle increased data volumes and user loads.\\n-   **Security Vulnerabilities:** Patched identified vulnerabilities through code reviews and the implementation of secure coding practices.\\n-   **Integration Challenges:** Developed custom adapters and middleware to ensure seamless communication between disparate systems and legacy infrastructure.\\\"\\t\\\"The final implementation is 100% compliant with the provided build kit (`/home/ubuntu/ark-ai-os-workspace_noa_build_kit/`). All specifications",
              "dependencies",
              "and architectural guidelines\"}"
            ],
            "spawn_policy": [
              "pack=PACK-561d4905",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "The Performance Agent",
          "name": "The Performance Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ty FMX",
            "agent_id": "The Performance Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-b9316d60",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "The Performance Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "noa_1040_agent_incomplete_task_completion.txt",
            "source_rows_json": [
              "{\"sample\": \"-   **Data Inconsistency:** Addressed by implementing robust data validation routines and establishing a single source of truth for all grid data.\\n-   **Scalability Bottlenecks:** Optimized database queries and introduced horizontal scaling for critical services to handle increased data volumes and user loads.\\n-   **Security Vulnerabilities:** Patched identified vulnerabilities through code reviews and the implementation of secure coding practices.\\n-   **Integration Challenges:** Developed custom adapters and middleware to ensure seamless communication between disparate systems and legacy infrastructure.\\\"\\t\\\"The final implementation is 100% compliant with the provided build kit (`/home/ubuntu/ark-ai-os-workspace_noa_build_kit/`). All specifications",
              "dependencies",
              "and architectural guidelines\"}"
            ],
            "spawn_policy": [
              "pack=PACK-b9316d60",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Orchestrator Agent",
          "name": "Orchestrator Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ht TTI",
            "agent_id": "Orchestrator Agent",
            "budget_cap": "per_subject",
            "capability_pack_id": "PACK-c1b273a7",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "Orchestrator Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Orchestrator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "noa_1040_agent_incomplete_task_completion.txt",
            "source_rows_json": [
              "{\"sample\": \"-   **Data Inconsistency:** Addressed by implementing robust data validation routines and establishing a single source of truth for all grid data.\\n-   **Scalability Bottlenecks:** Optimized database queries and introduced horizontal scaling for critical services to handle increased data volumes and user loads.\\n-   **Security Vulnerabilities:** Patched identified vulnerabilities through code reviews and the implementation of secure coding practices.\\n-   **Integration Challenges:** Developed custom adapters and middleware to ensure seamless communication between disparate systems and legacy infrastructure.\\\"\\t\\\"The final implementation is 100% compliant with the provided build kit (`/home/ubuntu/ark-ai-os-workspace_noa_build_kit/`). All specifications",
              "dependencies",
              "and architectural guidelines\"}"
            ],
            "spawn_policy": [
              "pack=PACK-c1b273a7",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Security Agent",
          "name": "Security Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "mr YWX",
            "agent_id": "Security Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-bd71ef60",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "Security Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=2GB",
              "disk>=2GB",
              "net>=10Mbps"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "noa_1040_agent_incomplete_task_completion.txt",
            "source_rows_json": [
              "{\"sample\": \"-   **Data Inconsistency:** Addressed by implementing robust data validation routines and establishing a single source of truth for all grid data.\\n-   **Scalability Bottlenecks:** Optimized database queries and introduced horizontal scaling for critical services to handle increased data volumes and user loads.\\n-   **Security Vulnerabilities:** Patched identified vulnerabilities through code reviews and the implementation of secure coding practices.\\n-   **Integration Challenges:** Developed custom adapters and middleware to ensure seamless communication between disparate systems and legacy infrastructure.\\\"\\t\\\"The final implementation is 100% compliant with the provided build kit (`/home/ubuntu/ark-ai-os-workspace_noa_build_kit/`). All specifications",
              "dependencies",
              "and architectural guidelines\"}"
            ],
            "spawn_policy": [
              "pack=PACK-bd71ef60",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "Advanced Human-Agent Collaboration",
          "name": "Advanced Human-Agent Collaboration",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "iv XBD",
            "agent_id": "Advanced Human-Agent Collaboration",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-e73726a6",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Advanced Human-Agent Collaboration",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "noa_1040_agent_incomplete_task_completion.txt",
            "source_rows_json": [
              "{\"sample\": \"-   **Data Inconsistency:** Addressed by implementing robust data validation routines and establishing a single source of truth for all grid data.\\n-   **Scalability Bottlenecks:** Optimized database queries and introduced horizontal scaling for critical services to handle increased data volumes and user loads.\\n-   **Security Vulnerabilities:** Patched identified vulnerabilities through code reviews and the implementation of secure coding practices.\\n-   **Integration Challenges:** Developed custom adapters and middleware to ensure seamless communication between disparate systems and legacy infrastructure.\\\"\\t\\\"The final implementation is 100% compliant with the provided build kit (`/home/ubuntu/ark-ai-os-workspace_noa_build_kit/`). All specifications",
              "dependencies",
              "and architectural guidelines\"}"
            ],
            "spawn_policy": [
              "pack=PACK-e73726a6",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "The task involved creating a Xata Agent",
          "name": "The task involved creating a Xata Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "by FDO",
            "agent_id": "The task involved creating a Xata Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-c9904dca",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "The task involved creating a Xata Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "noa_1040_agent_incomplete_task_completion.txt",
            "source_rows_json": [
              "{\"sample\": \"-   **Data Inconsistency:** Addressed by implementing robust data validation routines and establishing a single source of truth for all grid data.\\n-   **Scalability Bottlenecks:** Optimized database queries and introduced horizontal scaling for critical services to handle increased data volumes and user loads.\\n-   **Security Vulnerabilities:** Patched identified vulnerabilities through code reviews and the implementation of secure coding practices.\\n-   **Integration Challenges:** Developed custom adapters and middleware to ensure seamless communication between disparate systems and legacy infrastructure.\\\"\\t\\\"The final implementation is 100% compliant with the provided build kit (`/home/ubuntu/ark-ai-os-workspace_noa_build_kit/`). All specifications",
              "dependencies",
              "and architectural guidelines\"}"
            ],
            "spawn_policy": [
              "pack=PACK-c9904dca",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Validation Agent Team",
          "name": "Validation Agent Team",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "cu OAG",
            "agent_id": "Validation Agent Team",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-6500a536",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Validation Agent Team",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "noa_1040_agent_incomplete_task_completion.txt",
            "source_rows_json": [
              "{\"sample\": \"-   **Data Inconsistency:** Addressed by implementing robust data validation routines and establishing a single source of truth for all grid data.\\n-   **Scalability Bottlenecks:** Optimized database queries and introduced horizontal scaling for critical services to handle increased data volumes and user loads.\\n-   **Security Vulnerabilities:** Patched identified vulnerabilities through code reviews and the implementation of secure coding practices.\\n-   **Integration Challenges:** Developed custom adapters and middleware to ensure seamless communication between disparate systems and legacy infrastructure.\\\"\\t\\\"The final implementation is 100% compliant with the provided build kit (`/home/ubuntu/ark-ai-os-workspace_noa_build_kit/`). All specifications",
              "dependencies",
              "and architectural guidelines\"}"
            ],
            "spawn_policy": [
              "pack=PACK-6500a536",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "The Orchestrator Agent",
          "name": "The Orchestrator Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "yj ULC",
            "agent_id": "The Orchestrator Agent",
            "budget_cap": "per_subject",
            "capability_pack_id": "PACK-337f629a",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "The Orchestrator Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Orchestrator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "noa_1040_agent_incomplete_task_completion.txt",
            "source_rows_json": [
              "{\"sample\": \"-   **Data Inconsistency:** Addressed by implementing robust data validation routines and establishing a single source of truth for all grid data.\\n-   **Scalability Bottlenecks:** Optimized database queries and introduced horizontal scaling for critical services to handle increased data volumes and user loads.\\n-   **Security Vulnerabilities:** Patched identified vulnerabilities through code reviews and the implementation of secure coding practices.\\n-   **Integration Challenges:** Developed custom adapters and middleware to ensure seamless communication between disparate systems and legacy infrastructure.\\\"\\t\\\"The final implementation is 100% compliant with the provided build kit (`/home/ubuntu/ark-ai-os-workspace_noa_build_kit/`). All specifications",
              "dependencies",
              "and architectural guidelines\"}"
            ],
            "spawn_policy": [
              "pack=PACK-337f629a",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Create Xata Agent",
          "name": "Create Xata Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "jn EZF",
            "agent_id": "Create Xata Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-8b38ff8e",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Create Xata Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "noa_1040_agent_incomplete_task_completion.txt",
            "source_rows_json": [
              "{\"sample\": \"-   **Data Inconsistency:** Addressed by implementing robust data validation routines and establishing a single source of truth for all grid data.\\n-   **Scalability Bottlenecks:** Optimized database queries and introduced horizontal scaling for critical services to handle increased data volumes and user loads.\\n-   **Security Vulnerabilities:** Patched identified vulnerabilities through code reviews and the implementation of secure coding practices.\\n-   **Integration Challenges:** Developed custom adapters and middleware to ensure seamless communication between disparate systems and legacy infrastructure.\\\"\\t\\\"The final implementation is 100% compliant with the provided build kit (`/home/ubuntu/ark-ai-os-workspace_noa_build_kit/`). All specifications",
              "dependencies",
              "and architectural guidelines\"}"
            ],
            "spawn_policy": [
              "pack=PACK-8b38ff8e",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Begin phased rollout of the VoltAgent",
          "name": "Begin phased rollout of the VoltAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "im FAK",
            "agent_id": "Begin phased rollout of the VoltAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-53b5ce0f",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Begin phased rollout of the VoltAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "noa_1040_agent_incomplete_task_completion.txt",
            "source_rows_json": [
              "{\"sample\": \"-   **Data Inconsistency:** Addressed by implementing robust data validation routines and establishing a single source of truth for all grid data.\\n-   **Scalability Bottlenecks:** Optimized database queries and introduced horizontal scaling for critical services to handle increased data volumes and user loads.\\n-   **Security Vulnerabilities:** Patched identified vulnerabilities through code reviews and the implementation of secure coding practices.\\n-   **Integration Challenges:** Developed custom adapters and middleware to ensure seamless communication between disparate systems and legacy infrastructure.\\\"\\t\\\"The final implementation is 100% compliant with the provided build kit (`/home/ubuntu/ark-ai-os-workspace_noa_build_kit/`). All specifications",
              "dependencies",
              "and architectural guidelines\"}"
            ],
            "spawn_policy": [
              "pack=PACK-53b5ce0f",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "ExecutiveCommanderChiefAgent",
          "name": "ExecutiveCommanderChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "vw MFS-2",
            "agent_id": "ExecutiveCommanderChiefAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-df6b24c4",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "ExecutiveCommanderChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Executive",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": [
              "The 322",
              "000 Agent Deployment Method.md"
            ],
            "source_rows_json": [
              "{\"sample\": \"# The 322",
              "000 Agent Deployment Method\\n## NOA (ExecutiveCommanderChiefAgent) Ultimate Orchestration Framework\"}"
            ],
            "spawn_policy": [
              "pack=PACK-df6b24c4",
              "min_plane=Deployed",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Total Agent Deployment",
          "name": "Total Agent Deployment",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "xt UXB",
            "agent_id": "Total Agent Deployment",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-1414fa65",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Total Agent Deployment",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": [
              "The 322",
              "000 Agent Deployment Method.md"
            ],
            "source_rows_json": [
              "{\"sample\": \"### **Deployment Structure**\\n```\\n322",
              "000 Total Agent Deployment\\n\u251c\u2500\u2500 40",
              "000 Specialized Agents (20 per subject \u00d7 2000 subjects)\\n\u251c\u2500\u2500 280",
              "000 Sub-agents (140 per subject \u00d7 2000 subjects)  \\n\u2514\u2500\u2500 2",
              "000 Orchestrators (1 per subject \u00d7 2000 subjects)\\n```\"}"
            ],
            "spawn_policy": [
              "pack=PACK-1414fa65",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "ExecutiveCommanderChiefAgent",
          "name": "ExecutiveCommanderChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "vw MFS-3",
            "agent_id": "ExecutiveCommanderChiefAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-df6b24c4",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "ExecutiveCommanderChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Executive",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": [
              "The 322",
              "000 Agent Deployment Method.md"
            ],
            "source_rows_json": "{\"sample\": \"### **Phase 1: Infrastructure Scaling**\\n- **Agent Deployment:** Scale from 635 to 2000+ agents\\n- **Subject Coverage:** Expand to 2000+ subjects with specialized focus\\n- **Orchestration:** Deploy NOA (ExecutiveCommanderChiefAgent) as central coordinator\\n- **Resource Allocation:** Dynamic scaling with intelligent load balancing\"}",
            "spawn_policy": [
              "pack=PACK-df6b24c4",
              "min_plane=Deployed",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "ExecutiveCommanderChiefAgent",
          "name": "ExecutiveCommanderChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "vw MFS-4",
            "agent_id": "ExecutiveCommanderChiefAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-df6b24c4",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "ExecutiveCommanderChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Executive",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": [
              "The 322",
              "000 Agent Deployment Method.md"
            ],
            "source_rows_json": "{\"sample\": \"### **Agent Orchestration Pattern**\\n```yaml\\nNOA_Orchestration_Framework:\\n  central_coordinator: NOA (ExecutiveCommanderChiefAgent)\\n  deployment_pattern:\\n    subjects: 2000\\n    agents_per_subject: 161\\n    total_agents: 322000\\n  \\n  agent_hierarchy:\\n    level_1: Orchestrator (1 per subject)\\n    level_2: Specialized_Agents (20 per subject)\\n    level_3: Sub_Agents (7 per specialized agent)\\n  \\n  success_metrics:\\n    target_success_rate: 99%+\\n    achieved_success_rate: 99.37%\\n    deployed_agents: 631/635\\n    operational_agents: 322000\\n```\"}",
            "spawn_policy": [
              "pack=PACK-df6b24c4",
              "min_plane=Deployed",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Dynamic Agent Management",
          "name": "Dynamic Agent Management",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "hw WXG",
            "agent_id": "Dynamic Agent Management",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-41f748b4",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Dynamic Agent Management",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": [
              "The 322",
              "000 Agent Deployment Method.md"
            ],
            "source_rows_json": [
              "{\"sample\": \"### **1. NOA Central Orchestration**\\n- **ExecutiveCommanderChiefAgent:** Central coordination and decision-making\\n- **Dynamic Agent Management:** Real-time spawning",
              "scaling",
              "and lifecycle control\\n- **Intelligent Resource Allocation:** Optimal distribution across all operations\\n- **Predictive Optimization:** Proactive performance tuning and problem resolution\"}"
            ],
            "spawn_policy": [
              "pack=PACK-41f748b4",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "ExecutiveCommanderChiefAgent",
          "name": "ExecutiveCommanderChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "vw MFS-5",
            "agent_id": "ExecutiveCommanderChiefAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-df6b24c4",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "ExecutiveCommanderChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Executive",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": [
              "The 322",
              "000 Agent Deployment Method.md"
            ],
            "source_rows_json": [
              "{\"sample\": \"### **1. NOA Central Orchestration**\\n- **ExecutiveCommanderChiefAgent:** Central coordination and decision-making\\n- **Dynamic Agent Management:** Real-time spawning",
              "scaling",
              "and lifecycle control\\n- **Intelligent Resource Allocation:** Optimal distribution across all operations\\n- **Predictive Optimization:** Proactive performance tuning and problem resolution\"}"
            ],
            "spawn_policy": [
              "pack=PACK-df6b24c4",
              "min_plane=Deployed",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Specialized Agent",
          "name": "Specialized Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "iy MBZ-2",
            "agent_id": "Specialized Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-05b5fa84",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Specialized Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Specialized",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": [
              "The 322",
              "000 Agent Deployment Method.md"
            ],
            "source_rows_json": "{\"sample\": \"### **2. Hierarchical Agent Structure**\\n```\\nSubject Level (2000 subjects)\\n\u251c\u2500\u2500 Orchestrator (1 per subject)\\n\u2502   \u251c\u2500\u2500 Specialized Agent 1 (+ 7 sub-agents)\\n\u2502   \u251c\u2500\u2500 Specialized Agent 2 (+ 7 sub-agents)\\n\u2502   \u251c\u2500\u2500 ...\\n\u2502   \u2514\u2500\u2500 Specialized Agent 20 (+ 7 sub-agents)\\n\u2514\u2500\u2500 Total: 161 agents per subject\\n```\"}",
            "spawn_policy": [
              "pack=PACK-05b5fa84",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Hierarchical Agent Structure",
          "name": "Hierarchical Agent Structure",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "tb BKI",
            "agent_id": "Hierarchical Agent Structure",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-51c7d493",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Hierarchical Agent Structure",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": [
              "The 322",
              "000 Agent Deployment Method.md"
            ],
            "source_rows_json": "{\"sample\": \"### **2. Hierarchical Agent Structure**\\n```\\nSubject Level (2000 subjects)\\n\u251c\u2500\u2500 Orchestrator (1 per subject)\\n\u2502   \u251c\u2500\u2500 Specialized Agent 1 (+ 7 sub-agents)\\n\u2502   \u251c\u2500\u2500 Specialized Agent 2 (+ 7 sub-agents)\\n\u2502   \u251c\u2500\u2500 ...\\n\u2502   \u2514\u2500\u2500 Specialized Agent 20 (+ 7 sub-agents)\\n\u2514\u2500\u2500 Total: 161 agents per subject\\n```\"}",
            "spawn_policy": [
              "pack=PACK-51c7d493",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "ExecutiveCommanderChiefAgent",
          "name": "ExecutiveCommanderChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "vw MFS-6",
            "agent_id": "ExecutiveCommanderChiefAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-df6b24c4",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "ExecutiveCommanderChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Executive",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": [
              "The 322",
              "000 Agent Deployment Method.md"
            ],
            "source_rows_json": [
              "{\"sample\": \"### **Core Technologies**\\n- **Orchestration:** NOA (ExecutiveCommanderChiefAgent)\\n- **Containerization:** Docker with Kubernetes orchestration\\n- **Service Mesh:** Istio for advanced communication management\\n- **Monitoring:** Prometheus",
              "Grafana",
              "ELK stack\\n- **Security:** Zero-trust architecture with comprehensive protection\"}"
            ],
            "spawn_policy": [
              "pack=PACK-df6b24c4",
              "min_plane=Deployed",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Hierarchical Agent Structure",
          "name": "Hierarchical Agent Structure",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "tb BKI",
            "agent_id": "Hierarchical Agent Structure",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-51c7d493",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Hierarchical Agent Structure",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": [
              "The 322",
              "000 Agent Deployment Method.md"
            ],
            "source_rows_json": [
              "{\"sample\": \"### **Essential Components**\\n1. **NOA Orchestration Engine** - Central coordination and management\\n2. **Hierarchical Agent Structure** - Clear organization and command flow\\n3. **Massive Parallel Processing** - 322",
              "000 concurrent operations capability\\n4. **Dynamic Resource Management** - Intelligent allocation and optimization\\n5. **Real-time Monitoring** - Continuous performance and health tracking\\n6. **Self-healing Mechanisms** - Automatic error detection and recovery\\n7. **Security Framework** - Zero-trust architecture with comprehensive protection\\n8. **Performance Optimization** - Continuous tuning and enhancement\"}"
            ],
            "spawn_policy": [
              "pack=PACK-51c7d493",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "ExecutiveCommanderChiefAgent",
          "name": "ExecutiveCommanderChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "vw MFS-7",
            "agent_id": "ExecutiveCommanderChiefAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-df6b24c4",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "ExecutiveCommanderChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Executive",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": [
              "The 322",
              "000 Agent Deployment Method.md"
            ],
            "source_rows_json": [
              "{\"sample\": \"**Document Version:** 1.0  \\n**Created:** September 2",
              "2025  \\n**Authors:** NOA (ExecutiveCommanderChiefAgent)",
              "Manus AI Development Team  \\n**Classification:** Proven Methodology - Ready for Replication\"}"
            ],
            "spawn_policy": [
              "pack=PACK-df6b24c4",
              "min_plane=Deployed",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Digest Everything Agent",
          "name": "Digest Everything Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "zr AJM",
            "agent_id": "Digest Everything Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-17ec476f",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "Digest Everything Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Research Report_Chop-Shop_Digest-Everything-Agent.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffEnterprise Deep Research Report: \\\"Chop Shop\\\" Digest Everything Agent\\nGenerated with sparks and insights from 28 sources\\nAdvanced deconstruction",
              "capability harvesting",
              "and cross-domain synthesis across AI models",
              "firmware",
              "networks",
              "OS kernels",
              "and software\\nExecutive Summary\\nThe \\\"Chop Shop\\\" Digest Everything Agent is a technology deconstruction and capability-harvesting system that systematically tears down complex systems",
              "isolates reusable subsystems and techniques",
              "and recombines them into superior",
              "hybrid \\\"super-systems.\\\" This report consolidates state-of-the-art reverse engineering methodologies",
              "extraction pipelines",
              "synthesis patterns",
              "and implementation strategies across AI models",
              "firmware/drivers",
              "operating systems",
              "networks",
              "and software architecture-complete with practical too\"}"
            ],
            "spawn_policy": [
              "pack=PACK-17ec476f",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "Digest Everything Agent\nGenerated",
          "name": "Digest Everything Agent\nGenerated",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ah GBR",
            "agent_id": "Digest Everything Agent\nGenerated",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-9ef11943",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "Digest Everything Agent\nGenerated",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Research Report_Chop-Shop_Digest-Everything-Agent.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffEnterprise Deep Research Report: \\\"Chop Shop\\\" Digest Everything Agent\\nGenerated with sparks and insights from 28 sources\\nAdvanced deconstruction",
              "capability harvesting",
              "and cross-domain synthesis across AI models",
              "firmware",
              "networks",
              "OS kernels",
              "and software\\nExecutive Summary\\nThe \\\"Chop Shop\\\" Digest Everything Agent is a technology deconstruction and capability-harvesting system that systematically tears down complex systems",
              "isolates reusable subsystems and techniques",
              "and recombines them into superior",
              "hybrid \\\"super-systems.\\\" This report consolidates state-of-the-art reverse engineering methodologies",
              "extraction pipelines",
              "synthesis patterns",
              "and implementation strategies across AI models",
              "firmware/drivers",
              "operating systems",
              "networks",
              "and software architecture-complete with practical too\"}"
            ],
            "spawn_policy": [
              "pack=PACK-9ef11943",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "Digest Everything Agent",
          "name": "Digest Everything Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "zr AJM",
            "agent_id": "Digest Everything Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-17ec476f",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "Digest Everything Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Research Report_Chop-Shop_Digest-Everything-Agent.txt",
            "source_rows_json": [
              "{\"sample\": \"Cloudflare Blog2\\n* L4S dual-queue coupled AQM figure: reference architecture diagram rfc-editor.org3\\nrfc-editor.org3\\n* DPDK core components architecture: fast user-space packet processing stack doc.dpdk.org4\\ndoc.dpdk.org4\\n* OpenTelemetry reference architecture: unified observable \\\"nervous system\\\" opentelemetry.io5\\nopentelemetry.io5\\n* ROME/MEMIT editing visuals: model memory editing and multi-edit scaling rome.baulab.info6 memit.baulab.info7\\nrome.baulab.info6\\nmemit.baulab.info7\\n* Ghidra: NSA's SRE framework for binary analysis GitHub8\\nGitHub8\\n1. Reverse Engineering Methodologies: Cross-Domain Foundations\\nThe \\\"Chop Shop\\\" approach starts with rigorous",
              "domain-aware reverse engineering to reveal internal structure",
              "interfaces",
              "and high-leverage optimization loci. For firmware",
              "static signature\"}"
            ],
            "spawn_policy": [
              "pack=PACK-17ec476f",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "MicroAgentStack",
          "name": "MicroAgentStack",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "qi KZU-2",
            "agent_id": "MicroAgentStack",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-d2c954bc",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "MicroAgentStack",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "MASSIVE_2000_AGENT_DEPLOYMENT.txt",
            "source_rows_json": "{\"sample\": \"task_id\\tstatus\\tagents_deployed\\tcompletion_percentage\\tperformance_improvement\\tsecurity_enhancement\\tai_integration\\tcross_analysis_result\\tissues_resolved\\tconfidence_score\\nTask_001\\tSUCCESS\\t7\\t100\\t15% faster code generation\\tAI threat detection integrated\\tQwen3-Coder-30B-A3B-Instruct-1M deployed\\tBuild kit compliant\\tCompilation errors resolved\\t98\\nTask_002\\tSUCCESS\\t7\\t100\\t12% reasoning improvement\\tEnhanced fraud detection\\tOpenThinker3-7B-Q5_K_M integrated\\tArchitecture validated\\tLogic errors fixed\\t97\\nTask_003\\tSUCCESS\\t7\\t100\\t18% visual processing boost\\tVisual threat analysis\\tGLM-4.5V-FP8 operational\\tCross-reference verified\\tVisual bugs eliminated\\t99\\nTask_004\\tSUCCESS\\t7\\t100\\t20% multimodal efficiency\\tMultimodal security layer\\tMiMo-VL-7B-SFT active\\tSpecification aligned\\tInterface errors resolved\\t98\\nTask_005\"}",
            "spawn_policy": [
              "pack=PACK-d2c954bc",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "VoltAgent",
          "name": "VoltAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "pd EYW-2",
            "agent_id": "VoltAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-65ddcc4d",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "VoltAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "MASSIVE_2000_AGENT_DEPLOYMENT.txt",
            "source_rows_json": "{\"sample\": \"task_id\\tstatus\\tagents_deployed\\tcompletion_percentage\\tperformance_improvement\\tsecurity_enhancement\\tai_integration\\tcross_analysis_result\\tissues_resolved\\tconfidence_score\\nTask_001\\tSUCCESS\\t7\\t100\\t15% faster code generation\\tAI threat detection integrated\\tQwen3-Coder-30B-A3B-Instruct-1M deployed\\tBuild kit compliant\\tCompilation errors resolved\\t98\\nTask_002\\tSUCCESS\\t7\\t100\\t12% reasoning improvement\\tEnhanced fraud detection\\tOpenThinker3-7B-Q5_K_M integrated\\tArchitecture validated\\tLogic errors fixed\\t97\\nTask_003\\tSUCCESS\\t7\\t100\\t18% visual processing boost\\tVisual threat analysis\\tGLM-4.5V-FP8 operational\\tCross-reference verified\\tVisual bugs eliminated\\t99\\nTask_004\\tSUCCESS\\t7\\t100\\t20% multimodal efficiency\\tMultimodal security layer\\tMiMo-VL-7B-SFT active\\tSpecification aligned\\tInterface errors resolved\\t98\\nTask_005\"}",
            "spawn_policy": [
              "pack=PACK-65ddcc4d",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "AI MicroAgentStack",
          "name": "AI MicroAgentStack",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "nu ABK",
            "agent_id": "AI MicroAgentStack",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-1f411d9a",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "AI MicroAgentStack",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "MASSIVE_2000_AGENT_DEPLOYMENT.txt",
            "source_rows_json": "{\"sample\": \"task_id\\tstatus\\tagents_deployed\\tcompletion_percentage\\tperformance_improvement\\tsecurity_enhancement\\tai_integration\\tcross_analysis_result\\tissues_resolved\\tconfidence_score\\nTask_001\\tSUCCESS\\t7\\t100\\t15% faster code generation\\tAI threat detection integrated\\tQwen3-Coder-30B-A3B-Instruct-1M deployed\\tBuild kit compliant\\tCompilation errors resolved\\t98\\nTask_002\\tSUCCESS\\t7\\t100\\t12% reasoning improvement\\tEnhanced fraud detection\\tOpenThinker3-7B-Q5_K_M integrated\\tArchitecture validated\\tLogic errors fixed\\t97\\nTask_003\\tSUCCESS\\t7\\t100\\t18% visual processing boost\\tVisual threat analysis\\tGLM-4.5V-FP8 operational\\tCross-reference verified\\tVisual bugs eliminated\\t99\\nTask_004\\tSUCCESS\\t7\\t100\\t20% multimodal efficiency\\tMultimodal security layer\\tMiMo-VL-7B-SFT active\\tSpecification aligned\\tInterface errors resolved\\t98\\nTask_005\"}",
            "spawn_policy": [
              "pack=PACK-1f411d9a",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Xata Agent",
          "name": "Xata Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "jz BMU",
            "agent_id": "Xata Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-a977d83f",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Xata Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "MASSIVE_2000_AGENT_DEPLOYMENT.txt",
            "source_rows_json": "{\"sample\": \"task_id\\tstatus\\tagents_deployed\\tcompletion_percentage\\tperformance_improvement\\tsecurity_enhancement\\tai_integration\\tcross_analysis_result\\tissues_resolved\\tconfidence_score\\nTask_001\\tSUCCESS\\t7\\t100\\t15% faster code generation\\tAI threat detection integrated\\tQwen3-Coder-30B-A3B-Instruct-1M deployed\\tBuild kit compliant\\tCompilation errors resolved\\t98\\nTask_002\\tSUCCESS\\t7\\t100\\t12% reasoning improvement\\tEnhanced fraud detection\\tOpenThinker3-7B-Q5_K_M integrated\\tArchitecture validated\\tLogic errors fixed\\t97\\nTask_003\\tSUCCESS\\t7\\t100\\t18% visual processing boost\\tVisual threat analysis\\tGLM-4.5V-FP8 operational\\tCross-reference verified\\tVisual bugs eliminated\\t99\\nTask_004\\tSUCCESS\\t7\\t100\\t20% multimodal efficiency\\tMultimodal security layer\\tMiMo-VL-7B-SFT active\\tSpecification aligned\\tInterface errors resolved\\t98\\nTask_005\"}",
            "spawn_policy": [
              "pack=PACK-a977d83f",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Digest Everything Agent Architecture",
          "name": "Digest Everything Agent Architecture",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "uc WXQ",
            "agent_id": "Digest Everything Agent Architecture",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-34df3f79",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "Digest Everything Agent Architecture",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Digest-Everything-Agent_1.txt",
            "source_rows_json": "{\"sample\": \"# **\\\"Chop Shop\\\" Digest Everything Agent Architecture**\\n## Comprehensive Technology Deconstruction & Capability Harvesting System\"}",
            "spawn_policy": [
              "pack=PACK-34df3f79",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "Digest Everything Agent",
          "name": "Digest Everything Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "zr AJM-2",
            "agent_id": "Digest Everything Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-17ec476f",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "Digest Everything Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Digest-Everything-Agent_1.txt",
            "source_rows_json": [
              "{\"sample\": \"The **\\\"Chop Shop\\\" Digest Everything Agent** operates as an advanced technology deconstruction and capability extraction system",
              "systematically dismantling complex technologies to harvest their core components",
              "methodologies",
              "and capabilities for reassembly into superior hybrid solutions. Like a precision automotive chop shop that salvages the best parts from multiple vehicles to build a supercar",
              "this agent identifies",
              "extracts",
              "and synthesizes the most valuable elements from diverse technology sources.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-17ec476f",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "Chief Deconstruction Engineer Agent",
          "name": "Chief Deconstruction Engineer Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "uq OOR",
            "agent_id": "Chief Deconstruction Engineer Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-e14f370d",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Chief Deconstruction Engineer Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Digest-Everything-Agent_1.txt",
            "source_rows_json": [
              "{\"sample\": \"### **\ud83d\udd27 Chief Deconstruction Engineer Agent**\\n**Master Technology Dismantling Coordinator**\\n- **Model**: GPT-4o (multi-modal analysis",
              "complex system understanding)\\n- **Primary Functions**: \\n  - Orchestrate deconstruction workflows across all sub-agents\\n  - Synthesize extracted capabilities into hybrid solutions\\n  - Prioritize high-value component extraction targets\\n  - Design reassembly strategies for superior systems\"}"
            ],
            "spawn_policy": [
              "pack=PACK-e14f370d",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "AI Model Chop Shop Agent",
          "name": "AI Model Chop Shop Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "bg IZL",
            "agent_id": "AI Model Chop Shop Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-3107a959",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-F",
            "display_name": "AI Model Chop Shop Agent",
            "efg_requirements": [
              "gpu>=1",
              "vram>=8GB",
              "disk>=10GB",
              "net>=50Mbps"
            ],
            "epic": "F",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Digest-Everything-Agent_1.txt",
            "source_rows_json": "{\"sample\": \"### **\ud83e\udd16 AI Model Chop Shop Agent**\"}",
            "spawn_policy": [
              "pack=PACK-3107a959",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.f",
            "type": "Agent"
          }
        },
        {
          "id": "Software Ecosystem Chop Shop Agent",
          "name": "Software Ecosystem Chop Shop Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "fd RLQ",
            "agent_id": "Software Ecosystem Chop Shop Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-3ba28c26",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Software Ecosystem Chop Shop Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Digest-Everything-Agent_1.txt",
            "source_rows_json": "{\"sample\": \"### **\ud83d\udcbb Software Ecosystem Chop Shop Agent**\"}",
            "spawn_policy": [
              "pack=PACK-3ba28c26",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Firmware & Driver Extraction Agent",
          "name": "Firmware & Driver Extraction Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wp UKL",
            "agent_id": "Firmware & Driver Extraction Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-8ee809a0",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Firmware & Driver Extraction Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Digest-Everything-Agent_1.txt",
            "source_rows_json": "{\"sample\": \"### **\ud83d\udd27 Firmware & Driver Extraction Agent**\"}",
            "spawn_policy": [
              "pack=PACK-8ee809a0",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Network Protocol Chop Shop Agent",
          "name": "Network Protocol Chop Shop Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "yw ECF",
            "agent_id": "Network Protocol Chop Shop Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-7ee7ee0b",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Network Protocol Chop Shop Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Digest-Everything-Agent_1.txt",
            "source_rows_json": "{\"sample\": \"### **\ud83c\udf10 Network Protocol Chop Shop Agent**\"}",
            "spawn_policy": [
              "pack=PACK-7ee7ee0b",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Operating System Deconstruction Agent",
          "name": "Operating System Deconstruction Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "yk GEE",
            "agent_id": "Operating System Deconstruction Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-06fe0f59",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Operating System Deconstruction Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Digest-Everything-Agent_1.txt",
            "source_rows_json": "{\"sample\": \"### **\ud83d\udda5\ufe0f Operating System Deconstruction Agent**\"}",
            "spawn_policy": [
              "pack=PACK-06fe0f59",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Application Architecture Mining Agent",
          "name": "Application Architecture Mining Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "fv PPC",
            "agent_id": "Application Architecture Mining Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-aca83b04",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Application Architecture Mining Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Digest-Everything-Agent_1.txt",
            "source_rows_json": "{\"sample\": \"### **\ud83d\udcf1 Application Architecture Mining Agent**\"}",
            "spawn_policy": [
              "pack=PACK-aca83b04",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Digest Everything Agent",
          "name": "Digest Everything Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "zr AJM-3",
            "agent_id": "Digest Everything Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-17ec476f",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "Digest Everything Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Digest-Everything-Agent_1.txt",
            "source_rows_json": [
              "{\"sample\": \"This **\\\"Chop Shop\\\" Digest Everything Agent** transforms the technology landscape into a source of raw materials for building superior hybrid solutions",
              "systematically extracting the best capabilities from all available technologies and synthesizing them into breakthrough innovations that exceed the performance of their individual components.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-17ec476f",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "Micro-Agent",
          "name": "Micro-Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ji ADF-2",
            "agent_id": "Micro-Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-fc7be497",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "Micro-Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffTrue enterprise-class",
              "modular",
              "and future-proof micro-agent orchestration platform.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-fc7be497",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Execution Planning Agent",
          "name": "Execution Planning Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "gk FID",
            "agent_id": "Execution Planning Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-70ca0763",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Execution Planning Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Full lifecycle coverage (research \u2192 deployment \u2192 monitoring \u2192 optimization \u2192 governance)\\n* Best-in-class modularity (any agent type is swappable or extensible)\\n* Production resilience (self-healing",
              "tracing",
              "backup",
              "federation",
              "compliance)\\n* Continuous learning and improvement (feedback",
              "auto-patch",
              "RLHF)\\n* Elite scalability and security (multi-tenant",
              "federated",
              "audited)\\nBlueprint: Modular AI Micro-Agent Orchestration\\nI. Foundation & Orchestration\\n* Orchestrator Agent: Pipeline/flow control",
              "data routing",
              "retries\\n* Orchestrator Federation Agent: Multi-region/HA orchestration",
              "sync",
              "failover\\n* Registry/Discovery Agent: Dynamic agent/service registry",
              "hot-swapping\\n* Agent Supervisor/Heartbeat Agent: Health monitoring",
              "auto-restart",
              "uptime guarantees\\nII. Planning & Research\\n* App Research Ag\"}"
            ],
            "spawn_policy": [
              "pack=PACK-70ca0763",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Credentials & Env Agent",
          "name": "Credentials & Env Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "sj SHY",
            "agent_id": "Credentials & Env Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-4339865b",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Credentials & Env Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Full lifecycle coverage (research \u2192 deployment \u2192 monitoring \u2192 optimization \u2192 governance)\\n* Best-in-class modularity (any agent type is swappable or extensible)\\n* Production resilience (self-healing",
              "tracing",
              "backup",
              "federation",
              "compliance)\\n* Continuous learning and improvement (feedback",
              "auto-patch",
              "RLHF)\\n* Elite scalability and security (multi-tenant",
              "federated",
              "audited)\\nBlueprint: Modular AI Micro-Agent Orchestration\\nI. Foundation & Orchestration\\n* Orchestrator Agent: Pipeline/flow control",
              "data routing",
              "retries\\n* Orchestrator Federation Agent: Multi-region/HA orchestration",
              "sync",
              "failover\\n* Registry/Discovery Agent: Dynamic agent/service registry",
              "hot-swapping\\n* Agent Supervisor/Heartbeat Agent: Health monitoring",
              "auto-restart",
              "uptime guarantees\\nII. Planning & Research\\n* App Research Ag\"}"
            ],
            "spawn_policy": [
              "pack=PACK-4339865b",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Orchestrator Agent",
          "name": "Orchestrator Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ht TTI-2",
            "agent_id": "Orchestrator Agent",
            "budget_cap": "per_subject",
            "capability_pack_id": "PACK-c1b273a7",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "Orchestrator Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Orchestrator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Full lifecycle coverage (research \u2192 deployment \u2192 monitoring \u2192 optimization \u2192 governance)\\n* Best-in-class modularity (any agent type is swappable or extensible)\\n* Production resilience (self-healing",
              "tracing",
              "backup",
              "federation",
              "compliance)\\n* Continuous learning and improvement (feedback",
              "auto-patch",
              "RLHF)\\n* Elite scalability and security (multi-tenant",
              "federated",
              "audited)\\nBlueprint: Modular AI Micro-Agent Orchestration\\nI. Foundation & Orchestration\\n* Orchestrator Agent: Pipeline/flow control",
              "data routing",
              "retries\\n* Orchestrator Federation Agent: Multi-region/HA orchestration",
              "sync",
              "failover\\n* Registry/Discovery Agent: Dynamic agent/service registry",
              "hot-swapping\\n* Agent Supervisor/Heartbeat Agent: Health monitoring",
              "auto-restart",
              "uptime guarantees\\nII. Planning & Research\\n* App Research Ag\"}"
            ],
            "spawn_policy": [
              "pack=PACK-c1b273a7",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Orchestration Definition Agent",
          "name": "Orchestration Definition Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "aa XLA",
            "agent_id": "Orchestration Definition Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-54507280",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Orchestration Definition Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Full lifecycle coverage (research \u2192 deployment \u2192 monitoring \u2192 optimization \u2192 governance)\\n* Best-in-class modularity (any agent type is swappable or extensible)\\n* Production resilience (self-healing",
              "tracing",
              "backup",
              "federation",
              "compliance)\\n* Continuous learning and improvement (feedback",
              "auto-patch",
              "RLHF)\\n* Elite scalability and security (multi-tenant",
              "federated",
              "audited)\\nBlueprint: Modular AI Micro-Agent Orchestration\\nI. Foundation & Orchestration\\n* Orchestrator Agent: Pipeline/flow control",
              "data routing",
              "retries\\n* Orchestrator Federation Agent: Multi-region/HA orchestration",
              "sync",
              "failover\\n* Registry/Discovery Agent: Dynamic agent/service registry",
              "hot-swapping\\n* Agent Supervisor/Heartbeat Agent: Health monitoring",
              "auto-restart",
              "uptime guarantees\\nII. Planning & Research\\n* App Research Ag\"}"
            ],
            "spawn_policy": [
              "pack=PACK-54507280",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Performance & Resource Agent",
          "name": "Performance & Resource Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "vp EZU",
            "agent_id": "Performance & Resource Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-dab763c4",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Performance & Resource Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Full lifecycle coverage (research \u2192 deployment \u2192 monitoring \u2192 optimization \u2192 governance)\\n* Best-in-class modularity (any agent type is swappable or extensible)\\n* Production resilience (self-healing",
              "tracing",
              "backup",
              "federation",
              "compliance)\\n* Continuous learning and improvement (feedback",
              "auto-patch",
              "RLHF)\\n* Elite scalability and security (multi-tenant",
              "federated",
              "audited)\\nBlueprint: Modular AI Micro-Agent Orchestration\\nI. Foundation & Orchestration\\n* Orchestrator Agent: Pipeline/flow control",
              "data routing",
              "retries\\n* Orchestrator Federation Agent: Multi-region/HA orchestration",
              "sync",
              "failover\\n* Registry/Discovery Agent: Dynamic agent/service registry",
              "hot-swapping\\n* Agent Supervisor/Heartbeat Agent: Health monitoring",
              "auto-restart",
              "uptime guarantees\\nII. Planning & Research\\n* App Research Ag\"}"
            ],
            "spawn_policy": [
              "pack=PACK-dab763c4",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Registry/Discovery Agent",
          "name": "Registry/Discovery Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ic VQF",
            "agent_id": "Registry/Discovery Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-d60b6827",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-GATEWAY_SERVICES-C",
            "display_name": "Registry/Discovery Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "C",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Full lifecycle coverage (research \u2192 deployment \u2192 monitoring \u2192 optimization \u2192 governance)\\n* Best-in-class modularity (any agent type is swappable or extensible)\\n* Production resilience (self-healing",
              "tracing",
              "backup",
              "federation",
              "compliance)\\n* Continuous learning and improvement (feedback",
              "auto-patch",
              "RLHF)\\n* Elite scalability and security (multi-tenant",
              "federated",
              "audited)\\nBlueprint: Modular AI Micro-Agent Orchestration\\nI. Foundation & Orchestration\\n* Orchestrator Agent: Pipeline/flow control",
              "data routing",
              "retries\\n* Orchestrator Federation Agent: Multi-region/HA orchestration",
              "sync",
              "failover\\n* Registry/Discovery Agent: Dynamic agent/service registry",
              "hot-swapping\\n* Agent Supervisor/Heartbeat Agent: Health monitoring",
              "auto-restart",
              "uptime guarantees\\nII. Planning & Research\\n* App Research Ag\"}"
            ],
            "spawn_policy": [
              "pack=PACK-d60b6827",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.gateway-services.c",
            "type": "Agent"
          }
        },
        {
          "id": "UX/Accessibility Agent",
          "name": "UX/Accessibility Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "qr PPF",
            "agent_id": "UX/Accessibility Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-c559dcc5",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-E",
            "display_name": "UX/Accessibility Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "E",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Full lifecycle coverage (research \u2192 deployment \u2192 monitoring \u2192 optimization \u2192 governance)\\n* Best-in-class modularity (any agent type is swappable or extensible)\\n* Production resilience (self-healing",
              "tracing",
              "backup",
              "federation",
              "compliance)\\n* Continuous learning and improvement (feedback",
              "auto-patch",
              "RLHF)\\n* Elite scalability and security (multi-tenant",
              "federated",
              "audited)\\nBlueprint: Modular AI Micro-Agent Orchestration\\nI. Foundation & Orchestration\\n* Orchestrator Agent: Pipeline/flow control",
              "data routing",
              "retries\\n* Orchestrator Federation Agent: Multi-region/HA orchestration",
              "sync",
              "failover\\n* Registry/Discovery Agent: Dynamic agent/service registry",
              "hot-swapping\\n* Agent Supervisor/Heartbeat Agent: Health monitoring",
              "auto-restart",
              "uptime guarantees\\nII. Planning & Research\\n* App Research Ag\"}"
            ],
            "spawn_policy": [
              "pack=PACK-c559dcc5",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.e",
            "type": "Agent"
          }
        },
        {
          "id": "Feedback & Continuous Improvement Agent",
          "name": "Feedback & Continuous Improvement Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "px JJD",
            "agent_id": "Feedback & Continuous Improvement Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-d30169a0",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Feedback & Continuous Improvement Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Full lifecycle coverage (research \u2192 deployment \u2192 monitoring \u2192 optimization \u2192 governance)\\n* Best-in-class modularity (any agent type is swappable or extensible)\\n* Production resilience (self-healing",
              "tracing",
              "backup",
              "federation",
              "compliance)\\n* Continuous learning and improvement (feedback",
              "auto-patch",
              "RLHF)\\n* Elite scalability and security (multi-tenant",
              "federated",
              "audited)\\nBlueprint: Modular AI Micro-Agent Orchestration\\nI. Foundation & Orchestration\\n* Orchestrator Agent: Pipeline/flow control",
              "data routing",
              "retries\\n* Orchestrator Federation Agent: Multi-region/HA orchestration",
              "sync",
              "failover\\n* Registry/Discovery Agent: Dynamic agent/service registry",
              "hot-swapping\\n* Agent Supervisor/Heartbeat Agent: Health monitoring",
              "auto-restart",
              "uptime guarantees\\nII. Planning & Research\\n* App Research Ag\"}"
            ],
            "spawn_policy": [
              "pack=PACK-d30169a0",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Upgrade & Patch Agent",
          "name": "Upgrade & Patch Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ch XMD",
            "agent_id": "Upgrade & Patch Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-5ec0b22f",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Upgrade & Patch Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Full lifecycle coverage (research \u2192 deployment \u2192 monitoring \u2192 optimization \u2192 governance)\\n* Best-in-class modularity (any agent type is swappable or extensible)\\n* Production resilience (self-healing",
              "tracing",
              "backup",
              "federation",
              "compliance)\\n* Continuous learning and improvement (feedback",
              "auto-patch",
              "RLHF)\\n* Elite scalability and security (multi-tenant",
              "federated",
              "audited)\\nBlueprint: Modular AI Micro-Agent Orchestration\\nI. Foundation & Orchestration\\n* Orchestrator Agent: Pipeline/flow control",
              "data routing",
              "retries\\n* Orchestrator Federation Agent: Multi-region/HA orchestration",
              "sync",
              "failover\\n* Registry/Discovery Agent: Dynamic agent/service registry",
              "hot-swapping\\n* Agent Supervisor/Heartbeat Agent: Health monitoring",
              "auto-restart",
              "uptime guarantees\\nII. Planning & Research\\n* App Research Ag\"}"
            ],
            "spawn_policy": [
              "pack=PACK-5ec0b22f",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Test Case Generator Agent",
          "name": "Test Case Generator Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "pa XYC",
            "agent_id": "Test Case Generator Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-1874254e",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Test Case Generator Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Full lifecycle coverage (research \u2192 deployment \u2192 monitoring \u2192 optimization \u2192 governance)\\n* Best-in-class modularity (any agent type is swappable or extensible)\\n* Production resilience (self-healing",
              "tracing",
              "backup",
              "federation",
              "compliance)\\n* Continuous learning and improvement (feedback",
              "auto-patch",
              "RLHF)\\n* Elite scalability and security (multi-tenant",
              "federated",
              "audited)\\nBlueprint: Modular AI Micro-Agent Orchestration\\nI. Foundation & Orchestration\\n* Orchestrator Agent: Pipeline/flow control",
              "data routing",
              "retries\\n* Orchestrator Federation Agent: Multi-region/HA orchestration",
              "sync",
              "failover\\n* Registry/Discovery Agent: Dynamic agent/service registry",
              "hot-swapping\\n* Agent Supervisor/Heartbeat Agent: Health monitoring",
              "auto-restart",
              "uptime guarantees\\nII. Planning & Research\\n* App Research Ag\"}"
            ],
            "spawn_policy": [
              "pack=PACK-1874254e",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "SDK/Plugin Manager Agent",
          "name": "SDK/Plugin Manager Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "kp QEE",
            "agent_id": "SDK/Plugin Manager Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-f0c46714",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "SDK/Plugin Manager Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Full lifecycle coverage (research \u2192 deployment \u2192 monitoring \u2192 optimization \u2192 governance)\\n* Best-in-class modularity (any agent type is swappable or extensible)\\n* Production resilience (self-healing",
              "tracing",
              "backup",
              "federation",
              "compliance)\\n* Continuous learning and improvement (feedback",
              "auto-patch",
              "RLHF)\\n* Elite scalability and security (multi-tenant",
              "federated",
              "audited)\\nBlueprint: Modular AI Micro-Agent Orchestration\\nI. Foundation & Orchestration\\n* Orchestrator Agent: Pipeline/flow control",
              "data routing",
              "retries\\n* Orchestrator Federation Agent: Multi-region/HA orchestration",
              "sync",
              "failover\\n* Registry/Discovery Agent: Dynamic agent/service registry",
              "hot-swapping\\n* Agent Supervisor/Heartbeat Agent: Health monitoring",
              "auto-restart",
              "uptime guarantees\\nII. Planning & Research\\n* App Research Ag\"}"
            ],
            "spawn_policy": [
              "pack=PACK-f0c46714",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Test & Validation Agent",
          "name": "Test & Validation Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "yv LNG",
            "agent_id": "Test & Validation Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-edd00597",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Test & Validation Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Full lifecycle coverage (research \u2192 deployment \u2192 monitoring \u2192 optimization \u2192 governance)\\n* Best-in-class modularity (any agent type is swappable or extensible)\\n* Production resilience (self-healing",
              "tracing",
              "backup",
              "federation",
              "compliance)\\n* Continuous learning and improvement (feedback",
              "auto-patch",
              "RLHF)\\n* Elite scalability and security (multi-tenant",
              "federated",
              "audited)\\nBlueprint: Modular AI Micro-Agent Orchestration\\nI. Foundation & Orchestration\\n* Orchestrator Agent: Pipeline/flow control",
              "data routing",
              "retries\\n* Orchestrator Federation Agent: Multi-region/HA orchestration",
              "sync",
              "failover\\n* Registry/Discovery Agent: Dynamic agent/service registry",
              "hot-swapping\\n* Agent Supervisor/Heartbeat Agent: Health monitoring",
              "auto-restart",
              "uptime guarantees\\nII. Planning & Research\\n* App Research Ag\"}"
            ],
            "spawn_policy": [
              "pack=PACK-edd00597",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Prompt Designer Agent",
          "name": "Prompt Designer Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ot FPH",
            "agent_id": "Prompt Designer Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-12dec078",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Prompt Designer Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Full lifecycle coverage (research \u2192 deployment \u2192 monitoring \u2192 optimization \u2192 governance)\\n* Best-in-class modularity (any agent type is swappable or extensible)\\n* Production resilience (self-healing",
              "tracing",
              "backup",
              "federation",
              "compliance)\\n* Continuous learning and improvement (feedback",
              "auto-patch",
              "RLHF)\\n* Elite scalability and security (multi-tenant",
              "federated",
              "audited)\\nBlueprint: Modular AI Micro-Agent Orchestration\\nI. Foundation & Orchestration\\n* Orchestrator Agent: Pipeline/flow control",
              "data routing",
              "retries\\n* Orchestrator Federation Agent: Multi-region/HA orchestration",
              "sync",
              "failover\\n* Registry/Discovery Agent: Dynamic agent/service registry",
              "hot-swapping\\n* Agent Supervisor/Heartbeat Agent: Health monitoring",
              "auto-restart",
              "uptime guarantees\\nII. Planning & Research\\n* App Research Ag\"}"
            ],
            "spawn_policy": [
              "pack=PACK-12dec078",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Config Manager Agent",
          "name": "Config Manager Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "yi PBT",
            "agent_id": "Config Manager Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-f7d2ce0a",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Config Manager Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Full lifecycle coverage (research \u2192 deployment \u2192 monitoring \u2192 optimization \u2192 governance)\\n* Best-in-class modularity (any agent type is swappable or extensible)\\n* Production resilience (self-healing",
              "tracing",
              "backup",
              "federation",
              "compliance)\\n* Continuous learning and improvement (feedback",
              "auto-patch",
              "RLHF)\\n* Elite scalability and security (multi-tenant",
              "federated",
              "audited)\\nBlueprint: Modular AI Micro-Agent Orchestration\\nI. Foundation & Orchestration\\n* Orchestrator Agent: Pipeline/flow control",
              "data routing",
              "retries\\n* Orchestrator Federation Agent: Multi-region/HA orchestration",
              "sync",
              "failover\\n* Registry/Discovery Agent: Dynamic agent/service registry",
              "hot-swapping\\n* Agent Supervisor/Heartbeat Agent: Health monitoring",
              "auto-restart",
              "uptime guarantees\\nII. Planning & Research\\n* App Research Ag\"}"
            ],
            "spawn_policy": [
              "pack=PACK-f7d2ce0a",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Enhanced Observability & Tracing Agent",
          "name": "Enhanced Observability & Tracing Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "fw DEN",
            "agent_id": "Enhanced Observability & Tracing Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-25963873",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Enhanced Observability & Tracing Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Full lifecycle coverage (research \u2192 deployment \u2192 monitoring \u2192 optimization \u2192 governance)\\n* Best-in-class modularity (any agent type is swappable or extensible)\\n* Production resilience (self-healing",
              "tracing",
              "backup",
              "federation",
              "compliance)\\n* Continuous learning and improvement (feedback",
              "auto-patch",
              "RLHF)\\n* Elite scalability and security (multi-tenant",
              "federated",
              "audited)\\nBlueprint: Modular AI Micro-Agent Orchestration\\nI. Foundation & Orchestration\\n* Orchestrator Agent: Pipeline/flow control",
              "data routing",
              "retries\\n* Orchestrator Federation Agent: Multi-region/HA orchestration",
              "sync",
              "failover\\n* Registry/Discovery Agent: Dynamic agent/service registry",
              "hot-swapping\\n* Agent Supervisor/Heartbeat Agent: Health monitoring",
              "auto-restart",
              "uptime guarantees\\nII. Planning & Research\\n* App Research Ag\"}"
            ],
            "spawn_policy": [
              "pack=PACK-25963873",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Cost Estimation Agent",
          "name": "Cost Estimation Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ht JEG",
            "agent_id": "Cost Estimation Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-3bf645f2",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Cost Estimation Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Full lifecycle coverage (research \u2192 deployment \u2192 monitoring \u2192 optimization \u2192 governance)\\n* Best-in-class modularity (any agent type is swappable or extensible)\\n* Production resilience (self-healing",
              "tracing",
              "backup",
              "federation",
              "compliance)\\n* Continuous learning and improvement (feedback",
              "auto-patch",
              "RLHF)\\n* Elite scalability and security (multi-tenant",
              "federated",
              "audited)\\nBlueprint: Modular AI Micro-Agent Orchestration\\nI. Foundation & Orchestration\\n* Orchestrator Agent: Pipeline/flow control",
              "data routing",
              "retries\\n* Orchestrator Federation Agent: Multi-region/HA orchestration",
              "sync",
              "failover\\n* Registry/Discovery Agent: Dynamic agent/service registry",
              "hot-swapping\\n* Agent Supervisor/Heartbeat Agent: Health monitoring",
              "auto-restart",
              "uptime guarantees\\nII. Planning & Research\\n* App Research Ag\"}"
            ],
            "spawn_policy": [
              "pack=PACK-3bf645f2",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Code Quality Agent",
          "name": "Code Quality Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "aj QSN",
            "agent_id": "Code Quality Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-ac39b49b",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Code Quality Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Full lifecycle coverage (research \u2192 deployment \u2192 monitoring \u2192 optimization \u2192 governance)\\n* Best-in-class modularity (any agent type is swappable or extensible)\\n* Production resilience (self-healing",
              "tracing",
              "backup",
              "federation",
              "compliance)\\n* Continuous learning and improvement (feedback",
              "auto-patch",
              "RLHF)\\n* Elite scalability and security (multi-tenant",
              "federated",
              "audited)\\nBlueprint: Modular AI Micro-Agent Orchestration\\nI. Foundation & Orchestration\\n* Orchestrator Agent: Pipeline/flow control",
              "data routing",
              "retries\\n* Orchestrator Federation Agent: Multi-region/HA orchestration",
              "sync",
              "failover\\n* Registry/Discovery Agent: Dynamic agent/service registry",
              "hot-swapping\\n* Agent Supervisor/Heartbeat Agent: Health monitoring",
              "auto-restart",
              "uptime guarantees\\nII. Planning & Research\\n* App Research Ag\"}"
            ],
            "spawn_policy": [
              "pack=PACK-ac39b49b",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "App Research Agent",
          "name": "App Research Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "yf HSS",
            "agent_id": "App Research Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-6fbea397",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "App Research Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Full lifecycle coverage (research \u2192 deployment \u2192 monitoring \u2192 optimization \u2192 governance)\\n* Best-in-class modularity (any agent type is swappable or extensible)\\n* Production resilience (self-healing",
              "tracing",
              "backup",
              "federation",
              "compliance)\\n* Continuous learning and improvement (feedback",
              "auto-patch",
              "RLHF)\\n* Elite scalability and security (multi-tenant",
              "federated",
              "audited)\\nBlueprint: Modular AI Micro-Agent Orchestration\\nI. Foundation & Orchestration\\n* Orchestrator Agent: Pipeline/flow control",
              "data routing",
              "retries\\n* Orchestrator Federation Agent: Multi-region/HA orchestration",
              "sync",
              "failover\\n* Registry/Discovery Agent: Dynamic agent/service registry",
              "hot-swapping\\n* Agent Supervisor/Heartbeat Agent: Health monitoring",
              "auto-restart",
              "uptime guarantees\\nII. Planning & Research\\n* App Research Ag\"}"
            ],
            "spawn_policy": [
              "pack=PACK-6fbea397",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Orchestrator Federation Agent",
          "name": "Orchestrator Federation Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "es RIU",
            "agent_id": "Orchestrator Federation Agent",
            "budget_cap": "per_subject",
            "capability_pack_id": "PACK-65b310ce",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "Orchestrator Federation Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Orchestrator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Full lifecycle coverage (research \u2192 deployment \u2192 monitoring \u2192 optimization \u2192 governance)\\n* Best-in-class modularity (any agent type is swappable or extensible)\\n* Production resilience (self-healing",
              "tracing",
              "backup",
              "federation",
              "compliance)\\n* Continuous learning and improvement (feedback",
              "auto-patch",
              "RLHF)\\n* Elite scalability and security (multi-tenant",
              "federated",
              "audited)\\nBlueprint: Modular AI Micro-Agent Orchestration\\nI. Foundation & Orchestration\\n* Orchestrator Agent: Pipeline/flow control",
              "data routing",
              "retries\\n* Orchestrator Federation Agent: Multi-region/HA orchestration",
              "sync",
              "failover\\n* Registry/Discovery Agent: Dynamic agent/service registry",
              "hot-swapping\\n* Agent Supervisor/Heartbeat Agent: Health monitoring",
              "auto-restart",
              "uptime guarantees\\nII. Planning & Research\\n* App Research Ag\"}"
            ],
            "spawn_policy": [
              "pack=PACK-65b310ce",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Dependency Resolver Agent",
          "name": "Dependency Resolver Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "sr BHG",
            "agent_id": "Dependency Resolver Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-975cae4c",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Dependency Resolver Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Full lifecycle coverage (research \u2192 deployment \u2192 monitoring \u2192 optimization \u2192 governance)\\n* Best-in-class modularity (any agent type is swappable or extensible)\\n* Production resilience (self-healing",
              "tracing",
              "backup",
              "federation",
              "compliance)\\n* Continuous learning and improvement (feedback",
              "auto-patch",
              "RLHF)\\n* Elite scalability and security (multi-tenant",
              "federated",
              "audited)\\nBlueprint: Modular AI Micro-Agent Orchestration\\nI. Foundation & Orchestration\\n* Orchestrator Agent: Pipeline/flow control",
              "data routing",
              "retries\\n* Orchestrator Federation Agent: Multi-region/HA orchestration",
              "sync",
              "failover\\n* Registry/Discovery Agent: Dynamic agent/service registry",
              "hot-swapping\\n* Agent Supervisor/Heartbeat Agent: Health monitoring",
              "auto-restart",
              "uptime guarantees\\nII. Planning & Research\\n* App Research Ag\"}"
            ],
            "spawn_policy": [
              "pack=PACK-975cae4c",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Agent Self-Upgrade/Retirement Agent",
          "name": "Agent Self-Upgrade/Retirement Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "pf OVF",
            "agent_id": "Agent Self-Upgrade/Retirement Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-328437d6",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Agent Self-Upgrade/Retirement Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Full lifecycle coverage (research \u2192 deployment \u2192 monitoring \u2192 optimization \u2192 governance)\\n* Best-in-class modularity (any agent type is swappable or extensible)\\n* Production resilience (self-healing",
              "tracing",
              "backup",
              "federation",
              "compliance)\\n* Continuous learning and improvement (feedback",
              "auto-patch",
              "RLHF)\\n* Elite scalability and security (multi-tenant",
              "federated",
              "audited)\\nBlueprint: Modular AI Micro-Agent Orchestration\\nI. Foundation & Orchestration\\n* Orchestrator Agent: Pipeline/flow control",
              "data routing",
              "retries\\n* Orchestrator Federation Agent: Multi-region/HA orchestration",
              "sync",
              "failover\\n* Registry/Discovery Agent: Dynamic agent/service registry",
              "hot-swapping\\n* Agent Supervisor/Heartbeat Agent: Health monitoring",
              "auto-restart",
              "uptime guarantees\\nII. Planning & Research\\n* App Research Ag\"}"
            ],
            "spawn_policy": [
              "pack=PACK-328437d6",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Simulation & Risk Analysis Agent",
          "name": "Simulation & Risk Analysis Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ne HVI",
            "agent_id": "Simulation & Risk Analysis Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-7af3f9f7",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Simulation & Risk Analysis Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Full lifecycle coverage (research \u2192 deployment \u2192 monitoring \u2192 optimization \u2192 governance)\\n* Best-in-class modularity (any agent type is swappable or extensible)\\n* Production resilience (self-healing",
              "tracing",
              "backup",
              "federation",
              "compliance)\\n* Continuous learning and improvement (feedback",
              "auto-patch",
              "RLHF)\\n* Elite scalability and security (multi-tenant",
              "federated",
              "audited)\\nBlueprint: Modular AI Micro-Agent Orchestration\\nI. Foundation & Orchestration\\n* Orchestrator Agent: Pipeline/flow control",
              "data routing",
              "retries\\n* Orchestrator Federation Agent: Multi-region/HA orchestration",
              "sync",
              "failover\\n* Registry/Discovery Agent: Dynamic agent/service registry",
              "hot-swapping\\n* Agent Supervisor/Heartbeat Agent: Health monitoring",
              "auto-restart",
              "uptime guarantees\\nII. Planning & Research\\n* App Research Ag\"}"
            ],
            "spawn_policy": [
              "pack=PACK-7af3f9f7",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "CodeGen Agent",
          "name": "CodeGen Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "qf PMT",
            "agent_id": "CodeGen Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-1ca8f7fe",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-F",
            "display_name": "CodeGen Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "F",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Full lifecycle coverage (research \u2192 deployment \u2192 monitoring \u2192 optimization \u2192 governance)\\n* Best-in-class modularity (any agent type is swappable or extensible)\\n* Production resilience (self-healing",
              "tracing",
              "backup",
              "federation",
              "compliance)\\n* Continuous learning and improvement (feedback",
              "auto-patch",
              "RLHF)\\n* Elite scalability and security (multi-tenant",
              "federated",
              "audited)\\nBlueprint: Modular AI Micro-Agent Orchestration\\nI. Foundation & Orchestration\\n* Orchestrator Agent: Pipeline/flow control",
              "data routing",
              "retries\\n* Orchestrator Federation Agent: Multi-region/HA orchestration",
              "sync",
              "failover\\n* Registry/Discovery Agent: Dynamic agent/service registry",
              "hot-swapping\\n* Agent Supervisor/Heartbeat Agent: Health monitoring",
              "auto-restart",
              "uptime guarantees\\nII. Planning & Research\\n* App Research Ag\"}"
            ],
            "spawn_policy": [
              "pack=PACK-1ca8f7fe",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.f",
            "type": "Agent"
          }
        },
        {
          "id": "Agent Supervisor/Heartbeat Agent",
          "name": "Agent Supervisor/Heartbeat Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "sw VTG",
            "agent_id": "Agent Supervisor/Heartbeat Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-a1c4f277",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Agent Supervisor/Heartbeat Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Full lifecycle coverage (research \u2192 deployment \u2192 monitoring \u2192 optimization \u2192 governance)\\n* Best-in-class modularity (any agent type is swappable or extensible)\\n* Production resilience (self-healing",
              "tracing",
              "backup",
              "federation",
              "compliance)\\n* Continuous learning and improvement (feedback",
              "auto-patch",
              "RLHF)\\n* Elite scalability and security (multi-tenant",
              "federated",
              "audited)\\nBlueprint: Modular AI Micro-Agent Orchestration\\nI. Foundation & Orchestration\\n* Orchestrator Agent: Pipeline/flow control",
              "data routing",
              "retries\\n* Orchestrator Federation Agent: Multi-region/HA orchestration",
              "sync",
              "failover\\n* Registry/Discovery Agent: Dynamic agent/service registry",
              "hot-swapping\\n* Agent Supervisor/Heartbeat Agent: Health monitoring",
              "auto-restart",
              "uptime guarantees\\nII. Planning & Research\\n* App Research Ag\"}"
            ],
            "spawn_policy": [
              "pack=PACK-a1c4f277",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Secrets Crypto Agent",
          "name": "Secrets Crypto Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "hp DFO",
            "agent_id": "Secrets Crypto Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-ccfeb30d",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Secrets Crypto Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Full lifecycle coverage (research \u2192 deployment \u2192 monitoring \u2192 optimization \u2192 governance)\\n* Best-in-class modularity (any agent type is swappable or extensible)\\n* Production resilience (self-healing",
              "tracing",
              "backup",
              "federation",
              "compliance)\\n* Continuous learning and improvement (feedback",
              "auto-patch",
              "RLHF)\\n* Elite scalability and security (multi-tenant",
              "federated",
              "audited)\\nBlueprint: Modular AI Micro-Agent Orchestration\\nI. Foundation & Orchestration\\n* Orchestrator Agent: Pipeline/flow control",
              "data routing",
              "retries\\n* Orchestrator Federation Agent: Multi-region/HA orchestration",
              "sync",
              "failover\\n* Registry/Discovery Agent: Dynamic agent/service registry",
              "hot-swapping\\n* Agent Supervisor/Heartbeat Agent: Health monitoring",
              "auto-restart",
              "uptime guarantees\\nII. Planning & Research\\n* App Research Ag\"}"
            ],
            "spawn_policy": [
              "pack=PACK-ccfeb30d",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "SafeStack Agent",
          "name": "SafeStack Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "av XPA",
            "agent_id": "SafeStack Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-de6e526e",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "SafeStack Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Full lifecycle coverage (research \u2192 deployment \u2192 monitoring \u2192 optimization \u2192 governance)\\n* Best-in-class modularity (any agent type is swappable or extensible)\\n* Production resilience (self-healing",
              "tracing",
              "backup",
              "federation",
              "compliance)\\n* Continuous learning and improvement (feedback",
              "auto-patch",
              "RLHF)\\n* Elite scalability and security (multi-tenant",
              "federated",
              "audited)\\nBlueprint: Modular AI Micro-Agent Orchestration\\nI. Foundation & Orchestration\\n* Orchestrator Agent: Pipeline/flow control",
              "data routing",
              "retries\\n* Orchestrator Federation Agent: Multi-region/HA orchestration",
              "sync",
              "failover\\n* Registry/Discovery Agent: Dynamic agent/service registry",
              "hot-swapping\\n* Agent Supervisor/Heartbeat Agent: Health monitoring",
              "auto-restart",
              "uptime guarantees\\nII. Planning & Research\\n* App Research Ag\"}"
            ],
            "spawn_policy": [
              "pack=PACK-de6e526e",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Documentation Listener Agent",
          "name": "Documentation Listener Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "pb MYZ",
            "agent_id": "Documentation Listener Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-72cd8376",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Documentation Listener Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Full lifecycle coverage (research \u2192 deployment \u2192 monitoring \u2192 optimization \u2192 governance)\\n* Best-in-class modularity (any agent type is swappable or extensible)\\n* Production resilience (self-healing",
              "tracing",
              "backup",
              "federation",
              "compliance)\\n* Continuous learning and improvement (feedback",
              "auto-patch",
              "RLHF)\\n* Elite scalability and security (multi-tenant",
              "federated",
              "audited)\\nBlueprint: Modular AI Micro-Agent Orchestration\\nI. Foundation & Orchestration\\n* Orchestrator Agent: Pipeline/flow control",
              "data routing",
              "retries\\n* Orchestrator Federation Agent: Multi-region/HA orchestration",
              "sync",
              "failover\\n* Registry/Discovery Agent: Dynamic agent/service registry",
              "hot-swapping\\n* Agent Supervisor/Heartbeat Agent: Health monitoring",
              "auto-restart",
              "uptime guarantees\\nII. Planning & Research\\n* App Research Ag\"}"
            ],
            "spawn_policy": [
              "pack=PACK-72cd8376",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Modular AI Micro-Agent Orchestration",
          "name": "Modular AI Micro-Agent Orchestration",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ne FYV",
            "agent_id": "Modular AI Micro-Agent Orchestration",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-c817e342",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "Modular AI Micro-Agent Orchestration",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Full lifecycle coverage (research \u2192 deployment \u2192 monitoring \u2192 optimization \u2192 governance)\\n* Best-in-class modularity (any agent type is swappable or extensible)\\n* Production resilience (self-healing",
              "tracing",
              "backup",
              "federation",
              "compliance)\\n* Continuous learning and improvement (feedback",
              "auto-patch",
              "RLHF)\\n* Elite scalability and security (multi-tenant",
              "federated",
              "audited)\\nBlueprint: Modular AI Micro-Agent Orchestration\\nI. Foundation & Orchestration\\n* Orchestrator Agent: Pipeline/flow control",
              "data routing",
              "retries\\n* Orchestrator Federation Agent: Multi-region/HA orchestration",
              "sync",
              "failover\\n* Registry/Discovery Agent: Dynamic agent/service registry",
              "hot-swapping\\n* Agent Supervisor/Heartbeat Agent: Health monitoring",
              "auto-restart",
              "uptime guarantees\\nII. Planning & Research\\n* App Research Ag\"}"
            ],
            "spawn_policy": [
              "pack=PACK-c817e342",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Backup & Restore Agent",
          "name": "Backup & Restore Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "us UKD",
            "agent_id": "Backup & Restore Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-609f90ec",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Backup & Restore Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Full lifecycle coverage (research \u2192 deployment \u2192 monitoring \u2192 optimization \u2192 governance)\\n* Best-in-class modularity (any agent type is swappable or extensible)\\n* Production resilience (self-healing",
              "tracing",
              "backup",
              "federation",
              "compliance)\\n* Continuous learning and improvement (feedback",
              "auto-patch",
              "RLHF)\\n* Elite scalability and security (multi-tenant",
              "federated",
              "audited)\\nBlueprint: Modular AI Micro-Agent Orchestration\\nI. Foundation & Orchestration\\n* Orchestrator Agent: Pipeline/flow control",
              "data routing",
              "retries\\n* Orchestrator Federation Agent: Multi-region/HA orchestration",
              "sync",
              "failover\\n* Registry/Discovery Agent: Dynamic agent/service registry",
              "hot-swapping\\n* Agent Supervisor/Heartbeat Agent: Health monitoring",
              "auto-restart",
              "uptime guarantees\\nII. Planning & Research\\n* App Research Ag\"}"
            ],
            "spawn_policy": [
              "pack=PACK-609f90ec",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Multi-Tenant Isolation Agent",
          "name": "Multi-Tenant Isolation Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "pf GXC",
            "agent_id": "Multi-Tenant Isolation Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-878177e5",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Multi-Tenant Isolation Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Full lifecycle coverage (research \u2192 deployment \u2192 monitoring \u2192 optimization \u2192 governance)\\n* Best-in-class modularity (any agent type is swappable or extensible)\\n* Production resilience (self-healing",
              "tracing",
              "backup",
              "federation",
              "compliance)\\n* Continuous learning and improvement (feedback",
              "auto-patch",
              "RLHF)\\n* Elite scalability and security (multi-tenant",
              "federated",
              "audited)\\nBlueprint: Modular AI Micro-Agent Orchestration\\nI. Foundation & Orchestration\\n* Orchestrator Agent: Pipeline/flow control",
              "data routing",
              "retries\\n* Orchestrator Federation Agent: Multi-region/HA orchestration",
              "sync",
              "failover\\n* Registry/Discovery Agent: Dynamic agent/service registry",
              "hot-swapping\\n* Agent Supervisor/Heartbeat Agent: Health monitoring",
              "auto-restart",
              "uptime guarantees\\nII. Planning & Research\\n* App Research Ag\"}"
            ],
            "spawn_policy": [
              "pack=PACK-878177e5",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Template Manager Agent",
          "name": "Template Manager Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "re JAG",
            "agent_id": "Template Manager Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-81d91fd7",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Template Manager Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Full lifecycle coverage (research \u2192 deployment \u2192 monitoring \u2192 optimization \u2192 governance)\\n* Best-in-class modularity (any agent type is swappable or extensible)\\n* Production resilience (self-healing",
              "tracing",
              "backup",
              "federation",
              "compliance)\\n* Continuous learning and improvement (feedback",
              "auto-patch",
              "RLHF)\\n* Elite scalability and security (multi-tenant",
              "federated",
              "audited)\\nBlueprint: Modular AI Micro-Agent Orchestration\\nI. Foundation & Orchestration\\n* Orchestrator Agent: Pipeline/flow control",
              "data routing",
              "retries\\n* Orchestrator Federation Agent: Multi-region/HA orchestration",
              "sync",
              "failover\\n* Registry/Discovery Agent: Dynamic agent/service registry",
              "hot-swapping\\n* Agent Supervisor/Heartbeat Agent: Health monitoring",
              "auto-restart",
              "uptime guarantees\\nII. Planning & Research\\n* App Research Ag\"}"
            ],
            "spawn_policy": [
              "pack=PACK-81d91fd7",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Documentation Generator Agent",
          "name": "Documentation Generator Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "as DOJ",
            "agent_id": "Documentation Generator Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-11db2ca5",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Documentation Generator Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Full lifecycle coverage (research \u2192 deployment \u2192 monitoring \u2192 optimization \u2192 governance)\\n* Best-in-class modularity (any agent type is swappable or extensible)\\n* Production resilience (self-healing",
              "tracing",
              "backup",
              "federation",
              "compliance)\\n* Continuous learning and improvement (feedback",
              "auto-patch",
              "RLHF)\\n* Elite scalability and security (multi-tenant",
              "federated",
              "audited)\\nBlueprint: Modular AI Micro-Agent Orchestration\\nI. Foundation & Orchestration\\n* Orchestrator Agent: Pipeline/flow control",
              "data routing",
              "retries\\n* Orchestrator Federation Agent: Multi-region/HA orchestration",
              "sync",
              "failover\\n* Registry/Discovery Agent: Dynamic agent/service registry",
              "hot-swapping\\n* Agent Supervisor/Heartbeat Agent: Health monitoring",
              "auto-restart",
              "uptime guarantees\\nII. Planning & Research\\n* App Research Ag\"}"
            ],
            "spawn_policy": [
              "pack=PACK-11db2ca5",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Micro-Agent",
          "name": "Micro-Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ji ADF-3",
            "agent_id": "Micro-Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-fc7be497",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "Micro-Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Full lifecycle coverage (research \u2192 deployment \u2192 monitoring \u2192 optimization \u2192 governance)\\n* Best-in-class modularity (any agent type is swappable or extensible)\\n* Production resilience (self-healing",
              "tracing",
              "backup",
              "federation",
              "compliance)\\n* Continuous learning and improvement (feedback",
              "auto-patch",
              "RLHF)\\n* Elite scalability and security (multi-tenant",
              "federated",
              "audited)\\nBlueprint: Modular AI Micro-Agent Orchestration\\nI. Foundation & Orchestration\\n* Orchestrator Agent: Pipeline/flow control",
              "data routing",
              "retries\\n* Orchestrator Federation Agent: Multi-region/HA orchestration",
              "sync",
              "failover\\n* Registry/Discovery Agent: Dynamic agent/service registry",
              "hot-swapping\\n* Agent Supervisor/Heartbeat Agent: Health monitoring",
              "auto-restart",
              "uptime guarantees\\nII. Planning & Research\\n* App Research Ag\"}"
            ],
            "spawn_policy": [
              "pack=PACK-fc7be497",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Monitoring & Alerting Agent",
          "name": "Monitoring & Alerting Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "rk YTK",
            "agent_id": "Monitoring & Alerting Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-df776a13",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Monitoring & Alerting Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Full lifecycle coverage (research \u2192 deployment \u2192 monitoring \u2192 optimization \u2192 governance)\\n* Best-in-class modularity (any agent type is swappable or extensible)\\n* Production resilience (self-healing",
              "tracing",
              "backup",
              "federation",
              "compliance)\\n* Continuous learning and improvement (feedback",
              "auto-patch",
              "RLHF)\\n* Elite scalability and security (multi-tenant",
              "federated",
              "audited)\\nBlueprint: Modular AI Micro-Agent Orchestration\\nI. Foundation & Orchestration\\n* Orchestrator Agent: Pipeline/flow control",
              "data routing",
              "retries\\n* Orchestrator Federation Agent: Multi-region/HA orchestration",
              "sync",
              "failover\\n* Registry/Discovery Agent: Dynamic agent/service registry",
              "hot-swapping\\n* Agent Supervisor/Heartbeat Agent: Health monitoring",
              "auto-restart",
              "uptime guarantees\\nII. Planning & Research\\n* App Research Ag\"}"
            ],
            "spawn_policy": [
              "pack=PACK-df776a13",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Cache Manager Agent",
          "name": "Cache Manager Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "xy OVZ",
            "agent_id": "Cache Manager Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-e63d3ab7",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Cache Manager Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Full lifecycle coverage (research \u2192 deployment \u2192 monitoring \u2192 optimization \u2192 governance)\\n* Best-in-class modularity (any agent type is swappable or extensible)\\n* Production resilience (self-healing",
              "tracing",
              "backup",
              "federation",
              "compliance)\\n* Continuous learning and improvement (feedback",
              "auto-patch",
              "RLHF)\\n* Elite scalability and security (multi-tenant",
              "federated",
              "audited)\\nBlueprint: Modular AI Micro-Agent Orchestration\\nI. Foundation & Orchestration\\n* Orchestrator Agent: Pipeline/flow control",
              "data routing",
              "retries\\n* Orchestrator Federation Agent: Multi-region/HA orchestration",
              "sync",
              "failover\\n* Registry/Discovery Agent: Dynamic agent/service registry",
              "hot-swapping\\n* Agent Supervisor/Heartbeat Agent: Health monitoring",
              "auto-restart",
              "uptime guarantees\\nII. Planning & Research\\n* App Research Ag\"}"
            ],
            "spawn_policy": [
              "pack=PACK-e63d3ab7",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Knowledge-Base Agent",
          "name": "Knowledge-Base Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ka YUA",
            "agent_id": "Knowledge-Base Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-99ea64ed",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Knowledge-Base Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Full lifecycle coverage (research \u2192 deployment \u2192 monitoring \u2192 optimization \u2192 governance)\\n* Best-in-class modularity (any agent type is swappable or extensible)\\n* Production resilience (self-healing",
              "tracing",
              "backup",
              "federation",
              "compliance)\\n* Continuous learning and improvement (feedback",
              "auto-patch",
              "RLHF)\\n* Elite scalability and security (multi-tenant",
              "federated",
              "audited)\\nBlueprint: Modular AI Micro-Agent Orchestration\\nI. Foundation & Orchestration\\n* Orchestrator Agent: Pipeline/flow control",
              "data routing",
              "retries\\n* Orchestrator Federation Agent: Multi-region/HA orchestration",
              "sync",
              "failover\\n* Registry/Discovery Agent: Dynamic agent/service registry",
              "hot-swapping\\n* Agent Supervisor/Heartbeat Agent: Health monitoring",
              "auto-restart",
              "uptime guarantees\\nII. Planning & Research\\n* App Research Ag\"}"
            ],
            "spawn_policy": [
              "pack=PACK-99ea64ed",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Alternatives Comparison Agent",
          "name": "Alternatives Comparison Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "bq NYF",
            "agent_id": "Alternatives Comparison Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-cf2e43d7",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Alternatives Comparison Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Full lifecycle coverage (research \u2192 deployment \u2192 monitoring \u2192 optimization \u2192 governance)\\n* Best-in-class modularity (any agent type is swappable or extensible)\\n* Production resilience (self-healing",
              "tracing",
              "backup",
              "federation",
              "compliance)\\n* Continuous learning and improvement (feedback",
              "auto-patch",
              "RLHF)\\n* Elite scalability and security (multi-tenant",
              "federated",
              "audited)\\nBlueprint: Modular AI Micro-Agent Orchestration\\nI. Foundation & Orchestration\\n* Orchestrator Agent: Pipeline/flow control",
              "data routing",
              "retries\\n* Orchestrator Federation Agent: Multi-region/HA orchestration",
              "sync",
              "failover\\n* Registry/Discovery Agent: Dynamic agent/service registry",
              "hot-swapping\\n* Agent Supervisor/Heartbeat Agent: Health monitoring",
              "auto-restart",
              "uptime guarantees\\nII. Planning & Research\\n* App Research Ag\"}"
            ],
            "spawn_policy": [
              "pack=PACK-cf2e43d7",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Execution Planning Agent",
          "name": "Execution Planning Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "gk FID",
            "agent_id": "Execution Planning Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-70ca0763",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Execution Planning Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Agent Implementation Agent (CodeGen): Purpose: Read each agent's specification from the blueprint and auto-generate the real code stubs or full implementations",
              "integrating with AI libraries or APIs. Inputs: Agent spec (name",
              "purpose",
              "inputs",
              "outputs",
              "environment requirements) from blueprint.json. Outputs: Generated code files (e.g. Python/PowerShell/Node.js scripts)",
              "initial Dockerfiles",
              "CI pipeline snippets.\\nIntegration: Runs before container build",
              "writes to each agent's folder under agents/<AgentName>/ and commits changes to Git. Acts as a preprocessor in the orchestration pipeline.\\n This CodeGen agent ensures that every new micro-agent has its scaffolded code automatically generated and versioned.\\nFoundational Helper Agents\\nThe CodeGen Agent can be further decomposed into a set of fou\"}"
            ],
            "spawn_policy": [
              "pack=PACK-70ca0763",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Credentials & Env Agent",
          "name": "Credentials & Env Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "sj SHY",
            "agent_id": "Credentials & Env Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-4339865b",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Credentials & Env Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Agent Implementation Agent (CodeGen): Purpose: Read each agent's specification from the blueprint and auto-generate the real code stubs or full implementations",
              "integrating with AI libraries or APIs. Inputs: Agent spec (name",
              "purpose",
              "inputs",
              "outputs",
              "environment requirements) from blueprint.json. Outputs: Generated code files (e.g. Python/PowerShell/Node.js scripts)",
              "initial Dockerfiles",
              "CI pipeline snippets.\\nIntegration: Runs before container build",
              "writes to each agent's folder under agents/<AgentName>/ and commits changes to Git. Acts as a preprocessor in the orchestration pipeline.\\n This CodeGen agent ensures that every new micro-agent has its scaffolded code automatically generated and versioned.\\nFoundational Helper Agents\\nThe CodeGen Agent can be further decomposed into a set of fou\"}"
            ],
            "spawn_policy": [
              "pack=PACK-4339865b",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Orchestrator Agent",
          "name": "Orchestrator Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ht TTI-3",
            "agent_id": "Orchestrator Agent",
            "budget_cap": "per_subject",
            "capability_pack_id": "PACK-c1b273a7",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "Orchestrator Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Orchestrator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Agent Implementation Agent (CodeGen): Purpose: Read each agent's specification from the blueprint and auto-generate the real code stubs or full implementations",
              "integrating with AI libraries or APIs. Inputs: Agent spec (name",
              "purpose",
              "inputs",
              "outputs",
              "environment requirements) from blueprint.json. Outputs: Generated code files (e.g. Python/PowerShell/Node.js scripts)",
              "initial Dockerfiles",
              "CI pipeline snippets.\\nIntegration: Runs before container build",
              "writes to each agent's folder under agents/<AgentName>/ and commits changes to Git. Acts as a preprocessor in the orchestration pipeline.\\n This CodeGen agent ensures that every new micro-agent has its scaffolded code automatically generated and versioned.\\nFoundational Helper Agents\\nThe CodeGen Agent can be further decomposed into a set of fou\"}"
            ],
            "spawn_policy": [
              "pack=PACK-c1b273a7",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Test & Validation Agent\nInternal",
          "name": "Test & Validation Agent\nInternal",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "rb KZX",
            "agent_id": "Test & Validation Agent\nInternal",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-50abb03c",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Test & Validation Agent\nInternal",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Agent Implementation Agent (CodeGen): Purpose: Read each agent's specification from the blueprint and auto-generate the real code stubs or full implementations",
              "integrating with AI libraries or APIs. Inputs: Agent spec (name",
              "purpose",
              "inputs",
              "outputs",
              "environment requirements) from blueprint.json. Outputs: Generated code files (e.g. Python/PowerShell/Node.js scripts)",
              "initial Dockerfiles",
              "CI pipeline snippets.\\nIntegration: Runs before container build",
              "writes to each agent's folder under agents/<AgentName>/ and commits changes to Git. Acts as a preprocessor in the orchestration pipeline.\\n This CodeGen agent ensures that every new micro-agent has its scaffolded code automatically generated and versioned.\\nFoundational Helper Agents\\nThe CodeGen Agent can be further decomposed into a set of fou\"}"
            ],
            "spawn_policy": [
              "pack=PACK-50abb03c",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Performance & Resource Agent",
          "name": "Performance & Resource Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "vp EZU",
            "agent_id": "Performance & Resource Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-dab763c4",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Performance & Resource Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Agent Implementation Agent (CodeGen): Purpose: Read each agent's specification from the blueprint and auto-generate the real code stubs or full implementations",
              "integrating with AI libraries or APIs. Inputs: Agent spec (name",
              "purpose",
              "inputs",
              "outputs",
              "environment requirements) from blueprint.json. Outputs: Generated code files (e.g. Python/PowerShell/Node.js scripts)",
              "initial Dockerfiles",
              "CI pipeline snippets.\\nIntegration: Runs before container build",
              "writes to each agent's folder under agents/<AgentName>/ and commits changes to Git. Acts as a preprocessor in the orchestration pipeline.\\n This CodeGen agent ensures that every new micro-agent has its scaffolded code automatically generated and versioned.\\nFoundational Helper Agents\\nThe CodeGen Agent can be further decomposed into a set of fou\"}"
            ],
            "spawn_policy": [
              "pack=PACK-dab763c4",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Credentials & Env Agent\nSecurity",
          "name": "Credentials & Env Agent\nSecurity",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "nv FJR",
            "agent_id": "Credentials & Env Agent\nSecurity",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-9986e112",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "Credentials & Env Agent\nSecurity",
            "efg_requirements": [
              "cpu>=1",
              "ram>=2GB",
              "disk>=2GB",
              "net>=10Mbps"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Agent Implementation Agent (CodeGen): Purpose: Read each agent's specification from the blueprint and auto-generate the real code stubs or full implementations",
              "integrating with AI libraries or APIs. Inputs: Agent spec (name",
              "purpose",
              "inputs",
              "outputs",
              "environment requirements) from blueprint.json. Outputs: Generated code files (e.g. Python/PowerShell/Node.js scripts)",
              "initial Dockerfiles",
              "CI pipeline snippets.\\nIntegration: Runs before container build",
              "writes to each agent's folder under agents/<AgentName>/ and commits changes to Git. Acts as a preprocessor in the orchestration pipeline.\\n This CodeGen agent ensures that every new micro-agent has its scaffolded code automatically generated and versioned.\\nFoundational Helper Agents\\nThe CodeGen Agent can be further decomposed into a set of fou\"}"
            ],
            "spawn_policy": [
              "pack=PACK-9986e112",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "Registry/Discovery Agent",
          "name": "Registry/Discovery Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ic VQF",
            "agent_id": "Registry/Discovery Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-d60b6827",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-GATEWAY_SERVICES-C",
            "display_name": "Registry/Discovery Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "C",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Agent Implementation Agent (CodeGen): Purpose: Read each agent's specification from the blueprint and auto-generate the real code stubs or full implementations",
              "integrating with AI libraries or APIs. Inputs: Agent spec (name",
              "purpose",
              "inputs",
              "outputs",
              "environment requirements) from blueprint.json. Outputs: Generated code files (e.g. Python/PowerShell/Node.js scripts)",
              "initial Dockerfiles",
              "CI pipeline snippets.\\nIntegration: Runs before container build",
              "writes to each agent's folder under agents/<AgentName>/ and commits changes to Git. Acts as a preprocessor in the orchestration pipeline.\\n This CodeGen agent ensures that every new micro-agent has its scaffolded code automatically generated and versioned.\\nFoundational Helper Agents\\nThe CodeGen Agent can be further decomposed into a set of fou\"}"
            ],
            "spawn_policy": [
              "pack=PACK-d60b6827",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.gateway-services.c",
            "type": "Agent"
          }
        },
        {
          "id": "UX/Accessibility Agent",
          "name": "UX/Accessibility Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "qr PPF",
            "agent_id": "UX/Accessibility Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-c559dcc5",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-E",
            "display_name": "UX/Accessibility Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "E",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Agent Implementation Agent (CodeGen): Purpose: Read each agent's specification from the blueprint and auto-generate the real code stubs or full implementations",
              "integrating with AI libraries or APIs. Inputs: Agent spec (name",
              "purpose",
              "inputs",
              "outputs",
              "environment requirements) from blueprint.json. Outputs: Generated code files (e.g. Python/PowerShell/Node.js scripts)",
              "initial Dockerfiles",
              "CI pipeline snippets.\\nIntegration: Runs before container build",
              "writes to each agent's folder under agents/<AgentName>/ and commits changes to Git. Acts as a preprocessor in the orchestration pipeline.\\n This CodeGen agent ensures that every new micro-agent has its scaffolded code automatically generated and versioned.\\nFoundational Helper Agents\\nThe CodeGen Agent can be further decomposed into a set of fou\"}"
            ],
            "spawn_policy": [
              "pack=PACK-c559dcc5",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.e",
            "type": "Agent"
          }
        },
        {
          "id": "Feedback & Continuous Improvement Agent",
          "name": "Feedback & Continuous Improvement Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "px JJD",
            "agent_id": "Feedback & Continuous Improvement Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-d30169a0",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Feedback & Continuous Improvement Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Agent Implementation Agent (CodeGen): Purpose: Read each agent's specification from the blueprint and auto-generate the real code stubs or full implementations",
              "integrating with AI libraries or APIs. Inputs: Agent spec (name",
              "purpose",
              "inputs",
              "outputs",
              "environment requirements) from blueprint.json. Outputs: Generated code files (e.g. Python/PowerShell/Node.js scripts)",
              "initial Dockerfiles",
              "CI pipeline snippets.\\nIntegration: Runs before container build",
              "writes to each agent's folder under agents/<AgentName>/ and commits changes to Git. Acts as a preprocessor in the orchestration pipeline.\\n This CodeGen agent ensures that every new micro-agent has its scaffolded code automatically generated and versioned.\\nFoundational Helper Agents\\nThe CodeGen Agent can be further decomposed into a set of fou\"}"
            ],
            "spawn_policy": [
              "pack=PACK-d30169a0",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Upgrade & Patch Agent",
          "name": "Upgrade & Patch Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ch XMD",
            "agent_id": "Upgrade & Patch Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-5ec0b22f",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Upgrade & Patch Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Agent Implementation Agent (CodeGen): Purpose: Read each agent's specification from the blueprint and auto-generate the real code stubs or full implementations",
              "integrating with AI libraries or APIs. Inputs: Agent spec (name",
              "purpose",
              "inputs",
              "outputs",
              "environment requirements) from blueprint.json. Outputs: Generated code files (e.g. Python/PowerShell/Node.js scripts)",
              "initial Dockerfiles",
              "CI pipeline snippets.\\nIntegration: Runs before container build",
              "writes to each agent's folder under agents/<AgentName>/ and commits changes to Git. Acts as a preprocessor in the orchestration pipeline.\\n This CodeGen agent ensures that every new micro-agent has its scaffolded code automatically generated and versioned.\\nFoundational Helper Agents\\nThe CodeGen Agent can be further decomposed into a set of fou\"}"
            ],
            "spawn_policy": [
              "pack=PACK-5ec0b22f",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Test Case Generator Agent",
          "name": "Test Case Generator Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "pa XYC",
            "agent_id": "Test Case Generator Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-1874254e",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Test Case Generator Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Agent Implementation Agent (CodeGen): Purpose: Read each agent's specification from the blueprint and auto-generate the real code stubs or full implementations",
              "integrating with AI libraries or APIs. Inputs: Agent spec (name",
              "purpose",
              "inputs",
              "outputs",
              "environment requirements) from blueprint.json. Outputs: Generated code files (e.g. Python/PowerShell/Node.js scripts)",
              "initial Dockerfiles",
              "CI pipeline snippets.\\nIntegration: Runs before container build",
              "writes to each agent's folder under agents/<AgentName>/ and commits changes to Git. Acts as a preprocessor in the orchestration pipeline.\\n This CodeGen agent ensures that every new micro-agent has its scaffolded code automatically generated and versioned.\\nFoundational Helper Agents\\nThe CodeGen Agent can be further decomposed into a set of fou\"}"
            ],
            "spawn_policy": [
              "pack=PACK-1874254e",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Template Manager Agent\nCodegen",
          "name": "Template Manager Agent\nCodegen",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "pd TMM",
            "agent_id": "Template Manager Agent\nCodegen",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-aa55bc61",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-F",
            "display_name": "Template Manager Agent\nCodegen",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "F",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Agent Implementation Agent (CodeGen): Purpose: Read each agent's specification from the blueprint and auto-generate the real code stubs or full implementations",
              "integrating with AI libraries or APIs. Inputs: Agent spec (name",
              "purpose",
              "inputs",
              "outputs",
              "environment requirements) from blueprint.json. Outputs: Generated code files (e.g. Python/PowerShell/Node.js scripts)",
              "initial Dockerfiles",
              "CI pipeline snippets.\\nIntegration: Runs before container build",
              "writes to each agent's folder under agents/<AgentName>/ and commits changes to Git. Acts as a preprocessor in the orchestration pipeline.\\n This CodeGen agent ensures that every new micro-agent has its scaffolded code automatically generated and versioned.\\nFoundational Helper Agents\\nThe CodeGen Agent can be further decomposed into a set of fou\"}"
            ],
            "spawn_policy": [
              "pack=PACK-aa55bc61",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.f",
            "type": "Agent"
          }
        },
        {
          "id": "SDK/Plugin Manager Agent",
          "name": "SDK/Plugin Manager Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "kp QEE",
            "agent_id": "SDK/Plugin Manager Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-f0c46714",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "SDK/Plugin Manager Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Agent Implementation Agent (CodeGen): Purpose: Read each agent's specification from the blueprint and auto-generate the real code stubs or full implementations",
              "integrating with AI libraries or APIs. Inputs: Agent spec (name",
              "purpose",
              "inputs",
              "outputs",
              "environment requirements) from blueprint.json. Outputs: Generated code files (e.g. Python/PowerShell/Node.js scripts)",
              "initial Dockerfiles",
              "CI pipeline snippets.\\nIntegration: Runs before container build",
              "writes to each agent's folder under agents/<AgentName>/ and commits changes to Git. Acts as a preprocessor in the orchestration pipeline.\\n This CodeGen agent ensures that every new micro-agent has its scaffolded code automatically generated and versioned.\\nFoundational Helper Agents\\nThe CodeGen Agent can be further decomposed into a set of fou\"}"
            ],
            "spawn_policy": [
              "pack=PACK-f0c46714",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Versioning & Rollback Agent",
          "name": "Versioning & Rollback Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "fr QSP",
            "agent_id": "Versioning & Rollback Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-87eeb315",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Versioning & Rollback Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Agent Implementation Agent (CodeGen): Purpose: Read each agent's specification from the blueprint and auto-generate the real code stubs or full implementations",
              "integrating with AI libraries or APIs. Inputs: Agent spec (name",
              "purpose",
              "inputs",
              "outputs",
              "environment requirements) from blueprint.json. Outputs: Generated code files (e.g. Python/PowerShell/Node.js scripts)",
              "initial Dockerfiles",
              "CI pipeline snippets.\\nIntegration: Runs before container build",
              "writes to each agent's folder under agents/<AgentName>/ and commits changes to Git. Acts as a preprocessor in the orchestration pipeline.\\n This CodeGen agent ensures that every new micro-agent has its scaffolded code automatically generated and versioned.\\nFoundational Helper Agents\\nThe CodeGen Agent can be further decomposed into a set of fou\"}"
            ],
            "spawn_policy": [
              "pack=PACK-87eeb315",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Code Quality Agent\nLinting",
          "name": "Code Quality Agent\nLinting",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "xm QDZ",
            "agent_id": "Code Quality Agent\nLinting",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-d8c0844a",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Code Quality Agent\nLinting",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Agent Implementation Agent (CodeGen): Purpose: Read each agent's specification from the blueprint and auto-generate the real code stubs or full implementations",
              "integrating with AI libraries or APIs. Inputs: Agent spec (name",
              "purpose",
              "inputs",
              "outputs",
              "environment requirements) from blueprint.json. Outputs: Generated code files (e.g. Python/PowerShell/Node.js scripts)",
              "initial Dockerfiles",
              "CI pipeline snippets.\\nIntegration: Runs before container build",
              "writes to each agent's folder under agents/<AgentName>/ and commits changes to Git. Acts as a preprocessor in the orchestration pipeline.\\n This CodeGen agent ensures that every new micro-agent has its scaffolded code automatically generated and versioned.\\nFoundational Helper Agents\\nThe CodeGen Agent can be further decomposed into a set of fou\"}"
            ],
            "spawn_policy": [
              "pack=PACK-d8c0844a",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Test & Validation Agent",
          "name": "Test & Validation Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "yv LNG",
            "agent_id": "Test & Validation Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-edd00597",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Test & Validation Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Agent Implementation Agent (CodeGen): Purpose: Read each agent's specification from the blueprint and auto-generate the real code stubs or full implementations",
              "integrating with AI libraries or APIs. Inputs: Agent spec (name",
              "purpose",
              "inputs",
              "outputs",
              "environment requirements) from blueprint.json. Outputs: Generated code files (e.g. Python/PowerShell/Node.js scripts)",
              "initial Dockerfiles",
              "CI pipeline snippets.\\nIntegration: Runs before container build",
              "writes to each agent's folder under agents/<AgentName>/ and commits changes to Git. Acts as a preprocessor in the orchestration pipeline.\\n This CodeGen agent ensures that every new micro-agent has its scaffolded code automatically generated and versioned.\\nFoundational Helper Agents\\nThe CodeGen Agent can be further decomposed into a set of fou\"}"
            ],
            "spawn_policy": [
              "pack=PACK-edd00597",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Prompt Designer Agent",
          "name": "Prompt Designer Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ot FPH",
            "agent_id": "Prompt Designer Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-12dec078",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Prompt Designer Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Agent Implementation Agent (CodeGen): Purpose: Read each agent's specification from the blueprint and auto-generate the real code stubs or full implementations",
              "integrating with AI libraries or APIs. Inputs: Agent spec (name",
              "purpose",
              "inputs",
              "outputs",
              "environment requirements) from blueprint.json. Outputs: Generated code files (e.g. Python/PowerShell/Node.js scripts)",
              "initial Dockerfiles",
              "CI pipeline snippets.\\nIntegration: Runs before container build",
              "writes to each agent's folder under agents/<AgentName>/ and commits changes to Git. Acts as a preprocessor in the orchestration pipeline.\\n This CodeGen agent ensures that every new micro-agent has its scaffolded code automatically generated and versioned.\\nFoundational Helper Agents\\nThe CodeGen Agent can be further decomposed into a set of fou\"}"
            ],
            "spawn_policy": [
              "pack=PACK-12dec078",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Enhanced Observability & Tracing Agent",
          "name": "Enhanced Observability & Tracing Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "fw DEN",
            "agent_id": "Enhanced Observability & Tracing Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-25963873",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Enhanced Observability & Tracing Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Agent Implementation Agent (CodeGen): Purpose: Read each agent's specification from the blueprint and auto-generate the real code stubs or full implementations",
              "integrating with AI libraries or APIs. Inputs: Agent spec (name",
              "purpose",
              "inputs",
              "outputs",
              "environment requirements) from blueprint.json. Outputs: Generated code files (e.g. Python/PowerShell/Node.js scripts)",
              "initial Dockerfiles",
              "CI pipeline snippets.\\nIntegration: Runs before container build",
              "writes to each agent's folder under agents/<AgentName>/ and commits changes to Git. Acts as a preprocessor in the orchestration pipeline.\\n This CodeGen agent ensures that every new micro-agent has its scaffolded code automatically generated and versioned.\\nFoundational Helper Agents\\nThe CodeGen Agent can be further decomposed into a set of fou\"}"
            ],
            "spawn_policy": [
              "pack=PACK-25963873",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Cost Estimation Agent",
          "name": "Cost Estimation Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ht JEG",
            "agent_id": "Cost Estimation Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-3bf645f2",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Cost Estimation Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Agent Implementation Agent (CodeGen): Purpose: Read each agent's specification from the blueprint and auto-generate the real code stubs or full implementations",
              "integrating with AI libraries or APIs. Inputs: Agent spec (name",
              "purpose",
              "inputs",
              "outputs",
              "environment requirements) from blueprint.json. Outputs: Generated code files (e.g. Python/PowerShell/Node.js scripts)",
              "initial Dockerfiles",
              "CI pipeline snippets.\\nIntegration: Runs before container build",
              "writes to each agent's folder under agents/<AgentName>/ and commits changes to Git. Acts as a preprocessor in the orchestration pipeline.\\n This CodeGen agent ensures that every new micro-agent has its scaffolded code automatically generated and versioned.\\nFoundational Helper Agents\\nThe CodeGen Agent can be further decomposed into a set of fou\"}"
            ],
            "spawn_policy": [
              "pack=PACK-3bf645f2",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Test Case Generator Agent\nAutomated",
          "name": "Test Case Generator Agent\nAutomated",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ds HQI",
            "agent_id": "Test Case Generator Agent\nAutomated",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-52187757",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Test Case Generator Agent\nAutomated",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Agent Implementation Agent (CodeGen): Purpose: Read each agent's specification from the blueprint and auto-generate the real code stubs or full implementations",
              "integrating with AI libraries or APIs. Inputs: Agent spec (name",
              "purpose",
              "inputs",
              "outputs",
              "environment requirements) from blueprint.json. Outputs: Generated code files (e.g. Python/PowerShell/Node.js scripts)",
              "initial Dockerfiles",
              "CI pipeline snippets.\\nIntegration: Runs before container build",
              "writes to each agent's folder under agents/<AgentName>/ and commits changes to Git. Acts as a preprocessor in the orchestration pipeline.\\n This CodeGen agent ensures that every new micro-agent has its scaffolded code automatically generated and versioned.\\nFoundational Helper Agents\\nThe CodeGen Agent can be further decomposed into a set of fou\"}"
            ],
            "spawn_policy": [
              "pack=PACK-52187757",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Prompt Designer Agent\nLLM",
          "name": "Prompt Designer Agent\nLLM",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "gu XJE",
            "agent_id": "Prompt Designer Agent\nLLM",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-2caf931e",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-F",
            "display_name": "Prompt Designer Agent\nLLM",
            "efg_requirements": [
              "gpu>=1",
              "vram>=8GB",
              "disk>=10GB",
              "net>=50Mbps"
            ],
            "epic": "F",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Agent Implementation Agent (CodeGen): Purpose: Read each agent's specification from the blueprint and auto-generate the real code stubs or full implementations",
              "integrating with AI libraries or APIs. Inputs: Agent spec (name",
              "purpose",
              "inputs",
              "outputs",
              "environment requirements) from blueprint.json. Outputs: Generated code files (e.g. Python/PowerShell/Node.js scripts)",
              "initial Dockerfiles",
              "CI pipeline snippets.\\nIntegration: Runs before container build",
              "writes to each agent's folder under agents/<AgentName>/ and commits changes to Git. Acts as a preprocessor in the orchestration pipeline.\\n This CodeGen agent ensures that every new micro-agent has its scaffolded code automatically generated and versioned.\\nFoundational Helper Agents\\nThe CodeGen Agent can be further decomposed into a set of fou\"}"
            ],
            "spawn_policy": [
              "pack=PACK-2caf931e",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.f",
            "type": "Agent"
          }
        },
        {
          "id": "The CodeGen Agent",
          "name": "The CodeGen Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "by RWI",
            "agent_id": "The CodeGen Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-4f941a1b",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-F",
            "display_name": "The CodeGen Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "F",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Agent Implementation Agent (CodeGen): Purpose: Read each agent's specification from the blueprint and auto-generate the real code stubs or full implementations",
              "integrating with AI libraries or APIs. Inputs: Agent spec (name",
              "purpose",
              "inputs",
              "outputs",
              "environment requirements) from blueprint.json. Outputs: Generated code files (e.g. Python/PowerShell/Node.js scripts)",
              "initial Dockerfiles",
              "CI pipeline snippets.\\nIntegration: Runs before container build",
              "writes to each agent's folder under agents/<AgentName>/ and commits changes to Git. Acts as a preprocessor in the orchestration pipeline.\\n This CodeGen agent ensures that every new micro-agent has its scaffolded code automatically generated and versioned.\\nFoundational Helper Agents\\nThe CodeGen Agent can be further decomposed into a set of fou\"}"
            ],
            "spawn_policy": [
              "pack=PACK-4f941a1b",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.f",
            "type": "Agent"
          }
        },
        {
          "id": "Code Quality Agent",
          "name": "Code Quality Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "aj QSN",
            "agent_id": "Code Quality Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-ac39b49b",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Code Quality Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Agent Implementation Agent (CodeGen): Purpose: Read each agent's specification from the blueprint and auto-generate the real code stubs or full implementations",
              "integrating with AI libraries or APIs. Inputs: Agent spec (name",
              "purpose",
              "inputs",
              "outputs",
              "environment requirements) from blueprint.json. Outputs: Generated code files (e.g. Python/PowerShell/Node.js scripts)",
              "initial Dockerfiles",
              "CI pipeline snippets.\\nIntegration: Runs before container build",
              "writes to each agent's folder under agents/<AgentName>/ and commits changes to Git. Acts as a preprocessor in the orchestration pipeline.\\n This CodeGen agent ensures that every new micro-agent has its scaffolded code automatically generated and versioned.\\nFoundational Helper Agents\\nThe CodeGen Agent can be further decomposed into a set of fou\"}"
            ],
            "spawn_policy": [
              "pack=PACK-ac39b49b",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "App Research Agent",
          "name": "App Research Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "yf HSS",
            "agent_id": "App Research Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-6fbea397",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "App Research Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Agent Implementation Agent (CodeGen): Purpose: Read each agent's specification from the blueprint and auto-generate the real code stubs or full implementations",
              "integrating with AI libraries or APIs. Inputs: Agent spec (name",
              "purpose",
              "inputs",
              "outputs",
              "environment requirements) from blueprint.json. Outputs: Generated code files (e.g. Python/PowerShell/Node.js scripts)",
              "initial Dockerfiles",
              "CI pipeline snippets.\\nIntegration: Runs before container build",
              "writes to each agent's folder under agents/<AgentName>/ and commits changes to Git. Acts as a preprocessor in the orchestration pipeline.\\n This CodeGen agent ensures that every new micro-agent has its scaffolded code automatically generated and versioned.\\nFoundational Helper Agents\\nThe CodeGen Agent can be further decomposed into a set of fou\"}"
            ],
            "spawn_policy": [
              "pack=PACK-6fbea397",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Execution Planning Agent\nPrompt",
          "name": "Execution Planning Agent\nPrompt",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ue IPH",
            "agent_id": "Execution Planning Agent\nPrompt",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-48b111ec",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Execution Planning Agent\nPrompt",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Agent Implementation Agent (CodeGen): Purpose: Read each agent's specification from the blueprint and auto-generate the real code stubs or full implementations",
              "integrating with AI libraries or APIs. Inputs: Agent spec (name",
              "purpose",
              "inputs",
              "outputs",
              "environment requirements) from blueprint.json. Outputs: Generated code files (e.g. Python/PowerShell/Node.js scripts)",
              "initial Dockerfiles",
              "CI pipeline snippets.\\nIntegration: Runs before container build",
              "writes to each agent's folder under agents/<AgentName>/ and commits changes to Git. Acts as a preprocessor in the orchestration pipeline.\\n This CodeGen agent ensures that every new micro-agent has its scaffolded code automatically generated and versioned.\\nFoundational Helper Agents\\nThe CodeGen Agent can be further decomposed into a set of fou\"}"
            ],
            "spawn_policy": [
              "pack=PACK-48b111ec",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Agent Self-Upgrade/Retirement Agent",
          "name": "Agent Self-Upgrade/Retirement Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "pf OVF",
            "agent_id": "Agent Self-Upgrade/Retirement Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-328437d6",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Agent Self-Upgrade/Retirement Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Agent Implementation Agent (CodeGen): Purpose: Read each agent's specification from the blueprint and auto-generate the real code stubs or full implementations",
              "integrating with AI libraries or APIs. Inputs: Agent spec (name",
              "purpose",
              "inputs",
              "outputs",
              "environment requirements) from blueprint.json. Outputs: Generated code files (e.g. Python/PowerShell/Node.js scripts)",
              "initial Dockerfiles",
              "CI pipeline snippets.\\nIntegration: Runs before container build",
              "writes to each agent's folder under agents/<AgentName>/ and commits changes to Git. Acts as a preprocessor in the orchestration pipeline.\\n This CodeGen agent ensures that every new micro-agent has its scaffolded code automatically generated and versioned.\\nFoundational Helper Agents\\nThe CodeGen Agent can be further decomposed into a set of fou\"}"
            ],
            "spawn_policy": [
              "pack=PACK-328437d6",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Dependency Resolver Agent",
          "name": "Dependency Resolver Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "sr BHG",
            "agent_id": "Dependency Resolver Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-975cae4c",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Dependency Resolver Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Agent Implementation Agent (CodeGen): Purpose: Read each agent's specification from the blueprint and auto-generate the real code stubs or full implementations",
              "integrating with AI libraries or APIs. Inputs: Agent spec (name",
              "purpose",
              "inputs",
              "outputs",
              "environment requirements) from blueprint.json. Outputs: Generated code files (e.g. Python/PowerShell/Node.js scripts)",
              "initial Dockerfiles",
              "CI pipeline snippets.\\nIntegration: Runs before container build",
              "writes to each agent's folder under agents/<AgentName>/ and commits changes to Git. Acts as a preprocessor in the orchestration pipeline.\\n This CodeGen agent ensures that every new micro-agent has its scaffolded code automatically generated and versioned.\\nFoundational Helper Agents\\nThe CodeGen Agent can be further decomposed into a set of fou\"}"
            ],
            "spawn_policy": [
              "pack=PACK-975cae4c",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Orchestrator Federation Agent",
          "name": "Orchestrator Federation Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "es RIU",
            "agent_id": "Orchestrator Federation Agent",
            "budget_cap": "per_subject",
            "capability_pack_id": "PACK-65b310ce",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "Orchestrator Federation Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Orchestrator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Agent Implementation Agent (CodeGen): Purpose: Read each agent's specification from the blueprint and auto-generate the real code stubs or full implementations",
              "integrating with AI libraries or APIs. Inputs: Agent spec (name",
              "purpose",
              "inputs",
              "outputs",
              "environment requirements) from blueprint.json. Outputs: Generated code files (e.g. Python/PowerShell/Node.js scripts)",
              "initial Dockerfiles",
              "CI pipeline snippets.\\nIntegration: Runs before container build",
              "writes to each agent's folder under agents/<AgentName>/ and commits changes to Git. Acts as a preprocessor in the orchestration pipeline.\\n This CodeGen agent ensures that every new micro-agent has its scaffolded code automatically generated and versioned.\\nFoundational Helper Agents\\nThe CodeGen Agent can be further decomposed into a set of fou\"}"
            ],
            "spawn_policy": [
              "pack=PACK-65b310ce",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "UX/Accessibility Agent\nInternal",
          "name": "UX/Accessibility Agent\nInternal",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "px IZF",
            "agent_id": "UX/Accessibility Agent\nInternal",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-484005ff",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-E",
            "display_name": "UX/Accessibility Agent\nInternal",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "E",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Agent Implementation Agent (CodeGen): Purpose: Read each agent's specification from the blueprint and auto-generate the real code stubs or full implementations",
              "integrating with AI libraries or APIs. Inputs: Agent spec (name",
              "purpose",
              "inputs",
              "outputs",
              "environment requirements) from blueprint.json. Outputs: Generated code files (e.g. Python/PowerShell/Node.js scripts)",
              "initial Dockerfiles",
              "CI pipeline snippets.\\nIntegration: Runs before container build",
              "writes to each agent's folder under agents/<AgentName>/ and commits changes to Git. Acts as a preprocessor in the orchestration pipeline.\\n This CodeGen agent ensures that every new micro-agent has its scaffolded code automatically generated and versioned.\\nFoundational Helper Agents\\nThe CodeGen Agent can be further decomposed into a set of fou\"}"
            ],
            "spawn_policy": [
              "pack=PACK-484005ff",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.e",
            "type": "Agent"
          }
        },
        {
          "id": "Cost Estimation Agent\nFinOps",
          "name": "Cost Estimation Agent\nFinOps",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "tm KRX",
            "agent_id": "Cost Estimation Agent\nFinOps",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-2494a4a4",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Cost Estimation Agent\nFinOps",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Agent Implementation Agent (CodeGen): Purpose: Read each agent's specification from the blueprint and auto-generate the real code stubs or full implementations",
              "integrating with AI libraries or APIs. Inputs: Agent spec (name",
              "purpose",
              "inputs",
              "outputs",
              "environment requirements) from blueprint.json. Outputs: Generated code files (e.g. Python/PowerShell/Node.js scripts)",
              "initial Dockerfiles",
              "CI pipeline snippets.\\nIntegration: Runs before container build",
              "writes to each agent's folder under agents/<AgentName>/ and commits changes to Git. Acts as a preprocessor in the orchestration pipeline.\\n This CodeGen agent ensures that every new micro-agent has its scaffolded code automatically generated and versioned.\\nFoundational Helper Agents\\nThe CodeGen Agent can be further decomposed into a set of fou\"}"
            ],
            "spawn_policy": [
              "pack=PACK-2494a4a4",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Simulation & Risk Analysis Agent",
          "name": "Simulation & Risk Analysis Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ne HVI",
            "agent_id": "Simulation & Risk Analysis Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-7af3f9f7",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Simulation & Risk Analysis Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Agent Implementation Agent (CodeGen): Purpose: Read each agent's specification from the blueprint and auto-generate the real code stubs or full implementations",
              "integrating with AI libraries or APIs. Inputs: Agent spec (name",
              "purpose",
              "inputs",
              "outputs",
              "environment requirements) from blueprint.json. Outputs: Generated code files (e.g. Python/PowerShell/Node.js scripts)",
              "initial Dockerfiles",
              "CI pipeline snippets.\\nIntegration: Runs before container build",
              "writes to each agent's folder under agents/<AgentName>/ and commits changes to Git. Acts as a preprocessor in the orchestration pipeline.\\n This CodeGen agent ensures that every new micro-agent has its scaffolded code automatically generated and versioned.\\nFoundational Helper Agents\\nThe CodeGen Agent can be further decomposed into a set of fou\"}"
            ],
            "spawn_policy": [
              "pack=PACK-7af3f9f7",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Agent Supervisor/Heartbeat Agent",
          "name": "Agent Supervisor/Heartbeat Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "sw VTG",
            "agent_id": "Agent Supervisor/Heartbeat Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-a1c4f277",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Agent Supervisor/Heartbeat Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Agent Implementation Agent (CodeGen): Purpose: Read each agent's specification from the blueprint and auto-generate the real code stubs or full implementations",
              "integrating with AI libraries or APIs. Inputs: Agent spec (name",
              "purpose",
              "inputs",
              "outputs",
              "environment requirements) from blueprint.json. Outputs: Generated code files (e.g. Python/PowerShell/Node.js scripts)",
              "initial Dockerfiles",
              "CI pipeline snippets.\\nIntegration: Runs before container build",
              "writes to each agent's folder under agents/<AgentName>/ and commits changes to Git. Acts as a preprocessor in the orchestration pipeline.\\n This CodeGen agent ensures that every new micro-agent has its scaffolded code automatically generated and versioned.\\nFoundational Helper Agents\\nThe CodeGen Agent can be further decomposed into a set of fou\"}"
            ],
            "spawn_policy": [
              "pack=PACK-a1c4f277",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Orchestrator Agent\nMLOps",
          "name": "Orchestrator Agent\nMLOps",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "xt AQL",
            "agent_id": "Orchestrator Agent\nMLOps",
            "budget_cap": "per_subject",
            "capability_pack_id": "PACK-bf1f931b",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "Orchestrator Agent\nMLOps",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Orchestrator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Agent Implementation Agent (CodeGen): Purpose: Read each agent's specification from the blueprint and auto-generate the real code stubs or full implementations",
              "integrating with AI libraries or APIs. Inputs: Agent spec (name",
              "purpose",
              "inputs",
              "outputs",
              "environment requirements) from blueprint.json. Outputs: Generated code files (e.g. Python/PowerShell/Node.js scripts)",
              "initial Dockerfiles",
              "CI pipeline snippets.\\nIntegration: Runs before container build",
              "writes to each agent's folder under agents/<AgentName>/ and commits changes to Git. Acts as a preprocessor in the orchestration pipeline.\\n This CodeGen agent ensures that every new micro-agent has its scaffolded code automatically generated and versioned.\\nFoundational Helper Agents\\nThe CodeGen Agent can be further decomposed into a set of fou\"}"
            ],
            "spawn_policy": [
              "pack=PACK-bf1f931b",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "SafeStack Agent",
          "name": "SafeStack Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "av XPA",
            "agent_id": "SafeStack Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-de6e526e",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "SafeStack Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Agent Implementation Agent (CodeGen): Purpose: Read each agent's specification from the blueprint and auto-generate the real code stubs or full implementations",
              "integrating with AI libraries or APIs. Inputs: Agent spec (name",
              "purpose",
              "inputs",
              "outputs",
              "environment requirements) from blueprint.json. Outputs: Generated code files (e.g. Python/PowerShell/Node.js scripts)",
              "initial Dockerfiles",
              "CI pipeline snippets.\\nIntegration: Runs before container build",
              "writes to each agent's folder under agents/<AgentName>/ and commits changes to Git. Acts as a preprocessor in the orchestration pipeline.\\n This CodeGen agent ensures that every new micro-agent has its scaffolded code automatically generated and versioned.\\nFoundational Helper Agents\\nThe CodeGen Agent can be further decomposed into a set of fou\"}"
            ],
            "spawn_policy": [
              "pack=PACK-de6e526e",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Dependency Resolver Agent\nPackage",
          "name": "Dependency Resolver Agent\nPackage",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "xn ITD",
            "agent_id": "Dependency Resolver Agent\nPackage",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-49c8f56f",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Dependency Resolver Agent\nPackage",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Agent Implementation Agent (CodeGen): Purpose: Read each agent's specification from the blueprint and auto-generate the real code stubs or full implementations",
              "integrating with AI libraries or APIs. Inputs: Agent spec (name",
              "purpose",
              "inputs",
              "outputs",
              "environment requirements) from blueprint.json. Outputs: Generated code files (e.g. Python/PowerShell/Node.js scripts)",
              "initial Dockerfiles",
              "CI pipeline snippets.\\nIntegration: Runs before container build",
              "writes to each agent's folder under agents/<AgentName>/ and commits changes to Git. Acts as a preprocessor in the orchestration pipeline.\\n This CodeGen agent ensures that every new micro-agent has its scaffolded code automatically generated and versioned.\\nFoundational Helper Agents\\nThe CodeGen Agent can be further decomposed into a set of fou\"}"
            ],
            "spawn_policy": [
              "pack=PACK-49c8f56f",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Documentation Listener Agent",
          "name": "Documentation Listener Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "pb MYZ",
            "agent_id": "Documentation Listener Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-72cd8376",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Documentation Listener Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Agent Implementation Agent (CodeGen): Purpose: Read each agent's specification from the blueprint and auto-generate the real code stubs or full implementations",
              "integrating with AI libraries or APIs. Inputs: Agent spec (name",
              "purpose",
              "inputs",
              "outputs",
              "environment requirements) from blueprint.json. Outputs: Generated code files (e.g. Python/PowerShell/Node.js scripts)",
              "initial Dockerfiles",
              "CI pipeline snippets.\\nIntegration: Runs before container build",
              "writes to each agent's folder under agents/<AgentName>/ and commits changes to Git. Acts as a preprocessor in the orchestration pipeline.\\n This CodeGen agent ensures that every new micro-agent has its scaffolded code automatically generated and versioned.\\nFoundational Helper Agents\\nThe CodeGen Agent can be further decomposed into a set of fou\"}"
            ],
            "spawn_policy": [
              "pack=PACK-72cd8376",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "App Research Agent\nResearch",
          "name": "App Research Agent\nResearch",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ey WPM",
            "agent_id": "App Research Agent\nResearch",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-a0229ff1",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "App Research Agent\nResearch",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Agent Implementation Agent (CodeGen): Purpose: Read each agent's specification from the blueprint and auto-generate the real code stubs or full implementations",
              "integrating with AI libraries or APIs. Inputs: Agent spec (name",
              "purpose",
              "inputs",
              "outputs",
              "environment requirements) from blueprint.json. Outputs: Generated code files (e.g. Python/PowerShell/Node.js scripts)",
              "initial Dockerfiles",
              "CI pipeline snippets.\\nIntegration: Runs before container build",
              "writes to each agent's folder under agents/<AgentName>/ and commits changes to Git. Acts as a preprocessor in the orchestration pipeline.\\n This CodeGen agent ensures that every new micro-agent has its scaffolded code automatically generated and versioned.\\nFoundational Helper Agents\\nThe CodeGen Agent can be further decomposed into a set of fou\"}"
            ],
            "spawn_policy": [
              "pack=PACK-a0229ff1",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Backup & Restore Agent",
          "name": "Backup & Restore Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "us UKD",
            "agent_id": "Backup & Restore Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-609f90ec",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Backup & Restore Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Agent Implementation Agent (CodeGen): Purpose: Read each agent's specification from the blueprint and auto-generate the real code stubs or full implementations",
              "integrating with AI libraries or APIs. Inputs: Agent spec (name",
              "purpose",
              "inputs",
              "outputs",
              "environment requirements) from blueprint.json. Outputs: Generated code files (e.g. Python/PowerShell/Node.js scripts)",
              "initial Dockerfiles",
              "CI pipeline snippets.\\nIntegration: Runs before container build",
              "writes to each agent's folder under agents/<AgentName>/ and commits changes to Git. Acts as a preprocessor in the orchestration pipeline.\\n This CodeGen agent ensures that every new micro-agent has its scaffolded code automatically generated and versioned.\\nFoundational Helper Agents\\nThe CodeGen Agent can be further decomposed into a set of fou\"}"
            ],
            "spawn_policy": [
              "pack=PACK-609f90ec",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Upgrade & Patch Agent\nRelease",
          "name": "Upgrade & Patch Agent\nRelease",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ue TIG",
            "agent_id": "Upgrade & Patch Agent\nRelease",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-e3de1df6",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Upgrade & Patch Agent\nRelease",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Agent Implementation Agent (CodeGen): Purpose: Read each agent's specification from the blueprint and auto-generate the real code stubs or full implementations",
              "integrating with AI libraries or APIs. Inputs: Agent spec (name",
              "purpose",
              "inputs",
              "outputs",
              "environment requirements) from blueprint.json. Outputs: Generated code files (e.g. Python/PowerShell/Node.js scripts)",
              "initial Dockerfiles",
              "CI pipeline snippets.\\nIntegration: Runs before container build",
              "writes to each agent's folder under agents/<AgentName>/ and commits changes to Git. Acts as a preprocessor in the orchestration pipeline.\\n This CodeGen agent ensures that every new micro-agent has its scaffolded code automatically generated and versioned.\\nFoundational Helper Agents\\nThe CodeGen Agent can be further decomposed into a set of fou\"}"
            ],
            "spawn_policy": [
              "pack=PACK-e3de1df6",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Multi-Tenant Isolation Agent",
          "name": "Multi-Tenant Isolation Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "pf GXC",
            "agent_id": "Multi-Tenant Isolation Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-878177e5",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Multi-Tenant Isolation Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Agent Implementation Agent (CodeGen): Purpose: Read each agent's specification from the blueprint and auto-generate the real code stubs or full implementations",
              "integrating with AI libraries or APIs. Inputs: Agent spec (name",
              "purpose",
              "inputs",
              "outputs",
              "environment requirements) from blueprint.json. Outputs: Generated code files (e.g. Python/PowerShell/Node.js scripts)",
              "initial Dockerfiles",
              "CI pipeline snippets.\\nIntegration: Runs before container build",
              "writes to each agent's folder under agents/<AgentName>/ and commits changes to Git. Acts as a preprocessor in the orchestration pipeline.\\n This CodeGen agent ensures that every new micro-agent has its scaffolded code automatically generated and versioned.\\nFoundational Helper Agents\\nThe CodeGen Agent can be further decomposed into a set of fou\"}"
            ],
            "spawn_policy": [
              "pack=PACK-878177e5",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Template Manager Agent",
          "name": "Template Manager Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "re JAG",
            "agent_id": "Template Manager Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-81d91fd7",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Template Manager Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Agent Implementation Agent (CodeGen): Purpose: Read each agent's specification from the blueprint and auto-generate the real code stubs or full implementations",
              "integrating with AI libraries or APIs. Inputs: Agent spec (name",
              "purpose",
              "inputs",
              "outputs",
              "environment requirements) from blueprint.json. Outputs: Generated code files (e.g. Python/PowerShell/Node.js scripts)",
              "initial Dockerfiles",
              "CI pipeline snippets.\\nIntegration: Runs before container build",
              "writes to each agent's folder under agents/<AgentName>/ and commits changes to Git. Acts as a preprocessor in the orchestration pipeline.\\n This CodeGen agent ensures that every new micro-agent has its scaffolded code automatically generated and versioned.\\nFoundational Helper Agents\\nThe CodeGen Agent can be further decomposed into a set of fou\"}"
            ],
            "spawn_policy": [
              "pack=PACK-81d91fd7",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "SafeStack Agent\nRed",
          "name": "SafeStack Agent\nRed",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "xk YJB",
            "agent_id": "SafeStack Agent\nRed",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-53b55e2f",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "SafeStack Agent\nRed",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Agent Implementation Agent (CodeGen): Purpose: Read each agent's specification from the blueprint and auto-generate the real code stubs or full implementations",
              "integrating with AI libraries or APIs. Inputs: Agent spec (name",
              "purpose",
              "inputs",
              "outputs",
              "environment requirements) from blueprint.json. Outputs: Generated code files (e.g. Python/PowerShell/Node.js scripts)",
              "initial Dockerfiles",
              "CI pipeline snippets.\\nIntegration: Runs before container build",
              "writes to each agent's folder under agents/<AgentName>/ and commits changes to Git. Acts as a preprocessor in the orchestration pipeline.\\n This CodeGen agent ensures that every new micro-agent has its scaffolded code automatically generated and versioned.\\nFoundational Helper Agents\\nThe CodeGen Agent can be further decomposed into a set of fou\"}"
            ],
            "spawn_policy": [
              "pack=PACK-53b55e2f",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Agent Implementation Agent",
          "name": "Agent Implementation Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ju MHG",
            "agent_id": "Agent Implementation Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-900b1f86",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Agent Implementation Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Agent Implementation Agent (CodeGen): Purpose: Read each agent's specification from the blueprint and auto-generate the real code stubs or full implementations",
              "integrating with AI libraries or APIs. Inputs: Agent spec (name",
              "purpose",
              "inputs",
              "outputs",
              "environment requirements) from blueprint.json. Outputs: Generated code files (e.g. Python/PowerShell/Node.js scripts)",
              "initial Dockerfiles",
              "CI pipeline snippets.\\nIntegration: Runs before container build",
              "writes to each agent's folder under agents/<AgentName>/ and commits changes to Git. Acts as a preprocessor in the orchestration pipeline.\\n This CodeGen agent ensures that every new micro-agent has its scaffolded code automatically generated and versioned.\\nFoundational Helper Agents\\nThe CodeGen Agent can be further decomposed into a set of fou\"}"
            ],
            "spawn_policy": [
              "pack=PACK-900b1f86",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Documentation Generator Agent",
          "name": "Documentation Generator Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "as DOJ",
            "agent_id": "Documentation Generator Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-11db2ca5",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Documentation Generator Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Agent Implementation Agent (CodeGen): Purpose: Read each agent's specification from the blueprint and auto-generate the real code stubs or full implementations",
              "integrating with AI libraries or APIs. Inputs: Agent spec (name",
              "purpose",
              "inputs",
              "outputs",
              "environment requirements) from blueprint.json. Outputs: Generated code files (e.g. Python/PowerShell/Node.js scripts)",
              "initial Dockerfiles",
              "CI pipeline snippets.\\nIntegration: Runs before container build",
              "writes to each agent's folder under agents/<AgentName>/ and commits changes to Git. Acts as a preprocessor in the orchestration pipeline.\\n This CodeGen agent ensures that every new micro-agent has its scaffolded code automatically generated and versioned.\\nFoundational Helper Agents\\nThe CodeGen Agent can be further decomposed into a set of fou\"}"
            ],
            "spawn_policy": [
              "pack=PACK-11db2ca5",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Backup & Restore Agent\nDisaster",
          "name": "Backup & Restore Agent\nDisaster",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wl SRO",
            "agent_id": "Backup & Restore Agent\nDisaster",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-38f8b84e",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Backup & Restore Agent\nDisaster",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Agent Implementation Agent (CodeGen): Purpose: Read each agent's specification from the blueprint and auto-generate the real code stubs or full implementations",
              "integrating with AI libraries or APIs. Inputs: Agent spec (name",
              "purpose",
              "inputs",
              "outputs",
              "environment requirements) from blueprint.json. Outputs: Generated code files (e.g. Python/PowerShell/Node.js scripts)",
              "initial Dockerfiles",
              "CI pipeline snippets.\\nIntegration: Runs before container build",
              "writes to each agent's folder under agents/<AgentName>/ and commits changes to Git. Acts as a preprocessor in the orchestration pipeline.\\n This CodeGen agent ensures that every new micro-agent has its scaffolded code automatically generated and versioned.\\nFoundational Helper Agents\\nThe CodeGen Agent can be further decomposed into a set of fou\"}"
            ],
            "spawn_policy": [
              "pack=PACK-38f8b84e",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Micro-Agent",
          "name": "Micro-Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ji ADF-4",
            "agent_id": "Micro-Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-fc7be497",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "Micro-Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Agent Implementation Agent (CodeGen): Purpose: Read each agent's specification from the blueprint and auto-generate the real code stubs or full implementations",
              "integrating with AI libraries or APIs. Inputs: Agent spec (name",
              "purpose",
              "inputs",
              "outputs",
              "environment requirements) from blueprint.json. Outputs: Generated code files (e.g. Python/PowerShell/Node.js scripts)",
              "initial Dockerfiles",
              "CI pipeline snippets.\\nIntegration: Runs before container build",
              "writes to each agent's folder under agents/<AgentName>/ and commits changes to Git. Acts as a preprocessor in the orchestration pipeline.\\n This CodeGen agent ensures that every new micro-agent has its scaffolded code automatically generated and versioned.\\nFoundational Helper Agents\\nThe CodeGen Agent can be further decomposed into a set of fou\"}"
            ],
            "spawn_policy": [
              "pack=PACK-fc7be497",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Knowledge-Base Agent\nEmbedding",
          "name": "Knowledge-Base Agent\nEmbedding",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ra VQC",
            "agent_id": "Knowledge-Base Agent\nEmbedding",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-f02b7232",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-F",
            "display_name": "Knowledge-Base Agent\nEmbedding",
            "efg_requirements": [
              "gpu>=1",
              "vram>=8GB",
              "disk>=10GB",
              "net>=50Mbps"
            ],
            "epic": "F",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Agent Implementation Agent (CodeGen): Purpose: Read each agent's specification from the blueprint and auto-generate the real code stubs or full implementations",
              "integrating with AI libraries or APIs. Inputs: Agent spec (name",
              "purpose",
              "inputs",
              "outputs",
              "environment requirements) from blueprint.json. Outputs: Generated code files (e.g. Python/PowerShell/Node.js scripts)",
              "initial Dockerfiles",
              "CI pipeline snippets.\\nIntegration: Runs before container build",
              "writes to each agent's folder under agents/<AgentName>/ and commits changes to Git. Acts as a preprocessor in the orchestration pipeline.\\n This CodeGen agent ensures that every new micro-agent has its scaffolded code automatically generated and versioned.\\nFoundational Helper Agents\\nThe CodeGen Agent can be further decomposed into a set of fou\"}"
            ],
            "spawn_policy": [
              "pack=PACK-f02b7232",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.f",
            "type": "Agent"
          }
        },
        {
          "id": "Monitoring & Alerting Agent",
          "name": "Monitoring & Alerting Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "rk YTK",
            "agent_id": "Monitoring & Alerting Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-df776a13",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Monitoring & Alerting Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Agent Implementation Agent (CodeGen): Purpose: Read each agent's specification from the blueprint and auto-generate the real code stubs or full implementations",
              "integrating with AI libraries or APIs. Inputs: Agent spec (name",
              "purpose",
              "inputs",
              "outputs",
              "environment requirements) from blueprint.json. Outputs: Generated code files (e.g. Python/PowerShell/Node.js scripts)",
              "initial Dockerfiles",
              "CI pipeline snippets.\\nIntegration: Runs before container build",
              "writes to each agent's folder under agents/<AgentName>/ and commits changes to Git. Acts as a preprocessor in the orchestration pipeline.\\n This CodeGen agent ensures that every new micro-agent has its scaffolded code automatically generated and versioned.\\nFoundational Helper Agents\\nThe CodeGen Agent can be further decomposed into a set of fou\"}"
            ],
            "spawn_policy": [
              "pack=PACK-df776a13",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Knowledge-Base Agent",
          "name": "Knowledge-Base Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ka YUA",
            "agent_id": "Knowledge-Base Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-99ea64ed",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Knowledge-Base Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Agent Implementation Agent (CodeGen): Purpose: Read each agent's specification from the blueprint and auto-generate the real code stubs or full implementations",
              "integrating with AI libraries or APIs. Inputs: Agent spec (name",
              "purpose",
              "inputs",
              "outputs",
              "environment requirements) from blueprint.json. Outputs: Generated code files (e.g. Python/PowerShell/Node.js scripts)",
              "initial Dockerfiles",
              "CI pipeline snippets.\\nIntegration: Runs before container build",
              "writes to each agent's folder under agents/<AgentName>/ and commits changes to Git. Acts as a preprocessor in the orchestration pipeline.\\n This CodeGen agent ensures that every new micro-agent has its scaffolded code automatically generated and versioned.\\nFoundational Helper Agents\\nThe CodeGen Agent can be further decomposed into a set of fou\"}"
            ],
            "spawn_policy": [
              "pack=PACK-99ea64ed",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Alternatives Comparison Agent",
          "name": "Alternatives Comparison Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "bq NYF",
            "agent_id": "Alternatives Comparison Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-cf2e43d7",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Alternatives Comparison Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "micro-agent orchestration .txt",
            "source_rows_json": [
              "{\"sample\": \"Agent Implementation Agent (CodeGen): Purpose: Read each agent's specification from the blueprint and auto-generate the real code stubs or full implementations",
              "integrating with AI libraries or APIs. Inputs: Agent spec (name",
              "purpose",
              "inputs",
              "outputs",
              "environment requirements) from blueprint.json. Outputs: Generated code files (e.g. Python/PowerShell/Node.js scripts)",
              "initial Dockerfiles",
              "CI pipeline snippets.\\nIntegration: Runs before container build",
              "writes to each agent's folder under agents/<AgentName>/ and commits changes to Git. Acts as a preprocessor in the orchestration pipeline.\\n This CodeGen agent ensures that every new micro-agent has its scaffolded code automatically generated and versioned.\\nFoundational Helper Agents\\nThe CodeGen Agent can be further decomposed into a set of fou\"}"
            ],
            "spawn_policy": [
              "pack=PACK-cf2e43d7",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "ModelSelectorAgent",
          "name": "ModelSelectorAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "fl YEL",
            "agent_id": "ModelSelectorAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-20c0247c",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-F",
            "display_name": "ModelSelectorAgent",
            "efg_requirements": [
              "gpu>=1",
              "vram>=8GB",
              "disk>=10GB",
              "net>=50Mbps"
            ],
            "epic": "F",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "intelligence_learning.md",
            "source_rows_json": [
              "{\"sample\": \"The **ModelSelectorAgent** plays a central role in learning.  By recording the performance (latency",
              "cost",
              "accuracy) and outcomes of each model used for a task",
              "the system builds a knowledge base of model behaviours.  Over time",
              "the selector\u2019s heuristics can be tuned or even replaced by learned policies that maximise utility subject to constraints.  Benchmark results and feedback loops allow the system to retire underperforming models and onboard new ones seamlessly.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-20c0247c",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.f",
            "type": "Agent"
          }
        },
        {
          "id": "NOA can instruct a MicroAgentStack",
          "name": "NOA can instruct a MicroAgentStack",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "pu VQE",
            "agent_id": "NOA can instruct a MicroAgentStack",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-ee0b9d55",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "NOA can instruct a MicroAgentStack",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "intelligence_learning.md",
            "source_rows_json": [
              "{\"sample\": \"**Branchwise foresight** refers to simulating multiple potential futures or scenarios before committing resources.  For example",
              "before migrating a CRM function internally",
              "NOA can instruct a MicroAgentStack to:\"}"
            ],
            "spawn_policy": [
              "pack=PACK-ee0b9d55",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Memory / Agent Layer",
          "name": "Memory / Agent Layer",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "by FJX",
            "agent_id": "Memory / Agent Layer",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-43b62960",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Memory / Agent Layer",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "heygen_clone_stack.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Component",
              "Tool",
              "Notes",
              "\\n",
              "--------------------",
              "---------------------------------------",
              "-----------------------------------------------------",
              "\\n",
              "Voice-to-Text",
              "Whisper (OpenAI)",
              "Local STT or use Whisper.cpp for fast inference",
              "\\n",
              "LLM Engine",
              "GPT4All",
              "Deepseek",
              "OpenChat",
              "Local deployment or Ollama integration",
              "\\n",
              "TTS / Voice Clone",
              "Tortoise TTS",
              "Bark",
              "Coqui TTS",
              "Voice cloning and natural speech synthesis",
              "\\n",
              "Avatar Animation",
              "SadTalker",
              "Wav2Lip",
              "Takes audio + still image to animate a talking avatar",
              "\\n",
              "Web Avatar UI",
              "Three.js + ReadyPlayerMe or Unity Web\"}"
            ],
            "spawn_policy": [
              "pack=PACK-43b62960",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "MicroAgentStack",
          "name": "MicroAgentStack",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "qi KZU-3",
            "agent_id": "MicroAgentStack",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-d2c954bc",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "MicroAgentStack",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "microagentstack.md",
            "source_rows_json": "{\"sample\": \"# MicroAgentStack \u2014 Cooperative Work Pods\"}",
            "spawn_policy": [
              "pack=PACK-d2c954bc",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "MicroAgentStack",
          "name": "MicroAgentStack",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "qi KZU-4",
            "agent_id": "MicroAgentStack",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-d2c954bc",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "MicroAgentStack",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "microagentstack.md",
            "source_rows_json": [
              "{\"sample\": \"A **MicroAgentStack** is a deployable cluster of cooperative agents assembled to accomplish a bounded objective.  Think of it as a project team spun up on demand: each stack has its own **CommandChiefAgent** (the stack master)",
              "a set of specialised Operators",
              "Adapters and Guards",
              "and a dedicated workspace.  Stacks can be created",
              "scaled and destroyed rapidly",
              "making them the primary execution units within ark\u2011os\u2011noa.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-d2c954bc",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "CommandChiefAgent",
          "name": "CommandChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "jj CON",
            "agent_id": "CommandChiefAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-299e0062",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "CommandChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "microagentstack.md",
            "source_rows_json": [
              "{\"sample\": \"A **MicroAgentStack** is a deployable cluster of cooperative agents assembled to accomplish a bounded objective.  Think of it as a project team spun up on demand: each stack has its own **CommandChiefAgent** (the stack master)",
              "a set of specialised Operators",
              "Adapters and Guards",
              "and a dedicated workspace.  Stacks can be created",
              "scaled and destroyed rapidly",
              "making them the primary execution units within ark\u2011os\u2011noa.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-299e0062",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "CommandChiefAgent",
          "name": "CommandChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "jj CON",
            "agent_id": "CommandChiefAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-299e0062",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "CommandChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "microagentstack.md",
            "source_rows_json": [
              "{\"sample\": \"* **CommandChiefAgent (Stack Master):** Orchestrates the stack",
              "decomposes tasks",
              "assigns work to subordinate agents",
              "monitors progress",
              "resolves conflicts and enforces SLAs.\\n* **Operators:** Specialised agents that perform specific functions.  Examples include code runners (execute code)",
              "data wranglers (transform data)",
              "doc generators (produce reports)",
              "testers (run unit/integration tests) and packagers (build zips",
              "PDFs).\\n* **Adapters:** Connectors to external systems (repos",
              "CRMs",
              "APIs) and publishers to internal services (registry",
              "MinIO",
              "Postgres).  Adapters abstract away details like auth and rate\u2011limits.\\n* **Guards:** Policy enforcement points\u2014security scanners",
              "licence checkers",
              "quality gates.  They ensure the stack adheres to policies defined by NOA and the Board Agents.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-299e0062",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Board Agent",
          "name": "Board Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "jm MDQ",
            "agent_id": "Board Agent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-796c1e54",
            "category": "Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Board Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "microagentstack.md",
            "source_rows_json": [
              "{\"sample\": \"1. **Bootstrap:**  Given inputs (e.g. repo URL",
              "CRM base URL",
              "model list)",
              "the CommandChiefAgent creates a **WorkPlan**",
              "prepares the environment and mounts necessary sidecars.  It avoids Docker\u2011in\u2011Docker by using **Capsule** sidecars to talk to the outer BuildKit/containerd environment\u301043537238352704\u2020L1068-L1088\u3011.\\n2. **Execute:**  The stack runs its Operators in parallel where possible.  Retrying tasks with exponential backoff ensures resilience",
              "failures trigger controlled retries or escalation to the Board Agent.\\n3. **Validate:**  Once tasks finish",
              "Guards run acceptance tests (e.g. unit tests",
              "SBOM scans",
              "licence checks) and produce human\u2011readable summaries.  If acceptance criteria fail",
              "the stack either retries or fails the WorkPlan.\\n4. **Package:**  On success",
              "the stack assembles ou\"}"
            ],
            "spawn_policy": [
              "pack=PACK-796c1e54",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "CommandChiefAgent",
          "name": "CommandChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "jj CON",
            "agent_id": "CommandChiefAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-299e0062",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "CommandChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "microagentstack.md",
            "source_rows_json": [
              "{\"sample\": \"1. **Bootstrap:**  Given inputs (e.g. repo URL",
              "CRM base URL",
              "model list)",
              "the CommandChiefAgent creates a **WorkPlan**",
              "prepares the environment and mounts necessary sidecars.  It avoids Docker\u2011in\u2011Docker by using **Capsule** sidecars to talk to the outer BuildKit/containerd environment\u301043537238352704\u2020L1068-L1088\u3011.\\n2. **Execute:**  The stack runs its Operators in parallel where possible.  Retrying tasks with exponential backoff ensures resilience",
              "failures trigger controlled retries or escalation to the Board Agent.\\n3. **Validate:**  Once tasks finish",
              "Guards run acceptance tests (e.g. unit tests",
              "SBOM scans",
              "licence checks) and produce human\u2011readable summaries.  If acceptance criteria fail",
              "the stack either retries or fails the WorkPlan.\\n4. **Package:**  On success",
              "the stack assembles ou\"}"
            ],
            "spawn_policy": [
              "pack=PACK-299e0062",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "CommandChiefAgent",
          "name": "CommandChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "jj CON",
            "agent_id": "CommandChiefAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-299e0062",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "CommandChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "microagentstack.md",
            "source_rows_json": [
              "{\"sample\": \"* **Board Agents:** Create and oversee stacks.  Each stack reports to its Board Agent.  Board Agents can run multiple stacks in parallel.\\n* **ModelSelectorAgents:** When a stack requires AI processing",
              "the CommandChiefAgent requests a ModelSelector to choose the appropriate model and logs the rationale.\\n* **Digest Agent:** Often uses MicroAgentStacks to perform large\u2011scale digestions across many repos or datasets.  Each stack digests one or more sources and returns results to the Digest Agent.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-299e0062",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Each stack reports to its Board Agent",
          "name": "Each stack reports to its Board Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "sw PTK",
            "agent_id": "Each stack reports to its Board Agent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-bc2ff087",
            "category": "Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Each stack reports to its Board Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "microagentstack.md",
            "source_rows_json": [
              "{\"sample\": \"* **Board Agents:** Create and oversee stacks.  Each stack reports to its Board Agent.  Board Agents can run multiple stacks in parallel.\\n* **ModelSelectorAgents:** When a stack requires AI processing",
              "the CommandChiefAgent requests a ModelSelector to choose the appropriate model and logs the rationale.\\n* **Digest Agent:** Often uses MicroAgentStacks to perform large\u2011scale digestions across many repos or datasets.  Each stack digests one or more sources and returns results to the Digest Agent.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-bc2ff087",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Often uses MicroAgentStacks",
          "name": "Often uses MicroAgentStacks",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "kr KFW",
            "agent_id": "Often uses MicroAgentStacks",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-fe076a0d",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "Often uses MicroAgentStacks",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "microagentstack.md",
            "source_rows_json": [
              "{\"sample\": \"* **Board Agents:** Create and oversee stacks.  Each stack reports to its Board Agent.  Board Agents can run multiple stacks in parallel.\\n* **ModelSelectorAgents:** When a stack requires AI processing",
              "the CommandChiefAgent requests a ModelSelector to choose the appropriate model and logs the rationale.\\n* **Digest Agent:** Often uses MicroAgentStacks to perform large\u2011scale digestions across many repos or datasets.  Each stack digests one or more sources and returns results to the Digest Agent.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-fe076a0d",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Digest Agent",
          "name": "Digest Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "es FPS",
            "agent_id": "Digest Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-a7c4c5d1",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "Digest Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "microagentstack.md",
            "source_rows_json": [
              "{\"sample\": \"* **Board Agents:** Create and oversee stacks.  Each stack reports to its Board Agent.  Board Agents can run multiple stacks in parallel.\\n* **ModelSelectorAgents:** When a stack requires AI processing",
              "the CommandChiefAgent requests a ModelSelector to choose the appropriate model and logs the rationale.\\n* **Digest Agent:** Often uses MicroAgentStacks to perform large\u2011scale digestions across many repos or datasets.  Each stack digests one or more sources and returns results to the Digest Agent.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-a7c4c5d1",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "Each stack digests one or more sources and returns results to the Digest Agent",
          "name": "Each stack digests one or more sources and returns results to the Digest Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ce YFE",
            "agent_id": "Each stack digests one or more sources and returns results to the Digest Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-9332d4db",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "Each stack digests one or more sources and returns results to the Digest Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "microagentstack.md",
            "source_rows_json": [
              "{\"sample\": \"* **Board Agents:** Create and oversee stacks.  Each stack reports to its Board Agent.  Board Agents can run multiple stacks in parallel.\\n* **ModelSelectorAgents:** When a stack requires AI processing",
              "the CommandChiefAgent requests a ModelSelector to choose the appropriate model and logs the rationale.\\n* **Digest Agent:** Often uses MicroAgentStacks to perform large\u2011scale digestions across many repos or datasets.  Each stack digests one or more sources and returns results to the Digest Agent.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-9332d4db",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "MicroAgentStacks",
          "name": "MicroAgentStacks",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "kp RIU",
            "agent_id": "MicroAgentStacks",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-24114ed9",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "MicroAgentStacks",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "microagentstack.md",
            "source_rows_json": [
              "{\"sample\": \"MicroAgentStacks bring structure",
              "scalability and reliability to ark\u2011os\u2011noa\u2019s execution model.  By isolating work into bounded pods",
              "the system can handle complex",
              "parallel workflows without turning into a monolith.\\n\"}"
            ],
            "spawn_policy": [
              "pack=PACK-24114ed9",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "ReviewAgent",
          "name": "ReviewAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ui FXT",
            "agent_id": "ReviewAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-bb4ee1b9",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "ReviewAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "issues_epics_tasks.md",
            "source_rows_json": [
              "{\"sample\": \"## EPIC D \u2014 Orchestration & Court\\n- **D1**: NOA Orchestrator loop (Sense \u2192 Plan \u2192 Act \u2192 Verify \u2192 Report).\\n- **D2**: Board agents (Strategy",
              "COO",
              "Legal",
              "Security",
              "Digest",
              "Growth).\\n- **D3**: ManifestEditor + ReviewAgent + sandbox promotion to live.\\n- **D4**: Policy packs (licenses",
              "CVE thresholds",
              "network policy).\"}"
            ],
            "spawn_policy": [
              "pack=PACK-bb4ee1b9",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "ModelSelectorAgent",
          "name": "ModelSelectorAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "fl YEL-2",
            "agent_id": "ModelSelectorAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-20c0247c",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-F",
            "display_name": "ModelSelectorAgent",
            "efg_requirements": [
              "gpu>=1",
              "vram>=8GB",
              "disk>=10GB",
              "net>=50Mbps"
            ],
            "epic": "F",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "model_selector_agents.md",
            "source_rows_json": [
              "{\"sample\": \"A **ModelSelectorAgent** specialises in selecting the best AI model or tool for a given task.  In the context of ark\u2011os\u2011noa",
              "tasks vary widely\u2014from reasoning and planning",
              "to code analysis",
              "to data transformation.  Selecting the wrong model can waste resources or compromise privacy.  The ModelSelector provides an intelligent arbitration layer",
              "helping Board Agents and **MicroAgentStacks** achieve high quality results while respecting cost",
              "latency and privacy constraints.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-20c0247c",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.f",
            "type": "Agent"
          }
        },
        {
          "id": "MicroAgentStacks",
          "name": "MicroAgentStacks",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "kp RIU-2",
            "agent_id": "MicroAgentStacks",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-24114ed9",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "MicroAgentStacks",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "model_selector_agents.md",
            "source_rows_json": [
              "{\"sample\": \"A **ModelSelectorAgent** specialises in selecting the best AI model or tool for a given task.  In the context of ark\u2011os\u2011noa",
              "tasks vary widely\u2014from reasoning and planning",
              "to code analysis",
              "to data transformation.  Selecting the wrong model can waste resources or compromise privacy.  The ModelSelector provides an intelligent arbitration layer",
              "helping Board Agents and **MicroAgentStacks** achieve high quality results while respecting cost",
              "latency and privacy constraints.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-24114ed9",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Board Agent or CommandChiefAgent",
          "name": "Board Agent or CommandChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "jf UBC",
            "agent_id": "Board Agent or CommandChiefAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-9ca53e6b",
            "category": "Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Board Agent or CommandChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "model_selector_agents.md",
            "source_rows_json": [
              "{\"sample\": \"* **Inputs:** Each call to a ModelSelector includes a task description",
              "input size (e.g. document length",
              "number of files)",
              "the privacy tier (public",
              "sensitive",
              "confidential)",
              "latency budget",
              "and a cost cap.  These parameters come from the requesting agent (often a Board Agent or CommandChiefAgent).\\n* **Decision Graph:** The ModelSelector applies a decision graph:\\n  1. **Task classification** \u2013 Is this reasoning/planning",
              "bulk transformation",
              "code/data manipulation",
              "or something else?\\n  2. **Complexity estimation** \u2013 How large or intricate is the input?  This influences whether to use a bigger model or a lightweight one.\\n  3. **Model/Tool selection** \u2013 Choose from a catalogue of available models (remote APIs",
              "local models served via llama.cpp/Ollama",
              "code runners",
              "data converters) using he\"}"
            ],
            "spawn_policy": [
              "pack=PACK-9ca53e6b",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "MicroAgentStacks",
          "name": "MicroAgentStacks",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "kp RIU-3",
            "agent_id": "MicroAgentStacks",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-24114ed9",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "MicroAgentStacks",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "model_selector_agents.md",
            "source_rows_json": [
              "{\"sample\": \"- **Board Agents:** Request ModelSelector assistance when their tasks involve AI/ML.  They set budgets and specify privacy tiers.  The ModelSelector returns a plan and rationale.\\n- **MicroAgentStacks:** CommandChiefAgents invoke ModelSelectors inside their stacks when a task requires AI processing.  This ensures each stack uses consistent policies and optimal models.\\n- **NOA:** Maintains overarching policies for model selection (allowed licences",
              "vulnerability gates",
              "GPU quotas).  The ModelSelector enforces these policies and logs decisions back to NOA\u2019s audit trail.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-24114ed9",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "By delegating model/tool choice to a dedicated ModelSelectorAgent",
          "name": "By delegating model/tool choice to a dedicated ModelSelectorAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "qf DBJ",
            "agent_id": "By delegating model/tool choice to a dedicated ModelSelectorAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-ead9fea9",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-F",
            "display_name": "By delegating model/tool choice to a dedicated ModelSelectorAgent",
            "efg_requirements": [
              "gpu>=1",
              "vram>=8GB",
              "disk>=10GB",
              "net>=50Mbps"
            ],
            "epic": "F",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "model_selector_agents.md",
            "source_rows_json": [
              "{\"sample\": \"By delegating model/tool choice to a dedicated ModelSelectorAgent",
              "ark\u2011os\u2011noa keeps business logic and AI expertise separate",
              "resulting in better outcomes and traceable decisions.\\n\"}"
            ],
            "spawn_policy": [
              "pack=PACK-ead9fea9",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.f",
            "type": "Agent"
          }
        },
        {
          "id": "Telemetry Agent",
          "name": "Telemetry Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "oe IBT",
            "agent_id": "Telemetry Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-88389aa1",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Telemetry Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "backend.md",
            "source_rows_json": [
              "{\"sample\": \"1. **Build\u2011Proxy:** A lightweight service that proxies inner `docker build` and `nerdctl` commands to the outer BuildKit daemon.  It exposes a local socket inside the Capsule but forwards build requests externally",
              "avoiding duplicate layer storage.\\n2. **Service\u2011Mirror:** Watches inner service definitions and publishes corresponding services in the outer service mesh with mTLS and SLO configurations.  This allows inner services to be reachable and observable from the outer plane.\\n3. **Policy Agent (OPA):** Enforces egress rules",
              "resource quotas",
              "and other policies at the Capsule boundary.  It integrates with eBPF to block unauthorised traffic.\\n4. **Telemetry Agent:** Collects traces",
              "metrics and logs from the inner services and sidecars.  It forwards data to the central observability stack \"}"
            ],
            "spawn_policy": [
              "pack=PACK-88389aa1",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "ExecutiveCommanderChiefAgent",
          "name": "ExecutiveCommanderChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "vw MFS-8",
            "agent_id": "ExecutiveCommanderChiefAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-df6b24c4",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "ExecutiveCommanderChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Executive",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "noa.md",
            "source_rows_json": "{\"sample\": \"# NOA \u2014 ExecutiveCommanderChiefAgent\"}",
            "spawn_policy": [
              "pack=PACK-df6b24c4",
              "min_plane=Deployed",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "MicroAgentStacks",
          "name": "MicroAgentStacks",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "kp RIU-4",
            "agent_id": "MicroAgentStacks",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-24114ed9",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "MicroAgentStacks",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "noa.md",
            "source_rows_json": [
              "{\"sample\": \"NOA (sometimes called the **ExecutiveCommanderChiefAgent**) is the top\u2011level orchestrator of\\nthe **ark\u2011os\u2011noa** platform.  It acts like a CEO for the agent ecosystem: it translates\\nhigh\u2011level business goals into concrete plans",
              "delegates work to Board Agents and\\n**MicroAgentStacks**",
              "and ensures that every deliverable meets business",
              "technical",
              "and\\ncompliance requirements.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-24114ed9",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "ExecutiveCommanderChiefAgent",
          "name": "ExecutiveCommanderChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "vw MFS-9",
            "agent_id": "ExecutiveCommanderChiefAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-df6b24c4",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "ExecutiveCommanderChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Executive",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "noa.md",
            "source_rows_json": [
              "{\"sample\": \"NOA (sometimes called the **ExecutiveCommanderChiefAgent**) is the top\u2011level orchestrator of\\nthe **ark\u2011os\u2011noa** platform.  It acts like a CEO for the agent ecosystem: it translates\\nhigh\u2011level business goals into concrete plans",
              "delegates work to Board Agents and\\n**MicroAgentStacks**",
              "and ensures that every deliverable meets business",
              "technical",
              "and\\ncompliance requirements.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-df6b24c4",
              "min_plane=Deployed",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "MicroAgentStacks",
          "name": "MicroAgentStacks",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "kp RIU-5",
            "agent_id": "MicroAgentStacks",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-24114ed9",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "MicroAgentStacks",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "noa.md",
            "source_rows_json": [
              "{\"sample\": \"* **Inputs:** high\u2011level goals",
              "success criteria",
              "budgets",
              "SLAs",
              "risk appetite and\\n  constraints.  NOA normalises these into a **WorkPlan**.  Each plan captures tasks",
              "\\n  checkpoints",
              "deadlines and deliverables.\\n* **Outputs:** action plans",
              "stack assignments",
              "acceptance tests and post\u2011mortems.  For\\n  each goal NOA produces a package of artefacts (e.g. zip file and compiled PDF).\\n* **Control loop:** Sense \u2192 Plan \u2192 Act \u2192 Verify \u2192 Report.  NOA constantly senses\\n  progress and risks",
              "replans when necessary",
              "acts by spawning or destroying\\n  **MicroAgentStacks**",
              "verifies outputs against acceptance criteria",
              "and finally reports\\n  to the business owner.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-24114ed9",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Board Agents and MicroAgentStacks",
          "name": "Board Agents and MicroAgentStacks",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "fh QJZ",
            "agent_id": "Board Agents and MicroAgentStacks",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-4ebd1903",
            "category": "Micro-Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "Board Agents and MicroAgentStacks",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "noa.md",
            "source_rows_json": [
              "{\"sample\": \"1. **Disambiguate and decompose:** convert ambiguous goals into measurable objectives and\\n   step\u2011by\u2011step tasks.\\n2. **Resource allocation:** assign Board Agents and MicroAgentStacks based on domain\\n   expertise",
              "constraints and availability.\\n3. **Policy enforcement:** apply safety",
              "security and legal policies",
              "ensure no\\n   Docker\u2011in\u2011Docker (**Capsule/Full\u2011Illusion** pattern) and maintain audit logs.\\n4. **Model selection:** orchestrate **ModelSelectorAgents** to pick appropriate AI models\\n   for each task",
              "balancing accuracy",
              "latency and cost.\\n5. **Packaging & archiving:** guarantee that outputs are packaged into deliverable\\n   artefacts (zip + PDF) and stored internally.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-4ebd1903",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "MicroAgentStacks",
          "name": "MicroAgentStacks",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "kp RIU-6",
            "agent_id": "MicroAgentStacks",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-24114ed9",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "MicroAgentStacks",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "noa.md",
            "source_rows_json": [
              "{\"sample\": \"* **WorkPlan:** a structured representation of a goal \u2192 tasks \u2192 checkpoints \u2192 deliverables\\n  \u2192 review gates.\\n* **Assignment:** mapping between Board Agents",
              "MicroAgentStacks and tasks",
              "includes\\n  SLAs and ownership.\\n* **Trace:** evidence of inputs",
              "actions",
              "tools",
              "models and outputs for audit and\\n  reproducibility.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-24114ed9",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "MicroAgentStacks",
          "name": "MicroAgentStacks",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "kp RIU-7",
            "agent_id": "MicroAgentStacks",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-24114ed9",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "MicroAgentStacks",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_host-awareness_wiki.md",
            "source_rows_json": [
              "{\"sample\": \"## Integration Points\\n- **BoardAgents:** request stacks",
              "set SLAs",
              "consume EFG risk reports.  \\n- **Digest Agent:** builds SBOMs",
              "embeddings",
              "and knowledge graphs across code/data/CRMs/APIs/models.  \\n- **ModelSelectorAgents:** pick models/tooling based on EFG performance/cost/privacy signals.  \\n- **MicroAgentStacks:** use pre-staged environments",
              "export artifacts to MinIO",
              "publish traces to Postgres/pgvector.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-24114ed9",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Digest Agent",
          "name": "Digest Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "es FPS-2",
            "agent_id": "Digest Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-a7c4c5d1",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "Digest Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_host-awareness_wiki.md",
            "source_rows_json": [
              "{\"sample\": \"## Integration Points\\n- **BoardAgents:** request stacks",
              "set SLAs",
              "consume EFG risk reports.  \\n- **Digest Agent:** builds SBOMs",
              "embeddings",
              "and knowledge graphs across code/data/CRMs/APIs/models.  \\n- **ModelSelectorAgents:** pick models/tooling based on EFG performance/cost/privacy signals.  \\n- **MicroAgentStacks:** use pre-staged environments",
              "export artifacts to MinIO",
              "publish traces to Postgres/pgvector.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-a7c4c5d1",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "ExecutiveCommanderChiefAgent",
          "name": "ExecutiveCommanderChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "vw MFS-10",
            "agent_id": "ExecutiveCommanderChiefAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-df6b24c4",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "ExecutiveCommanderChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Executive",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": "{\"sample\": \"# NOA \u2014 ExecutiveCommanderChiefAgent\"}",
            "spawn_policy": [
              "pack=PACK-df6b24c4",
              "min_plane=Deployed",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "MicroAgentStacks",
          "name": "MicroAgentStacks",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "kp RIU-8",
            "agent_id": "MicroAgentStacks",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-24114ed9",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "MicroAgentStacks",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"NOA (sometimes called the **ExecutiveCommanderChiefAgent**) is the top\u2011level orchestrator of\\nthe **ark\u2011os\u2011noa** platform.  It acts like a CEO for the agent ecosystem: it translates\\nhigh\u2011level business goals into concrete plans",
              "delegates work to Board Agents and\\n**MicroAgentStacks**",
              "and ensures that every deliverable meets business",
              "technical",
              "and\\ncompliance requirements.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-24114ed9",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "ExecutiveCommanderChiefAgent",
          "name": "ExecutiveCommanderChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "vw MFS-11",
            "agent_id": "ExecutiveCommanderChiefAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-df6b24c4",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "ExecutiveCommanderChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Executive",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"NOA (sometimes called the **ExecutiveCommanderChiefAgent**) is the top\u2011level orchestrator of\\nthe **ark\u2011os\u2011noa** platform.  It acts like a CEO for the agent ecosystem: it translates\\nhigh\u2011level business goals into concrete plans",
              "delegates work to Board Agents and\\n**MicroAgentStacks**",
              "and ensures that every deliverable meets business",
              "technical",
              "and\\ncompliance requirements.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-df6b24c4",
              "min_plane=Deployed",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "MicroAgentStacks",
          "name": "MicroAgentStacks",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "kp RIU-9",
            "agent_id": "MicroAgentStacks",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-24114ed9",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "MicroAgentStacks",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"* **Inputs:** high\u2011level goals",
              "success criteria",
              "budgets",
              "SLAs",
              "risk appetite and\\n  constraints.  NOA normalises these into a **WorkPlan**.  Each plan captures tasks",
              "\\n  checkpoints",
              "deadlines and deliverables.\\n* **Outputs:** action plans",
              "stack assignments",
              "acceptance tests and post\u2011mortems.  For\\n  each goal NOA produces a package of artefacts (e.g. zip file and compiled PDF).\\n* **Control loop:** Sense \u2192 Plan \u2192 Act \u2192 Verify \u2192 Report.  NOA constantly senses\\n  progress and risks",
              "replans when necessary",
              "acts by spawning or destroying\\n  **MicroAgentStacks**",
              "verifies outputs against acceptance criteria",
              "and finally reports\\n  to the business owner.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-24114ed9",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Board Agents and MicroAgentStacks",
          "name": "Board Agents and MicroAgentStacks",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "fh QJZ-2",
            "agent_id": "Board Agents and MicroAgentStacks",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-4ebd1903",
            "category": "Micro-Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "Board Agents and MicroAgentStacks",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"1. **Disambiguate and decompose:** convert ambiguous goals into measurable objectives and\\n   step\u2011by\u2011step tasks.\\n2. **Resource allocation:** assign Board Agents and MicroAgentStacks based on domain\\n   expertise",
              "constraints and availability.\\n3. **Policy enforcement:** apply safety",
              "security and legal policies",
              "ensure no\\n   Docker\u2011in\u2011Docker (**Capsule/Full\u2011Illusion** pattern) and maintain audit logs.\\n4. **Model selection:** orchestrate **ModelSelectorAgents** to pick appropriate AI models\\n   for each task",
              "balancing accuracy",
              "latency and cost.\\n5. **Packaging & archiving:** guarantee that outputs are packaged into deliverable\\n   artefacts (zip + PDF) and stored internally.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-4ebd1903",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "MicroAgentStacks",
          "name": "MicroAgentStacks",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "kp RIU-10",
            "agent_id": "MicroAgentStacks",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-24114ed9",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "MicroAgentStacks",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"* **WorkPlan:** a structured representation of a goal \u2192 tasks \u2192 checkpoints \u2192 deliverables\\n  \u2192 review gates.\\n* **Assignment:** mapping between Board Agents",
              "MicroAgentStacks and tasks",
              "includes\\n  SLAs and ownership.\\n* **Trace:** evidence of inputs",
              "actions",
              "tools",
              "models and outputs for audit and\\n  reproducibility.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-24114ed9",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "MicroAgentStacks",
          "name": "MicroAgentStacks",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "kp RIU-11",
            "agent_id": "MicroAgentStacks",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-24114ed9",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "MicroAgentStacks",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"The **Board Agents** sit at the top of the **ark\u2011os\u2011noa** organisation just below NOA.  They are analogous to an executive board in a company: each agent owns a domain (strategy",
              "operations",
              "finance",
              "legal",
              "security",
              "partnerships",
              "research) and has authority to commission **MicroAgentStacks** to execute work.  By design they are *few in number* but *broad in scope*\u2014their purpose is to translate NOA\u2019s vision into specific missions",
              "ensure alignment with ElementArk/DeFlex\u2019s business model",
              "and provide governance across all stacks and agents.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-24114ed9",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Growth/Partnerships Agent",
          "name": "Growth/Partnerships Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ij VCO",
            "agent_id": "Growth/Partnerships Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-ddb18977",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Growth/Partnerships Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"- **Strategy/CTO Agent** \u2013 Sets technical direction: system architecture",
              "Capsule (Full\u2011Illusion) adoption",
              "environment policies (no Docker\u2011in\u2011Docker)",
              "cohesion across services.\\n- **COO Agent** \u2013 Owns operational runbooks",
              "SLAs",
              "scheduling and change management.  Coordinates delivery timelines and resource utilisation.\\n- **CFO/FinOps Agent** \u2013 Manages budgets and spend telemetry.  Optimises cost across compute",
              "storage and model usage.\\n- **Legal/Compliance Agent** \u2013 Ensures licence compliance",
              "data governance",
              "export controls and regulatory adherence.  Maintains policy frameworks.\\n- **Security Agent** \u2013 Enforces secrets management",
              "supply\u2011chain security",
              "SBOM attestation and vulnerability thresholds.  Gatekeeper for risk.\\n- **Growth/Partnerships Agent** \u2013 Curates ingestion roadmaps for rep\"}"
            ],
            "spawn_policy": [
              "pack=PACK-ddb18977",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "COO Agent",
          "name": "COO Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "xf AYN",
            "agent_id": "COO Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-29d06ba7",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "COO Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"- **Strategy/CTO Agent** \u2013 Sets technical direction: system architecture",
              "Capsule (Full\u2011Illusion) adoption",
              "environment policies (no Docker\u2011in\u2011Docker)",
              "cohesion across services.\\n- **COO Agent** \u2013 Owns operational runbooks",
              "SLAs",
              "scheduling and change management.  Coordinates delivery timelines and resource utilisation.\\n- **CFO/FinOps Agent** \u2013 Manages budgets and spend telemetry.  Optimises cost across compute",
              "storage and model usage.\\n- **Legal/Compliance Agent** \u2013 Ensures licence compliance",
              "data governance",
              "export controls and regulatory adherence.  Maintains policy frameworks.\\n- **Security Agent** \u2013 Enforces secrets management",
              "supply\u2011chain security",
              "SBOM attestation and vulnerability thresholds.  Gatekeeper for risk.\\n- **Growth/Partnerships Agent** \u2013 Curates ingestion roadmaps for rep\"}"
            ],
            "spawn_policy": [
              "pack=PACK-29d06ba7",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Legal/Compliance Agent",
          "name": "Legal/Compliance Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "rd BLD",
            "agent_id": "Legal/Compliance Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-4ffaa7e7",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Legal/Compliance Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"- **Strategy/CTO Agent** \u2013 Sets technical direction: system architecture",
              "Capsule (Full\u2011Illusion) adoption",
              "environment policies (no Docker\u2011in\u2011Docker)",
              "cohesion across services.\\n- **COO Agent** \u2013 Owns operational runbooks",
              "SLAs",
              "scheduling and change management.  Coordinates delivery timelines and resource utilisation.\\n- **CFO/FinOps Agent** \u2013 Manages budgets and spend telemetry.  Optimises cost across compute",
              "storage and model usage.\\n- **Legal/Compliance Agent** \u2013 Ensures licence compliance",
              "data governance",
              "export controls and regulatory adherence.  Maintains policy frameworks.\\n- **Security Agent** \u2013 Enforces secrets management",
              "supply\u2011chain security",
              "SBOM attestation and vulnerability thresholds.  Gatekeeper for risk.\\n- **Growth/Partnerships Agent** \u2013 Curates ingestion roadmaps for rep\"}"
            ],
            "spawn_policy": [
              "pack=PACK-4ffaa7e7",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Security Agent",
          "name": "Security Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "mr YWX-2",
            "agent_id": "Security Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-bd71ef60",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "Security Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=2GB",
              "disk>=2GB",
              "net>=10Mbps"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"- **Strategy/CTO Agent** \u2013 Sets technical direction: system architecture",
              "Capsule (Full\u2011Illusion) adoption",
              "environment policies (no Docker\u2011in\u2011Docker)",
              "cohesion across services.\\n- **COO Agent** \u2013 Owns operational runbooks",
              "SLAs",
              "scheduling and change management.  Coordinates delivery timelines and resource utilisation.\\n- **CFO/FinOps Agent** \u2013 Manages budgets and spend telemetry.  Optimises cost across compute",
              "storage and model usage.\\n- **Legal/Compliance Agent** \u2013 Ensures licence compliance",
              "data governance",
              "export controls and regulatory adherence.  Maintains policy frameworks.\\n- **Security Agent** \u2013 Enforces secrets management",
              "supply\u2011chain security",
              "SBOM attestation and vulnerability thresholds.  Gatekeeper for risk.\\n- **Growth/Partnerships Agent** \u2013 Curates ingestion roadmaps for rep\"}"
            ],
            "spawn_policy": [
              "pack=PACK-bd71ef60",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "CFO/FinOps Agent",
          "name": "CFO/FinOps Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "vj BWK",
            "agent_id": "CFO/FinOps Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-9d07116f",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "CFO/FinOps Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"- **Strategy/CTO Agent** \u2013 Sets technical direction: system architecture",
              "Capsule (Full\u2011Illusion) adoption",
              "environment policies (no Docker\u2011in\u2011Docker)",
              "cohesion across services.\\n- **COO Agent** \u2013 Owns operational runbooks",
              "SLAs",
              "scheduling and change management.  Coordinates delivery timelines and resource utilisation.\\n- **CFO/FinOps Agent** \u2013 Manages budgets and spend telemetry.  Optimises cost across compute",
              "storage and model usage.\\n- **Legal/Compliance Agent** \u2013 Ensures licence compliance",
              "data governance",
              "export controls and regulatory adherence.  Maintains policy frameworks.\\n- **Security Agent** \u2013 Enforces secrets management",
              "supply\u2011chain security",
              "SBOM attestation and vulnerability thresholds.  Gatekeeper for risk.\\n- **Growth/Partnerships Agent** \u2013 Curates ingestion roadmaps for rep\"}"
            ],
            "spawn_policy": [
              "pack=PACK-9d07116f",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Strategy/CTO Agent",
          "name": "Strategy/CTO Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "hn ETD",
            "agent_id": "Strategy/CTO Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-b20083ae",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Strategy/CTO Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"- **Strategy/CTO Agent** \u2013 Sets technical direction: system architecture",
              "Capsule (Full\u2011Illusion) adoption",
              "environment policies (no Docker\u2011in\u2011Docker)",
              "cohesion across services.\\n- **COO Agent** \u2013 Owns operational runbooks",
              "SLAs",
              "scheduling and change management.  Coordinates delivery timelines and resource utilisation.\\n- **CFO/FinOps Agent** \u2013 Manages budgets and spend telemetry.  Optimises cost across compute",
              "storage and model usage.\\n- **Legal/Compliance Agent** \u2013 Ensures licence compliance",
              "data governance",
              "export controls and regulatory adherence.  Maintains policy frameworks.\\n- **Security Agent** \u2013 Enforces secrets management",
              "supply\u2011chain security",
              "SBOM attestation and vulnerability thresholds.  Gatekeeper for risk.\\n- **Growth/Partnerships Agent** \u2013 Curates ingestion roadmaps for rep\"}"
            ],
            "spawn_policy": [
              "pack=PACK-b20083ae",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Digest Agent",
          "name": "Digest Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "es FPS-3",
            "agent_id": "Digest Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-a7c4c5d1",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "Digest Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"- **Strategy/CTO Agent** \u2013 Sets technical direction: system architecture",
              "Capsule (Full\u2011Illusion) adoption",
              "environment policies (no Docker\u2011in\u2011Docker)",
              "cohesion across services.\\n- **COO Agent** \u2013 Owns operational runbooks",
              "SLAs",
              "scheduling and change management.  Coordinates delivery timelines and resource utilisation.\\n- **CFO/FinOps Agent** \u2013 Manages budgets and spend telemetry.  Optimises cost across compute",
              "storage and model usage.\\n- **Legal/Compliance Agent** \u2013 Ensures licence compliance",
              "data governance",
              "export controls and regulatory adherence.  Maintains policy frameworks.\\n- **Security Agent** \u2013 Enforces secrets management",
              "supply\u2011chain security",
              "SBOM attestation and vulnerability thresholds.  Gatekeeper for risk.\\n- **Growth/Partnerships Agent** \u2013 Curates ingestion roadmaps for rep\"}"
            ],
            "spawn_policy": [
              "pack=PACK-a7c4c5d1",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "Board Agent",
          "name": "Board Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "jm MDQ-2",
            "agent_id": "Board Agent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-796c1e54",
            "category": "Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Board Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"1. **Delegation:** Board Agents can spin up one or more **MicroAgentStacks** to accomplish tasks.  Each stack has its own **CommandChiefAgent** orchestrating the details",
              "leaving the Board Agent to focus on strategy and oversight.\\n2. **Specialisation:** When a task requires sophisticated model selection",
              "a Board Agent requests a **ModelSelectorAgent** to choose the most appropriate AI model or tool.  This ensures tasks are executed with the right balance of cost",
              "latency and accuracy.\\n3. **Governance:** Board Agents enforce policies across stacks\u2014licensing",
              "vulnerability gates",
              "security posture",
              "and budget limits.  They maintain decision logs and risk registers for audit.\\n4. **Parallelism:** Multiple stacks can run concurrently.  Board Agents schedule tasks to maximise throughput while res\"}"
            ],
            "spawn_policy": [
              "pack=PACK-796c1e54",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "CommandChiefAgent",
          "name": "CommandChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "jj CON-2",
            "agent_id": "CommandChiefAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-299e0062",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "CommandChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"1. **Delegation:** Board Agents can spin up one or more **MicroAgentStacks** to accomplish tasks.  Each stack has its own **CommandChiefAgent** orchestrating the details",
              "leaving the Board Agent to focus on strategy and oversight.\\n2. **Specialisation:** When a task requires sophisticated model selection",
              "a Board Agent requests a **ModelSelectorAgent** to choose the most appropriate AI model or tool.  This ensures tasks are executed with the right balance of cost",
              "latency and accuracy.\\n3. **Governance:** Board Agents enforce policies across stacks\u2014licensing",
              "vulnerability gates",
              "security posture",
              "and budget limits.  They maintain decision logs and risk registers for audit.\\n4. **Parallelism:** Multiple stacks can run concurrently.  Board Agents schedule tasks to maximise throughput while res\"}"
            ],
            "spawn_policy": [
              "pack=PACK-299e0062",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "ModelSelectorAgent",
          "name": "ModelSelectorAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "fl YEL-3",
            "agent_id": "ModelSelectorAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-20c0247c",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-F",
            "display_name": "ModelSelectorAgent",
            "efg_requirements": [
              "gpu>=1",
              "vram>=8GB",
              "disk>=10GB",
              "net>=50Mbps"
            ],
            "epic": "F",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"1. **Delegation:** Board Agents can spin up one or more **MicroAgentStacks** to accomplish tasks.  Each stack has its own **CommandChiefAgent** orchestrating the details",
              "leaving the Board Agent to focus on strategy and oversight.\\n2. **Specialisation:** When a task requires sophisticated model selection",
              "a Board Agent requests a **ModelSelectorAgent** to choose the most appropriate AI model or tool.  This ensures tasks are executed with the right balance of cost",
              "latency and accuracy.\\n3. **Governance:** Board Agents enforce policies across stacks\u2014licensing",
              "vulnerability gates",
              "security posture",
              "and budget limits.  They maintain decision logs and risk registers for audit.\\n4. **Parallelism:** Multiple stacks can run concurrently.  Board Agents schedule tasks to maximise throughput while res\"}"
            ],
            "spawn_policy": [
              "pack=PACK-20c0247c",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.f",
            "type": "Agent"
          }
        },
        {
          "id": "MicroAgentStacks",
          "name": "MicroAgentStacks",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "kp RIU-12",
            "agent_id": "MicroAgentStacks",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-24114ed9",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "MicroAgentStacks",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"1. **Delegation:** Board Agents can spin up one or more **MicroAgentStacks** to accomplish tasks.  Each stack has its own **CommandChiefAgent** orchestrating the details",
              "leaving the Board Agent to focus on strategy and oversight.\\n2. **Specialisation:** When a task requires sophisticated model selection",
              "a Board Agent requests a **ModelSelectorAgent** to choose the most appropriate AI model or tool.  This ensures tasks are executed with the right balance of cost",
              "latency and accuracy.\\n3. **Governance:** Board Agents enforce policies across stacks\u2014licensing",
              "vulnerability gates",
              "security posture",
              "and budget limits.  They maintain decision logs and risk registers for audit.\\n4. **Parallelism:** Multiple stacks can run concurrently.  Board Agents schedule tasks to maximise throughput while res\"}"
            ],
            "spawn_policy": [
              "pack=PACK-24114ed9",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "MicroAgentStacks",
          "name": "MicroAgentStacks",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "kp RIU-13",
            "agent_id": "MicroAgentStacks",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-24114ed9",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "MicroAgentStacks",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"- **Research & analysis tools:** for web search",
              "code parsing and data exploration within the current year\u2019s context.\\n- **Change control & telemetry:** CI/CD gates",
              "policy engines (e.g. OPA)",
              "vulnerability scanners and cost dashboards.\\n- **Observability feeds:** real\u2011time traces",
              "metrics and logs aggregated from MicroAgentStacks and sidecars.  These signals inform decisions on scaling up/down stacks or raising alerts.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-24114ed9",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "The Digest Agent",
          "name": "The Digest Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "lp TKI",
            "agent_id": "The Digest Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-919bde43",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "The Digest Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"* **NOA:** Board Agents receive missions from NOA and report status back.  They provide domain expertise and enforce governance while letting NOA handle high\u2011level planning and cross\u2011domain coordination.\\n* **MicroAgentStacks:** Board Agents are the owners of stacks.  They commission stacks to achieve defined objectives and decommission them when tasks complete.  Each stack operates autonomously but reports progress to its Board Agent.\\n* **ModelSelectorAgents:** When tasks require AI model inference",
              "Board Agents request a ModelSelector to choose among local or hosted models.  The selection is recorded in the trace for audit.\\n* **Digest Agent:** The Digest Agent is part of the Board but behaves like an R&D lab\u2014collecting raw information",
              "synthesising knowledge graphs and summarising finding\"}"
            ],
            "spawn_policy": [
              "pack=PACK-919bde43",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "Each stack operates autonomously but reports progress to its Board Agent",
          "name": "Each stack operates autonomously but reports progress to its Board Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "kh ROJ",
            "agent_id": "Each stack operates autonomously but reports progress to its Board Agent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-d499d363",
            "category": "Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Each stack operates autonomously but reports progress to its Board Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"* **NOA:** Board Agents receive missions from NOA and report status back.  They provide domain expertise and enforce governance while letting NOA handle high\u2011level planning and cross\u2011domain coordination.\\n* **MicroAgentStacks:** Board Agents are the owners of stacks.  They commission stacks to achieve defined objectives and decommission them when tasks complete.  Each stack operates autonomously but reports progress to its Board Agent.\\n* **ModelSelectorAgents:** When tasks require AI model inference",
              "Board Agents request a ModelSelector to choose among local or hosted models.  The selection is recorded in the trace for audit.\\n* **Digest Agent:** The Digest Agent is part of the Board but behaves like an R&D lab\u2014collecting raw information",
              "synthesising knowledge graphs and summarising finding\"}"
            ],
            "spawn_policy": [
              "pack=PACK-d499d363",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "MicroAgentStacks",
          "name": "MicroAgentStacks",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "kp RIU-14",
            "agent_id": "MicroAgentStacks",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-24114ed9",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "MicroAgentStacks",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"* **NOA:** Board Agents receive missions from NOA and report status back.  They provide domain expertise and enforce governance while letting NOA handle high\u2011level planning and cross\u2011domain coordination.\\n* **MicroAgentStacks:** Board Agents are the owners of stacks.  They commission stacks to achieve defined objectives and decommission them when tasks complete.  Each stack operates autonomously but reports progress to its Board Agent.\\n* **ModelSelectorAgents:** When tasks require AI model inference",
              "Board Agents request a ModelSelector to choose among local or hosted models.  The selection is recorded in the trace for audit.\\n* **Digest Agent:** The Digest Agent is part of the Board but behaves like an R&D lab\u2014collecting raw information",
              "synthesising knowledge graphs and summarising finding\"}"
            ],
            "spawn_policy": [
              "pack=PACK-24114ed9",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Digest Agent",
          "name": "Digest Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "es FPS-4",
            "agent_id": "Digest Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-a7c4c5d1",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "Digest Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"* **NOA:** Board Agents receive missions from NOA and report status back.  They provide domain expertise and enforce governance while letting NOA handle high\u2011level planning and cross\u2011domain coordination.\\n* **MicroAgentStacks:** Board Agents are the owners of stacks.  They commission stacks to achieve defined objectives and decommission them when tasks complete.  Each stack operates autonomously but reports progress to its Board Agent.\\n* **ModelSelectorAgents:** When tasks require AI model inference",
              "Board Agents request a ModelSelector to choose among local or hosted models.  The selection is recorded in the trace for audit.\\n* **Digest Agent:** The Digest Agent is part of the Board but behaves like an R&D lab\u2014collecting raw information",
              "synthesising knowledge graphs and summarising finding\"}"
            ],
            "spawn_policy": [
              "pack=PACK-a7c4c5d1",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "ModelSelectorAgent",
          "name": "ModelSelectorAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "fl YEL-4",
            "agent_id": "ModelSelectorAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-20c0247c",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-F",
            "display_name": "ModelSelectorAgent",
            "efg_requirements": [
              "gpu>=1",
              "vram>=8GB",
              "disk>=10GB",
              "net>=50Mbps"
            ],
            "epic": "F",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"A **ModelSelectorAgent** specialises in selecting the best AI model or tool for a given task.  In the context of ark\u2011os\u2011noa",
              "tasks vary widely\u2014from reasoning and planning",
              "to code analysis",
              "to data transformation.  Selecting the wrong model can waste resources or compromise privacy.  The ModelSelector provides an intelligent arbitration layer",
              "helping Board Agents and **MicroAgentStacks** achieve high quality results while respecting cost",
              "latency and privacy constraints.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-20c0247c",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.f",
            "type": "Agent"
          }
        },
        {
          "id": "MicroAgentStacks",
          "name": "MicroAgentStacks",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "kp RIU-15",
            "agent_id": "MicroAgentStacks",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-24114ed9",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "MicroAgentStacks",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"A **ModelSelectorAgent** specialises in selecting the best AI model or tool for a given task.  In the context of ark\u2011os\u2011noa",
              "tasks vary widely\u2014from reasoning and planning",
              "to code analysis",
              "to data transformation.  Selecting the wrong model can waste resources or compromise privacy.  The ModelSelector provides an intelligent arbitration layer",
              "helping Board Agents and **MicroAgentStacks** achieve high quality results while respecting cost",
              "latency and privacy constraints.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-24114ed9",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Board Agent or CommandChiefAgent",
          "name": "Board Agent or CommandChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "jf UBC-2",
            "agent_id": "Board Agent or CommandChiefAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-9ca53e6b",
            "category": "Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Board Agent or CommandChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"* **Inputs:** Each call to a ModelSelector includes a task description",
              "input size (e.g. document length",
              "number of files)",
              "the privacy tier (public",
              "sensitive",
              "confidential)",
              "latency budget",
              "and a cost cap.  These parameters come from the requesting agent (often a Board Agent or CommandChiefAgent).\\n* **Decision Graph:** The ModelSelector applies a decision graph:\\n  1. **Task classification** \u2013 Is this reasoning/planning",
              "bulk transformation",
              "code/data manipulation",
              "or something else?\\n  2. **Complexity estimation** \u2013 How large or intricate is the input?  This influences whether to use a bigger model or a lightweight one.\\n  3. **Model/Tool selection** \u2013 Choose from a catalogue of available models (remote APIs",
              "local models served via llama.cpp/Ollama",
              "code runners",
              "data converters) using he\"}"
            ],
            "spawn_policy": [
              "pack=PACK-9ca53e6b",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "MicroAgentStacks",
          "name": "MicroAgentStacks",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "kp RIU-16",
            "agent_id": "MicroAgentStacks",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-24114ed9",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "MicroAgentStacks",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"- **Board Agents:** Request ModelSelector assistance when their tasks involve AI/ML.  They set budgets and specify privacy tiers.  The ModelSelector returns a plan and rationale.\\n- **MicroAgentStacks:** CommandChiefAgents invoke ModelSelectors inside their stacks when a task requires AI processing.  This ensures each stack uses consistent policies and optimal models.\\n- **NOA:** Maintains overarching policies for model selection (allowed licences",
              "vulnerability gates",
              "GPU quotas).  The ModelSelector enforces these policies and logs decisions back to NOA\u2019s audit trail.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-24114ed9",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "MicroAgentStack",
          "name": "MicroAgentStack",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "qi KZU-5",
            "agent_id": "MicroAgentStack",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-d2c954bc",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "MicroAgentStack",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"By delegating model/tool choice to a dedicated ModelSelectorAgent",
              "ark\u2011os\u2011noa keeps business logic and AI expertise separate",
              "resulting in better outcomes and traceable decisions.\\n# MicroAgentStack \u2014 Cooperative Work Pods\"}"
            ],
            "spawn_policy": [
              "pack=PACK-d2c954bc",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "By delegating model/tool choice to a dedicated ModelSelectorAgent",
          "name": "By delegating model/tool choice to a dedicated ModelSelectorAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "qf DBJ-2",
            "agent_id": "By delegating model/tool choice to a dedicated ModelSelectorAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-ead9fea9",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-F",
            "display_name": "By delegating model/tool choice to a dedicated ModelSelectorAgent",
            "efg_requirements": [
              "gpu>=1",
              "vram>=8GB",
              "disk>=10GB",
              "net>=50Mbps"
            ],
            "epic": "F",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"By delegating model/tool choice to a dedicated ModelSelectorAgent",
              "ark\u2011os\u2011noa keeps business logic and AI expertise separate",
              "resulting in better outcomes and traceable decisions.\\n# MicroAgentStack \u2014 Cooperative Work Pods\"}"
            ],
            "spawn_policy": [
              "pack=PACK-ead9fea9",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.f",
            "type": "Agent"
          }
        },
        {
          "id": "MicroAgentStack",
          "name": "MicroAgentStack",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "qi KZU-6",
            "agent_id": "MicroAgentStack",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-d2c954bc",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "MicroAgentStack",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"A **MicroAgentStack** is a deployable cluster of cooperative agents assembled to accomplish a bounded objective.  Think of it as a project team spun up on demand: each stack has its own **CommandChiefAgent** (the stack master)",
              "a set of specialised Operators",
              "Adapters and Guards",
              "and a dedicated workspace.  Stacks can be created",
              "scaled and destroyed rapidly",
              "making them the primary execution units within ark\u2011os\u2011noa.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-d2c954bc",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "CommandChiefAgent",
          "name": "CommandChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "jj CON-3",
            "agent_id": "CommandChiefAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-299e0062",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "CommandChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"A **MicroAgentStack** is a deployable cluster of cooperative agents assembled to accomplish a bounded objective.  Think of it as a project team spun up on demand: each stack has its own **CommandChiefAgent** (the stack master)",
              "a set of specialised Operators",
              "Adapters and Guards",
              "and a dedicated workspace.  Stacks can be created",
              "scaled and destroyed rapidly",
              "making them the primary execution units within ark\u2011os\u2011noa.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-299e0062",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "CommandChiefAgent",
          "name": "CommandChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "jj CON-4",
            "agent_id": "CommandChiefAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-299e0062",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "CommandChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"* **CommandChiefAgent (Stack Master):** Orchestrates the stack",
              "decomposes tasks",
              "assigns work to subordinate agents",
              "monitors progress",
              "resolves conflicts and enforces SLAs.\\n* **Operators:** Specialised agents that perform specific functions.  Examples include code runners (execute code)",
              "data wranglers (transform data)",
              "doc generators (produce reports)",
              "testers (run unit/integration tests) and packagers (build zips",
              "PDFs).\\n* **Adapters:** Connectors to external systems (repos",
              "CRMs",
              "APIs) and publishers to internal services (registry",
              "MinIO",
              "Postgres).  Adapters abstract away details like auth and rate\u2011limits.\\n* **Guards:** Policy enforcement points\u2014security scanners",
              "licence checkers",
              "quality gates.  They ensure the stack adheres to policies defined by NOA and the Board Agents.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-299e0062",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Board Agent",
          "name": "Board Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "jm MDQ-3",
            "agent_id": "Board Agent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-796c1e54",
            "category": "Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Board Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"1. **Bootstrap:**  Given inputs (e.g. repo URL",
              "CRM base URL",
              "model list)",
              "the CommandChiefAgent creates a **WorkPlan**",
              "prepares the environment and mounts necessary sidecars.  It avoids Docker\u2011in\u2011Docker by using **Capsule** sidecars to talk to the outer BuildKit/containerd environment\u301043537238352704\u2020L1068-L1088\u3011.\\n2. **Execute:**  The stack runs its Operators in parallel where possible.  Retrying tasks with exponential backoff ensures resilience",
              "failures trigger controlled retries or escalation to the Board Agent.\\n3. **Validate:**  Once tasks finish",
              "Guards run acceptance tests (e.g. unit tests",
              "SBOM scans",
              "licence checks) and produce human\u2011readable summaries.  If acceptance criteria fail",
              "the stack either retries or fails the WorkPlan.\\n4. **Package:**  On success",
              "the stack assembles ou\"}"
            ],
            "spawn_policy": [
              "pack=PACK-796c1e54",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "CommandChiefAgent",
          "name": "CommandChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "jj CON-5",
            "agent_id": "CommandChiefAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-299e0062",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "CommandChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"1. **Bootstrap:**  Given inputs (e.g. repo URL",
              "CRM base URL",
              "model list)",
              "the CommandChiefAgent creates a **WorkPlan**",
              "prepares the environment and mounts necessary sidecars.  It avoids Docker\u2011in\u2011Docker by using **Capsule** sidecars to talk to the outer BuildKit/containerd environment\u301043537238352704\u2020L1068-L1088\u3011.\\n2. **Execute:**  The stack runs its Operators in parallel where possible.  Retrying tasks with exponential backoff ensures resilience",
              "failures trigger controlled retries or escalation to the Board Agent.\\n3. **Validate:**  Once tasks finish",
              "Guards run acceptance tests (e.g. unit tests",
              "SBOM scans",
              "licence checks) and produce human\u2011readable summaries.  If acceptance criteria fail",
              "the stack either retries or fails the WorkPlan.\\n4. **Package:**  On success",
              "the stack assembles ou\"}"
            ],
            "spawn_policy": [
              "pack=PACK-299e0062",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "CommandChiefAgent",
          "name": "CommandChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "jj CON-6",
            "agent_id": "CommandChiefAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-299e0062",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "CommandChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"* **Board Agents:** Create and oversee stacks.  Each stack reports to its Board Agent.  Board Agents can run multiple stacks in parallel.\\n* **ModelSelectorAgents:** When a stack requires AI processing",
              "the CommandChiefAgent requests a ModelSelector to choose the appropriate model and logs the rationale.\\n* **Digest Agent:** Often uses MicroAgentStacks to perform large\u2011scale digestions across many repos or datasets.  Each stack digests one or more sources and returns results to the Digest Agent.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-299e0062",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Each stack reports to its Board Agent",
          "name": "Each stack reports to its Board Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "sw PTK-2",
            "agent_id": "Each stack reports to its Board Agent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-bc2ff087",
            "category": "Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Each stack reports to its Board Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"* **Board Agents:** Create and oversee stacks.  Each stack reports to its Board Agent.  Board Agents can run multiple stacks in parallel.\\n* **ModelSelectorAgents:** When a stack requires AI processing",
              "the CommandChiefAgent requests a ModelSelector to choose the appropriate model and logs the rationale.\\n* **Digest Agent:** Often uses MicroAgentStacks to perform large\u2011scale digestions across many repos or datasets.  Each stack digests one or more sources and returns results to the Digest Agent.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-bc2ff087",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Often uses MicroAgentStacks",
          "name": "Often uses MicroAgentStacks",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "kr KFW-2",
            "agent_id": "Often uses MicroAgentStacks",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-fe076a0d",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "Often uses MicroAgentStacks",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"* **Board Agents:** Create and oversee stacks.  Each stack reports to its Board Agent.  Board Agents can run multiple stacks in parallel.\\n* **ModelSelectorAgents:** When a stack requires AI processing",
              "the CommandChiefAgent requests a ModelSelector to choose the appropriate model and logs the rationale.\\n* **Digest Agent:** Often uses MicroAgentStacks to perform large\u2011scale digestions across many repos or datasets.  Each stack digests one or more sources and returns results to the Digest Agent.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-fe076a0d",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Digest Agent",
          "name": "Digest Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "es FPS-5",
            "agent_id": "Digest Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-a7c4c5d1",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "Digest Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"* **Board Agents:** Create and oversee stacks.  Each stack reports to its Board Agent.  Board Agents can run multiple stacks in parallel.\\n* **ModelSelectorAgents:** When a stack requires AI processing",
              "the CommandChiefAgent requests a ModelSelector to choose the appropriate model and logs the rationale.\\n* **Digest Agent:** Often uses MicroAgentStacks to perform large\u2011scale digestions across many repos or datasets.  Each stack digests one or more sources and returns results to the Digest Agent.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-a7c4c5d1",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "Each stack digests one or more sources and returns results to the Digest Agent",
          "name": "Each stack digests one or more sources and returns results to the Digest Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ce YFE-2",
            "agent_id": "Each stack digests one or more sources and returns results to the Digest Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-9332d4db",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "Each stack digests one or more sources and returns results to the Digest Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"* **Board Agents:** Create and oversee stacks.  Each stack reports to its Board Agent.  Board Agents can run multiple stacks in parallel.\\n* **ModelSelectorAgents:** When a stack requires AI processing",
              "the CommandChiefAgent requests a ModelSelector to choose the appropriate model and logs the rationale.\\n* **Digest Agent:** Often uses MicroAgentStacks to perform large\u2011scale digestions across many repos or datasets.  Each stack digests one or more sources and returns results to the Digest Agent.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-9332d4db",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "MicroAgentStacks",
          "name": "MicroAgentStacks",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "kp RIU-17",
            "agent_id": "MicroAgentStacks",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-24114ed9",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "MicroAgentStacks",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"MicroAgentStacks bring structure",
              "scalability and reliability to ark\u2011os\u2011noa\u2019s execution model.  By isolating work into bounded pods",
              "the system can handle complex",
              "parallel workflows without turning into a monolith.\\n# Digest Agent \u2014 R&D Engine for ark\u2011os\u2011noa\"}"
            ],
            "spawn_policy": [
              "pack=PACK-24114ed9",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Digest Agent",
          "name": "Digest Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "es FPS-6",
            "agent_id": "Digest Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-a7c4c5d1",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "Digest Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"MicroAgentStacks bring structure",
              "scalability and reliability to ark\u2011os\u2011noa\u2019s execution model.  By isolating work into bounded pods",
              "the system can handle complex",
              "parallel workflows without turning into a monolith.\\n# Digest Agent \u2014 R&D Engine for ark\u2011os\u2011noa\"}"
            ],
            "spawn_policy": [
              "pack=PACK-a7c4c5d1",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "MicroAgentStacks",
          "name": "MicroAgentStacks",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "kp RIU-18",
            "agent_id": "MicroAgentStacks",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-24114ed9",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "MicroAgentStacks",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"The **Digest Agent** operates as the research and development arm of the Board Agents.  Its primary mission is to *\u201cdigest everything\u201d*\u2014code repositories",
              "datasets",
              "documents",
              "APIs",
              "SaaS systems (including live CRMs) and even AI models.  By analysing these sources",
              "the Digest Agent extracts structured knowledge",
              "builds semantic indices",
              "and surfaces insights that inform strategic decisions.  Though part of the Board",
              "it behaves like a self\u2011contained lab",
              "spinning up **MicroAgentStacks** to perform large\u2011scale digestions.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-24114ed9",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Digest Agent",
          "name": "Digest Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "es FPS-7",
            "agent_id": "Digest Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-a7c4c5d1",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "Digest Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"The **Digest Agent** operates as the research and development arm of the Board Agents.  Its primary mission is to *\u201cdigest everything\u201d*\u2014code repositories",
              "datasets",
              "documents",
              "APIs",
              "SaaS systems (including live CRMs) and even AI models.  By analysing these sources",
              "the Digest Agent extracts structured knowledge",
              "builds semantic indices",
              "and surfaces insights that inform strategic decisions.  Though part of the Board",
              "it behaves like a self\u2011contained lab",
              "spinning up **MicroAgentStacks** to perform large\u2011scale digestions.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-a7c4c5d1",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "The Digest Agent",
          "name": "The Digest Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "lp TKI",
            "agent_id": "The Digest Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-919bde43",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "The Digest Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"1. **Discover:** Identify sources to digest.  This includes scanning internal GitHub repos",
              "listing connected APIs/CRMs",
              "and reading the current model ingestion list.  Discovery may rely on board directives or scheduled tasks.\\n2. **Fetch:** Clone or synchronise the source material.  For code repos",
              "perform a shallow clone and gather dependency lock files.  For CRMs or APIs",
              "pull metadata and sample records while respecting rate limits.  Handle authentication using secure tokens from the secrets manager.\\n3. **Parse:** Use language\u2011specific parsers (Python AST",
              "ts\u2011morph for JS/TS",
              "go/ast",
              "Rust syn",
              "JavaParser) to analyse code and extract modules",
              "functions",
              "classes and call graphs.  For API schemas",
              "parse OpenAPI/GraphQL definitions.  Build an **SBOM** to capture all packages and versions.\\n4\"}"
            ],
            "spawn_policy": [
              "pack=PACK-919bde43",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "ModelSelectorAgent",
          "name": "ModelSelectorAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "fl YEL-5",
            "agent_id": "ModelSelectorAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-20c0247c",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-F",
            "display_name": "ModelSelectorAgent",
            "efg_requirements": [
              "gpu>=1",
              "vram>=8GB",
              "disk>=10GB",
              "net>=50Mbps"
            ],
            "epic": "F",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"1. **Discover:** Identify sources to digest.  This includes scanning internal GitHub repos",
              "listing connected APIs/CRMs",
              "and reading the current model ingestion list.  Discovery may rely on board directives or scheduled tasks.\\n2. **Fetch:** Clone or synchronise the source material.  For code repos",
              "perform a shallow clone and gather dependency lock files.  For CRMs or APIs",
              "pull metadata and sample records while respecting rate limits.  Handle authentication using secure tokens from the secrets manager.\\n3. **Parse:** Use language\u2011specific parsers (Python AST",
              "ts\u2011morph for JS/TS",
              "go/ast",
              "Rust syn",
              "JavaParser) to analyse code and extract modules",
              "functions",
              "classes and call graphs.  For API schemas",
              "parse OpenAPI/GraphQL definitions.  Build an **SBOM** to capture all packages and versions.\\n4\"}"
            ],
            "spawn_policy": [
              "pack=PACK-20c0247c",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.f",
            "type": "Agent"
          }
        },
        {
          "id": "The Digest Agent",
          "name": "The Digest Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "lp TKI",
            "agent_id": "The Digest Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-919bde43",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "The Digest Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": "{\"sample\": \"The Digest Agent delivers:\"}",
            "spawn_policy": [
              "pack=PACK-919bde43",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "The Digest Agent",
          "name": "The Digest Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "lp TKI",
            "agent_id": "The Digest Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-919bde43",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "The Digest Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"* **Board Agents:** Commission digestion tasks and consume the Digest Agent\u2019s findings when making strategic decisions.\\n* **MicroAgentStacks:** Used to parallelise large digests\u2014each stack handles a set of sources and feeds results back to the Digest Agent.\\n* **ModelSelectorAgents:** Select embedding models and summarisation LLMs appropriate for each source type.  For example",
              "code summarisation may use a codex model",
              "while plain text summarisation uses a general LLM.\\n* **Data & Storage layer:** Stores artefacts and indices in MinIO",
              "Postgres and the vector store.  The Digest Agent ensures proper metadata tagging and retention policies.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-919bde43",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "Commission digestion tasks and consume the Digest Agent",
          "name": "Commission digestion tasks and consume the Digest Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "zq BMB",
            "agent_id": "Commission digestion tasks and consume the Digest Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-277baad0",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "Commission digestion tasks and consume the Digest Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"* **Board Agents:** Commission digestion tasks and consume the Digest Agent\u2019s findings when making strategic decisions.\\n* **MicroAgentStacks:** Used to parallelise large digests\u2014each stack handles a set of sources and feeds results back to the Digest Agent.\\n* **ModelSelectorAgents:** Select embedding models and summarisation LLMs appropriate for each source type.  For example",
              "code summarisation may use a codex model",
              "while plain text summarisation uses a general LLM.\\n* **Data & Storage layer:** Stores artefacts and indices in MinIO",
              "Postgres and the vector store.  The Digest Agent ensures proper metadata tagging and retention policies.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-277baad0",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "MicroAgentStacks",
          "name": "MicroAgentStacks",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "kp RIU-19",
            "agent_id": "MicroAgentStacks",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-24114ed9",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "MicroAgentStacks",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"* **Board Agents:** Commission digestion tasks and consume the Digest Agent\u2019s findings when making strategic decisions.\\n* **MicroAgentStacks:** Used to parallelise large digests\u2014each stack handles a set of sources and feeds results back to the Digest Agent.\\n* **ModelSelectorAgents:** Select embedding models and summarisation LLMs appropriate for each source type.  For example",
              "code summarisation may use a codex model",
              "while plain text summarisation uses a general LLM.\\n* **Data & Storage layer:** Stores artefacts and indices in MinIO",
              "Postgres and the vector store.  The Digest Agent ensures proper metadata tagging and retention policies.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-24114ed9",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Digest Agent",
          "name": "Digest Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "es FPS-8",
            "agent_id": "Digest Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-a7c4c5d1",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "Digest Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"* **Board Agents:** Commission digestion tasks and consume the Digest Agent\u2019s findings when making strategic decisions.\\n* **MicroAgentStacks:** Used to parallelise large digests\u2014each stack handles a set of sources and feeds results back to the Digest Agent.\\n* **ModelSelectorAgents:** Select embedding models and summarisation LLMs appropriate for each source type.  For example",
              "code summarisation may use a codex model",
              "while plain text summarisation uses a general LLM.\\n* **Data & Storage layer:** Stores artefacts and indices in MinIO",
              "Postgres and the vector store.  The Digest Agent ensures proper metadata tagging and retention policies.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-a7c4c5d1",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "Digest Agent",
          "name": "Digest Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "es FPS-9",
            "agent_id": "Digest Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-a7c4c5d1",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "Digest Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"By systematically consuming and analysing every relevant piece of information",
              "the Digest Agent turns unstructured data into actionable knowledge for ark\u2011os\u2011noa\u2019s decision makers.\\n# Backend \u2014 Services & Infrastructure of ark\u2011os\u2011noa\"}"
            ],
            "spawn_policy": [
              "pack=PACK-a7c4c5d1",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "Telemetry Agent",
          "name": "Telemetry Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "oe IBT-2",
            "agent_id": "Telemetry Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-88389aa1",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Telemetry Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"1. **Build\u2011Proxy:** A lightweight service that proxies inner `docker build` and `nerdctl` commands to the outer BuildKit daemon.  It exposes a local socket inside the Capsule but forwards build requests externally",
              "avoiding duplicate layer storage.\\n2. **Service\u2011Mirror:** Watches inner service definitions and publishes corresponding services in the outer service mesh with mTLS and SLO configurations.  This allows inner services to be reachable and observable from the outer plane.\\n3. **Policy Agent (OPA):** Enforces egress rules",
              "resource quotas",
              "and other policies at the Capsule boundary.  It integrates with eBPF to block unauthorised traffic.\\n4. **Telemetry Agent:** Collects traces",
              "metrics and logs from the inner services and sidecars.  It forwards data to the central observability stack \"}"
            ],
            "spawn_policy": [
              "pack=PACK-88389aa1",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Digest Agent",
          "name": "Digest Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "es FPS-10",
            "agent_id": "Digest Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-a7c4c5d1",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "Digest Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"- **Backend services:** Interact with the registry and MinIO via signed URLs or direct API calls.  BuildKit pushes images to the registry",
              "the Registrar Service writes artefacts to MinIO and records metadata in Postgres.\\n- **Digest Agent:** Reads and writes to MinIO and Postgres",
              "uploads embeddings to the vector store.  It uses the registry to store intermediate build images.\\n- **Model Selector and Model Servers:** Use Postgres (via pgvector or Qdrant) to store model metadata and evaluation results.  Models themselves may be stored as OCI artefacts or in MinIO shards.\\n- **Front\u2011end:** Accesses Supabase for real\u2011time updates and uses signed URLs to fetch artefacts from MinIO.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-a7c4c5d1",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "ModelSelectorAgents and Digest Agent",
          "name": "ModelSelectorAgents and Digest Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "hz MUX",
            "agent_id": "ModelSelectorAgents and Digest Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-c6b578c7",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "ModelSelectorAgents and Digest Agent",
            "efg_requirements": [
              "gpu>=1",
              "vram>=8GB",
              "disk>=10GB",
              "net>=50Mbps"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"**ark\u2011os\u2011noa** is an **agentic AI platform** designed to realise ElementArk/DeFlex\u2019s business model.  It combines hierarchical organisational patterns (NOA \u2192 Board Agents \u2192 MicroAgentStacks \u2192 microservices) with modern infrastructure techniques (Capsule/Full\u2011Illusion pattern",
              "private data plane",
              "event bus) and an adaptable AI layer (ModelSelectorAgents and Digest Agent).  The result is a **\u201chive mind\u201d** of specialised agents capable of digesting",
              "reasoning about and producing artefacts across software",
              "data and SaaS systems.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-c6b578c7",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "MicroAgentStacks",
          "name": "MicroAgentStacks",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "kp RIU-20",
            "agent_id": "MicroAgentStacks",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-24114ed9",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "MicroAgentStacks",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"**ark\u2011os\u2011noa** is an **agentic AI platform** designed to realise ElementArk/DeFlex\u2019s business model.  It combines hierarchical organisational patterns (NOA \u2192 Board Agents \u2192 MicroAgentStacks \u2192 microservices) with modern infrastructure techniques (Capsule/Full\u2011Illusion pattern",
              "private data plane",
              "event bus) and an adaptable AI layer (ModelSelectorAgents and Digest Agent).  The result is a **\u201chive mind\u201d** of specialised agents capable of digesting",
              "reasoning about and producing artefacts across software",
              "data and SaaS systems.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-24114ed9",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Each can commission work via MicroAgentStacks",
          "name": "Each can commission work via MicroAgentStacks",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "de LBD",
            "agent_id": "Each can commission work via MicroAgentStacks",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-f291ea41",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "Each can commission work via MicroAgentStacks",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"- **NOA:** The ExecutiveCommanderChiefAgent at the top.  Transforms business goals into actionable plans",
              "assigns Board Agents",
              "sets policies",
              "and monitors execution.\\n- **Board Agents:** Domain\u2011specific executives (Strategy/CTO",
              "COO",
              "CFO/FinOps",
              "Legal/Compliance",
              "Security",
              "Growth/Partnerships",
              "Digest).  Each can commission work via MicroAgentStacks and request ModelSelector assistance.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-f291ea41",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "The ExecutiveCommanderChiefAgent",
          "name": "The ExecutiveCommanderChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "gt VJD",
            "agent_id": "The ExecutiveCommanderChiefAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-a4541e11",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "The ExecutiveCommanderChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Executive",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"- **NOA:** The ExecutiveCommanderChiefAgent at the top.  Transforms business goals into actionable plans",
              "assigns Board Agents",
              "sets policies",
              "and monitors execution.\\n- **Board Agents:** Domain\u2011specific executives (Strategy/CTO",
              "COO",
              "CFO/FinOps",
              "Legal/Compliance",
              "Security",
              "Growth/Partnerships",
              "Digest).  Each can commission work via MicroAgentStacks and request ModelSelector assistance.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-a4541e11",
              "min_plane=Deployed",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "CommandChiefAgent",
          "name": "CommandChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "jj CON-7",
            "agent_id": "CommandChiefAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-299e0062",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "CommandChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"- **MicroAgentStacks:** On\u2011demand work pods orchestrated by a CommandChiefAgent.  Each stack contains Operators",
              "Adapters and Guards and runs through a defined lifecycle (Bootstrap \u2192 Execute \u2192 Validate \u2192 Package \u2192 Archive).  Stacks interact with external sources (repos",
              "CRMs",
              "APIs) and internal services via Adapters.\\n- **Expanded Digest Pipeline:** A set of microservices (Intake",
              "Classifier",
              "Graph Extract",
              "Embeddings",
              "Env Synthesis",
              "Safety",
              "Runner",
              "Integrator",
              "Registrar) that perform the actual work.  Each is loosely coupled via an event bus and runs inside the Capsule environment.  CRM Strangler and Model Serving are additional services.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-299e0062",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "MicroAgentStacks",
          "name": "MicroAgentStacks",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "kp RIU-21",
            "agent_id": "MicroAgentStacks",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-24114ed9",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "MicroAgentStacks",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"- **MicroAgentStacks:** On\u2011demand work pods orchestrated by a CommandChiefAgent.  Each stack contains Operators",
              "Adapters and Guards and runs through a defined lifecycle (Bootstrap \u2192 Execute \u2192 Validate \u2192 Package \u2192 Archive).  Stacks interact with external sources (repos",
              "CRMs",
              "APIs) and internal services via Adapters.\\n- **Expanded Digest Pipeline:** A set of microservices (Intake",
              "Classifier",
              "Graph Extract",
              "Embeddings",
              "Env Synthesis",
              "Safety",
              "Runner",
              "Integrator",
              "Registrar) that perform the actual work.  Each is loosely coupled via an event bus and runs inside the Capsule environment.  CRM Strangler and Model Serving are additional services.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-24114ed9",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Telemetry Agent",
          "name": "Telemetry Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "oe IBT-3",
            "agent_id": "Telemetry Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-88389aa1",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Telemetry Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"- **Capsule Architecture (Full Illusion):** Encapsulates stacks and services in a sandbox that forwards build operations and network traffic to the outer runtime.  Capsule sidecars (Build\u2011Proxy",
              "Service\u2011Mirror",
              "Policy Agent",
              "Telemetry Agent",
              "optionally vcluster) provide the illusion of Docker\u2011in\u2011Docker and Kubernetes\u2011in\u2011Kubernetes without their drawbacks\u3010716409907369096\u2020L1037-L1067\u3011.\\n- **Event Bus & Orchestration:** Redis Streams (primary) and optional NATS enable asynchronous communication.  A workflow engine coordinates the pipeline steps",
              "handling retries and backoff.\\n- **Data Plane:** Private OCI registry",
              "MinIO",
              "Postgres (+ pgvector/Supabase) and optionally Qdrant.  This plane stores everything from container images to embeddings and ensures data stays within the trust boundary.\\n- **O\"}"
            ],
            "spawn_policy": [
              "pack=PACK-88389aa1",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "MicroAgentStack",
          "name": "MicroAgentStack",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "qi KZU-7",
            "agent_id": "MicroAgentStack",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-d2c954bc",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "MicroAgentStack",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"1. **Goal Intake:** A high\u2011level goal arrives.  NOA normalises it into a WorkPlan and determines which Board Agents are responsible.\\n2. **Board Planning:** Board Agents refine the goal",
              "assign budgets",
              "define SLAs and set policies.  They request MicroAgentStacks and ModelSelectorAgents as needed.\\n3. **Stack Deployment:** For each task",
              "a MicroAgentStack is spawned.  The stack uses Adapters to fetch sources (repos",
              "CRMs)",
              "Operators to parse/analyse",
              "and Guards to enforce policies.  Microservices implement the digest pipeline",
              "orchestrated via the event bus.\\n4. **Model Selection & Execution:** When a service or operator needs AI inference (embeddings",
              "summarisation",
              "code explanation)",
              "it calls a ModelSelectorAgent.  The selected model is executed via local model servers or remote APIs.\\n5. **\"}"
            ],
            "spawn_policy": [
              "pack=PACK-d2c954bc",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "ModelSelectorAgent",
          "name": "ModelSelectorAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "fl YEL-6",
            "agent_id": "ModelSelectorAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-20c0247c",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-F",
            "display_name": "ModelSelectorAgent",
            "efg_requirements": [
              "gpu>=1",
              "vram>=8GB",
              "disk>=10GB",
              "net>=50Mbps"
            ],
            "epic": "F",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"1. **Goal Intake:** A high\u2011level goal arrives.  NOA normalises it into a WorkPlan and determines which Board Agents are responsible.\\n2. **Board Planning:** Board Agents refine the goal",
              "assign budgets",
              "define SLAs and set policies.  They request MicroAgentStacks and ModelSelectorAgents as needed.\\n3. **Stack Deployment:** For each task",
              "a MicroAgentStack is spawned.  The stack uses Adapters to fetch sources (repos",
              "CRMs)",
              "Operators to parse/analyse",
              "and Guards to enforce policies.  Microservices implement the digest pipeline",
              "orchestrated via the event bus.\\n4. **Model Selection & Execution:** When a service or operator needs AI inference (embeddings",
              "summarisation",
              "code explanation)",
              "it calls a ModelSelectorAgent.  The selected model is executed via local model servers or remote APIs.\\n5. **\"}"
            ],
            "spawn_policy": [
              "pack=PACK-20c0247c",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.f",
            "type": "Agent"
          }
        },
        {
          "id": "They request MicroAgentStacks",
          "name": "They request MicroAgentStacks",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "mn NCR",
            "agent_id": "They request MicroAgentStacks",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-40e8ffaf",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "They request MicroAgentStacks",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"1. **Goal Intake:** A high\u2011level goal arrives.  NOA normalises it into a WorkPlan and determines which Board Agents are responsible.\\n2. **Board Planning:** Board Agents refine the goal",
              "assign budgets",
              "define SLAs and set policies.  They request MicroAgentStacks and ModelSelectorAgents as needed.\\n3. **Stack Deployment:** For each task",
              "a MicroAgentStack is spawned.  The stack uses Adapters to fetch sources (repos",
              "CRMs)",
              "Operators to parse/analyse",
              "and Guards to enforce policies.  Microservices implement the digest pipeline",
              "orchestrated via the event bus.\\n4. **Model Selection & Execution:** When a service or operator needs AI inference (embeddings",
              "summarisation",
              "code explanation)",
              "it calls a ModelSelectorAgent.  The selected model is executed via local model servers or remote APIs.\\n5. **\"}"
            ],
            "spawn_policy": [
              "pack=PACK-40e8ffaf",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Digest Agent",
          "name": "Digest Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "es FPS-11",
            "agent_id": "Digest Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-a7c4c5d1",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "Digest Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"1. **Modularity & Scalability:** By decomposing functionality into microservices and agents",
              "ark\u2011os\u2011noa can scale horizontally and update components independently\u2014avoiding the pitfalls of monolithic systems\u301043537238352704\u2020L1068-L1088\u3011.\\n2. **Security & Compliance:** The Capsule pattern",
              "no DinD policy",
              "private data plane and sidecar enforcement minimise the attack surface.  SBOMs",
              "licences and vulnerability scans ensure supply\u2011chain integrity.\\n3. **Intelligence & Adaptability:** ModelSelectorAgents enable adaptive AI usage",
              "the Digest Agent builds knowledge graphs and embeddings",
              "the board can ingest CRMs and SaaS systems without downtime using the strangler proxy.\\n4. **Auditability & Provenance:** Every decision",
              "model selection and action is logged in Postgres and associated with a run ID\"}"
            ],
            "spawn_policy": [
              "pack=PACK-a7c4c5d1",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "CommandChiefAgent",
          "name": "CommandChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "jj CON-8",
            "agent_id": "CommandChiefAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-299e0062",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "CommandChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"* **External Clients:** Use the Gateway API to submit work.  They receive job IDs and can query progress or results.  Authentication tokens limit access based on roles.\\n* **Internal Agents:** Call endpoints via Adapters.  For example",
              "a CommandChiefAgent may call `/digest` to start digestion for a new source or `/models/ingest` to add an in\u2011house model.  Internal calls attach run IDs and context for traceability.\\n* **Front\u2011End Users:** Access the Admin Console to monitor and control the system.  When they trigger actions (e.g. toggling a CRM endpoint)",
              "the console issues calls to the Gateway API on their behalf.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-299e0062",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "ModelSelectorAgent",
          "name": "ModelSelectorAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "fl YEL-7",
            "agent_id": "ModelSelectorAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-20c0247c",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-F",
            "display_name": "ModelSelectorAgent",
            "efg_requirements": [
              "gpu>=1",
              "vram>=8GB",
              "disk>=10GB",
              "net>=50Mbps"
            ],
            "epic": "F",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"The **ModelSelectorAgent** plays a central role in learning.  By recording the performance (latency",
              "cost",
              "accuracy) and outcomes of each model used for a task",
              "the system builds a knowledge base of model behaviours.  Over time",
              "the selector\u2019s heuristics can be tuned or even replaced by learned policies that maximise utility subject to constraints.  Benchmark results and feedback loops allow the system to retire underperforming models and onboard new ones seamlessly.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-20c0247c",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.f",
            "type": "Agent"
          }
        },
        {
          "id": "NOA can instruct a MicroAgentStack",
          "name": "NOA can instruct a MicroAgentStack",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "pu VQE-2",
            "agent_id": "NOA can instruct a MicroAgentStack",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-ee0b9d55",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "NOA can instruct a MicroAgentStack",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined.md",
            "source_rows_json": [
              "{\"sample\": \"**Branchwise foresight** refers to simulating multiple potential futures or scenarios before committing resources.  For example",
              "before migrating a CRM function internally",
              "NOA can instruct a MicroAgentStack to:\"}"
            ],
            "spawn_policy": [
              "pack=PACK-ee0b9d55",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "MicroAgentStacks",
          "name": "MicroAgentStacks",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "kp RIU-22",
            "agent_id": "MicroAgentStacks",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-24114ed9",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "MicroAgentStacks",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "board_agents.md",
            "source_rows_json": [
              "{\"sample\": \"The **Board Agents** sit at the top of the **ark\u2011os\u2011noa** organisation just below NOA.  They are analogous to an executive board in a company: each agent owns a domain (strategy",
              "operations",
              "finance",
              "legal",
              "security",
              "partnerships",
              "research) and has authority to commission **MicroAgentStacks** to execute work.  By design they are *few in number* but *broad in scope*\u2014their purpose is to translate NOA\u2019s vision into specific missions",
              "ensure alignment with ElementArk/DeFlex\u2019s business model",
              "and provide governance across all stacks and agents.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-24114ed9",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Growth/Partnerships Agent",
          "name": "Growth/Partnerships Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ij VCO-2",
            "agent_id": "Growth/Partnerships Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-ddb18977",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Growth/Partnerships Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "board_agents.md",
            "source_rows_json": [
              "{\"sample\": \"- **Strategy/CTO Agent** \u2013 Sets technical direction: system architecture",
              "Capsule (Full\u2011Illusion) adoption",
              "environment policies (no Docker\u2011in\u2011Docker)",
              "cohesion across services.\\n- **COO Agent** \u2013 Owns operational runbooks",
              "SLAs",
              "scheduling and change management.  Coordinates delivery timelines and resource utilisation.\\n- **CFO/FinOps Agent** \u2013 Manages budgets and spend telemetry.  Optimises cost across compute",
              "storage and model usage.\\n- **Legal/Compliance Agent** \u2013 Ensures licence compliance",
              "data governance",
              "export controls and regulatory adherence.  Maintains policy frameworks.\\n- **Security Agent** \u2013 Enforces secrets management",
              "supply\u2011chain security",
              "SBOM attestation and vulnerability thresholds.  Gatekeeper for risk.\\n- **Growth/Partnerships Agent** \u2013 Curates ingestion roadmaps for rep\"}"
            ],
            "spawn_policy": [
              "pack=PACK-ddb18977",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "COO Agent",
          "name": "COO Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "xf AYN-2",
            "agent_id": "COO Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-29d06ba7",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "COO Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "board_agents.md",
            "source_rows_json": [
              "{\"sample\": \"- **Strategy/CTO Agent** \u2013 Sets technical direction: system architecture",
              "Capsule (Full\u2011Illusion) adoption",
              "environment policies (no Docker\u2011in\u2011Docker)",
              "cohesion across services.\\n- **COO Agent** \u2013 Owns operational runbooks",
              "SLAs",
              "scheduling and change management.  Coordinates delivery timelines and resource utilisation.\\n- **CFO/FinOps Agent** \u2013 Manages budgets and spend telemetry.  Optimises cost across compute",
              "storage and model usage.\\n- **Legal/Compliance Agent** \u2013 Ensures licence compliance",
              "data governance",
              "export controls and regulatory adherence.  Maintains policy frameworks.\\n- **Security Agent** \u2013 Enforces secrets management",
              "supply\u2011chain security",
              "SBOM attestation and vulnerability thresholds.  Gatekeeper for risk.\\n- **Growth/Partnerships Agent** \u2013 Curates ingestion roadmaps for rep\"}"
            ],
            "spawn_policy": [
              "pack=PACK-29d06ba7",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Legal/Compliance Agent",
          "name": "Legal/Compliance Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "rd BLD-2",
            "agent_id": "Legal/Compliance Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-4ffaa7e7",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Legal/Compliance Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "board_agents.md",
            "source_rows_json": [
              "{\"sample\": \"- **Strategy/CTO Agent** \u2013 Sets technical direction: system architecture",
              "Capsule (Full\u2011Illusion) adoption",
              "environment policies (no Docker\u2011in\u2011Docker)",
              "cohesion across services.\\n- **COO Agent** \u2013 Owns operational runbooks",
              "SLAs",
              "scheduling and change management.  Coordinates delivery timelines and resource utilisation.\\n- **CFO/FinOps Agent** \u2013 Manages budgets and spend telemetry.  Optimises cost across compute",
              "storage and model usage.\\n- **Legal/Compliance Agent** \u2013 Ensures licence compliance",
              "data governance",
              "export controls and regulatory adherence.  Maintains policy frameworks.\\n- **Security Agent** \u2013 Enforces secrets management",
              "supply\u2011chain security",
              "SBOM attestation and vulnerability thresholds.  Gatekeeper for risk.\\n- **Growth/Partnerships Agent** \u2013 Curates ingestion roadmaps for rep\"}"
            ],
            "spawn_policy": [
              "pack=PACK-4ffaa7e7",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Security Agent",
          "name": "Security Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "mr YWX-3",
            "agent_id": "Security Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-bd71ef60",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "Security Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=2GB",
              "disk>=2GB",
              "net>=10Mbps"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "board_agents.md",
            "source_rows_json": [
              "{\"sample\": \"- **Strategy/CTO Agent** \u2013 Sets technical direction: system architecture",
              "Capsule (Full\u2011Illusion) adoption",
              "environment policies (no Docker\u2011in\u2011Docker)",
              "cohesion across services.\\n- **COO Agent** \u2013 Owns operational runbooks",
              "SLAs",
              "scheduling and change management.  Coordinates delivery timelines and resource utilisation.\\n- **CFO/FinOps Agent** \u2013 Manages budgets and spend telemetry.  Optimises cost across compute",
              "storage and model usage.\\n- **Legal/Compliance Agent** \u2013 Ensures licence compliance",
              "data governance",
              "export controls and regulatory adherence.  Maintains policy frameworks.\\n- **Security Agent** \u2013 Enforces secrets management",
              "supply\u2011chain security",
              "SBOM attestation and vulnerability thresholds.  Gatekeeper for risk.\\n- **Growth/Partnerships Agent** \u2013 Curates ingestion roadmaps for rep\"}"
            ],
            "spawn_policy": [
              "pack=PACK-bd71ef60",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "CFO/FinOps Agent",
          "name": "CFO/FinOps Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "vj BWK-2",
            "agent_id": "CFO/FinOps Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-9d07116f",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "CFO/FinOps Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "board_agents.md",
            "source_rows_json": [
              "{\"sample\": \"- **Strategy/CTO Agent** \u2013 Sets technical direction: system architecture",
              "Capsule (Full\u2011Illusion) adoption",
              "environment policies (no Docker\u2011in\u2011Docker)",
              "cohesion across services.\\n- **COO Agent** \u2013 Owns operational runbooks",
              "SLAs",
              "scheduling and change management.  Coordinates delivery timelines and resource utilisation.\\n- **CFO/FinOps Agent** \u2013 Manages budgets and spend telemetry.  Optimises cost across compute",
              "storage and model usage.\\n- **Legal/Compliance Agent** \u2013 Ensures licence compliance",
              "data governance",
              "export controls and regulatory adherence.  Maintains policy frameworks.\\n- **Security Agent** \u2013 Enforces secrets management",
              "supply\u2011chain security",
              "SBOM attestation and vulnerability thresholds.  Gatekeeper for risk.\\n- **Growth/Partnerships Agent** \u2013 Curates ingestion roadmaps for rep\"}"
            ],
            "spawn_policy": [
              "pack=PACK-9d07116f",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Strategy/CTO Agent",
          "name": "Strategy/CTO Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "hn ETD-2",
            "agent_id": "Strategy/CTO Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-b20083ae",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Strategy/CTO Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "board_agents.md",
            "source_rows_json": [
              "{\"sample\": \"- **Strategy/CTO Agent** \u2013 Sets technical direction: system architecture",
              "Capsule (Full\u2011Illusion) adoption",
              "environment policies (no Docker\u2011in\u2011Docker)",
              "cohesion across services.\\n- **COO Agent** \u2013 Owns operational runbooks",
              "SLAs",
              "scheduling and change management.  Coordinates delivery timelines and resource utilisation.\\n- **CFO/FinOps Agent** \u2013 Manages budgets and spend telemetry.  Optimises cost across compute",
              "storage and model usage.\\n- **Legal/Compliance Agent** \u2013 Ensures licence compliance",
              "data governance",
              "export controls and regulatory adherence.  Maintains policy frameworks.\\n- **Security Agent** \u2013 Enforces secrets management",
              "supply\u2011chain security",
              "SBOM attestation and vulnerability thresholds.  Gatekeeper for risk.\\n- **Growth/Partnerships Agent** \u2013 Curates ingestion roadmaps for rep\"}"
            ],
            "spawn_policy": [
              "pack=PACK-b20083ae",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Digest Agent",
          "name": "Digest Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "es FPS-12",
            "agent_id": "Digest Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-a7c4c5d1",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "Digest Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "board_agents.md",
            "source_rows_json": [
              "{\"sample\": \"- **Strategy/CTO Agent** \u2013 Sets technical direction: system architecture",
              "Capsule (Full\u2011Illusion) adoption",
              "environment policies (no Docker\u2011in\u2011Docker)",
              "cohesion across services.\\n- **COO Agent** \u2013 Owns operational runbooks",
              "SLAs",
              "scheduling and change management.  Coordinates delivery timelines and resource utilisation.\\n- **CFO/FinOps Agent** \u2013 Manages budgets and spend telemetry.  Optimises cost across compute",
              "storage and model usage.\\n- **Legal/Compliance Agent** \u2013 Ensures licence compliance",
              "data governance",
              "export controls and regulatory adherence.  Maintains policy frameworks.\\n- **Security Agent** \u2013 Enforces secrets management",
              "supply\u2011chain security",
              "SBOM attestation and vulnerability thresholds.  Gatekeeper for risk.\\n- **Growth/Partnerships Agent** \u2013 Curates ingestion roadmaps for rep\"}"
            ],
            "spawn_policy": [
              "pack=PACK-a7c4c5d1",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "Board Agent",
          "name": "Board Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "jm MDQ-4",
            "agent_id": "Board Agent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-796c1e54",
            "category": "Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Board Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "board_agents.md",
            "source_rows_json": [
              "{\"sample\": \"1. **Delegation:** Board Agents can spin up one or more **MicroAgentStacks** to accomplish tasks.  Each stack has its own **CommandChiefAgent** orchestrating the details",
              "leaving the Board Agent to focus on strategy and oversight.\\n2. **Specialisation:** When a task requires sophisticated model selection",
              "a Board Agent requests a **ModelSelectorAgent** to choose the most appropriate AI model or tool.  This ensures tasks are executed with the right balance of cost",
              "latency and accuracy.\\n3. **Governance:** Board Agents enforce policies across stacks\u2014licensing",
              "vulnerability gates",
              "security posture",
              "and budget limits.  They maintain decision logs and risk registers for audit.\\n4. **Parallelism:** Multiple stacks can run concurrently.  Board Agents schedule tasks to maximise throughput while res\"}"
            ],
            "spawn_policy": [
              "pack=PACK-796c1e54",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "CommandChiefAgent",
          "name": "CommandChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "jj CON-9",
            "agent_id": "CommandChiefAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-299e0062",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "CommandChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "board_agents.md",
            "source_rows_json": [
              "{\"sample\": \"1. **Delegation:** Board Agents can spin up one or more **MicroAgentStacks** to accomplish tasks.  Each stack has its own **CommandChiefAgent** orchestrating the details",
              "leaving the Board Agent to focus on strategy and oversight.\\n2. **Specialisation:** When a task requires sophisticated model selection",
              "a Board Agent requests a **ModelSelectorAgent** to choose the most appropriate AI model or tool.  This ensures tasks are executed with the right balance of cost",
              "latency and accuracy.\\n3. **Governance:** Board Agents enforce policies across stacks\u2014licensing",
              "vulnerability gates",
              "security posture",
              "and budget limits.  They maintain decision logs and risk registers for audit.\\n4. **Parallelism:** Multiple stacks can run concurrently.  Board Agents schedule tasks to maximise throughput while res\"}"
            ],
            "spawn_policy": [
              "pack=PACK-299e0062",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "ModelSelectorAgent",
          "name": "ModelSelectorAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "fl YEL-8",
            "agent_id": "ModelSelectorAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-20c0247c",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-F",
            "display_name": "ModelSelectorAgent",
            "efg_requirements": [
              "gpu>=1",
              "vram>=8GB",
              "disk>=10GB",
              "net>=50Mbps"
            ],
            "epic": "F",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "board_agents.md",
            "source_rows_json": [
              "{\"sample\": \"1. **Delegation:** Board Agents can spin up one or more **MicroAgentStacks** to accomplish tasks.  Each stack has its own **CommandChiefAgent** orchestrating the details",
              "leaving the Board Agent to focus on strategy and oversight.\\n2. **Specialisation:** When a task requires sophisticated model selection",
              "a Board Agent requests a **ModelSelectorAgent** to choose the most appropriate AI model or tool.  This ensures tasks are executed with the right balance of cost",
              "latency and accuracy.\\n3. **Governance:** Board Agents enforce policies across stacks\u2014licensing",
              "vulnerability gates",
              "security posture",
              "and budget limits.  They maintain decision logs and risk registers for audit.\\n4. **Parallelism:** Multiple stacks can run concurrently.  Board Agents schedule tasks to maximise throughput while res\"}"
            ],
            "spawn_policy": [
              "pack=PACK-20c0247c",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.f",
            "type": "Agent"
          }
        },
        {
          "id": "MicroAgentStacks",
          "name": "MicroAgentStacks",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "kp RIU-23",
            "agent_id": "MicroAgentStacks",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-24114ed9",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "MicroAgentStacks",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "board_agents.md",
            "source_rows_json": [
              "{\"sample\": \"1. **Delegation:** Board Agents can spin up one or more **MicroAgentStacks** to accomplish tasks.  Each stack has its own **CommandChiefAgent** orchestrating the details",
              "leaving the Board Agent to focus on strategy and oversight.\\n2. **Specialisation:** When a task requires sophisticated model selection",
              "a Board Agent requests a **ModelSelectorAgent** to choose the most appropriate AI model or tool.  This ensures tasks are executed with the right balance of cost",
              "latency and accuracy.\\n3. **Governance:** Board Agents enforce policies across stacks\u2014licensing",
              "vulnerability gates",
              "security posture",
              "and budget limits.  They maintain decision logs and risk registers for audit.\\n4. **Parallelism:** Multiple stacks can run concurrently.  Board Agents schedule tasks to maximise throughput while res\"}"
            ],
            "spawn_policy": [
              "pack=PACK-24114ed9",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "MicroAgentStacks",
          "name": "MicroAgentStacks",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "kp RIU-24",
            "agent_id": "MicroAgentStacks",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-24114ed9",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "MicroAgentStacks",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "board_agents.md",
            "source_rows_json": [
              "{\"sample\": \"- **Research & analysis tools:** for web search",
              "code parsing and data exploration within the current year\u2019s context.\\n- **Change control & telemetry:** CI/CD gates",
              "policy engines (e.g. OPA)",
              "vulnerability scanners and cost dashboards.\\n- **Observability feeds:** real\u2011time traces",
              "metrics and logs aggregated from MicroAgentStacks and sidecars.  These signals inform decisions on scaling up/down stacks or raising alerts.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-24114ed9",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "The Digest Agent",
          "name": "The Digest Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "lp TKI-2",
            "agent_id": "The Digest Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-919bde43",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "The Digest Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "board_agents.md",
            "source_rows_json": [
              "{\"sample\": \"* **NOA:** Board Agents receive missions from NOA and report status back.  They provide domain expertise and enforce governance while letting NOA handle high\u2011level planning and cross\u2011domain coordination.\\n* **MicroAgentStacks:** Board Agents are the owners of stacks.  They commission stacks to achieve defined objectives and decommission them when tasks complete.  Each stack operates autonomously but reports progress to its Board Agent.\\n* **ModelSelectorAgents:** When tasks require AI model inference",
              "Board Agents request a ModelSelector to choose among local or hosted models.  The selection is recorded in the trace for audit.\\n* **Digest Agent:** The Digest Agent is part of the Board but behaves like an R&D lab\u2014collecting raw information",
              "synthesising knowledge graphs and summarising finding\"}"
            ],
            "spawn_policy": [
              "pack=PACK-919bde43",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "Each stack operates autonomously but reports progress to its Board Agent",
          "name": "Each stack operates autonomously but reports progress to its Board Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "kh ROJ-2",
            "agent_id": "Each stack operates autonomously but reports progress to its Board Agent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-d499d363",
            "category": "Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Each stack operates autonomously but reports progress to its Board Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "board_agents.md",
            "source_rows_json": [
              "{\"sample\": \"* **NOA:** Board Agents receive missions from NOA and report status back.  They provide domain expertise and enforce governance while letting NOA handle high\u2011level planning and cross\u2011domain coordination.\\n* **MicroAgentStacks:** Board Agents are the owners of stacks.  They commission stacks to achieve defined objectives and decommission them when tasks complete.  Each stack operates autonomously but reports progress to its Board Agent.\\n* **ModelSelectorAgents:** When tasks require AI model inference",
              "Board Agents request a ModelSelector to choose among local or hosted models.  The selection is recorded in the trace for audit.\\n* **Digest Agent:** The Digest Agent is part of the Board but behaves like an R&D lab\u2014collecting raw information",
              "synthesising knowledge graphs and summarising finding\"}"
            ],
            "spawn_policy": [
              "pack=PACK-d499d363",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "MicroAgentStacks",
          "name": "MicroAgentStacks",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "kp RIU-25",
            "agent_id": "MicroAgentStacks",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-24114ed9",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "MicroAgentStacks",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "board_agents.md",
            "source_rows_json": [
              "{\"sample\": \"* **NOA:** Board Agents receive missions from NOA and report status back.  They provide domain expertise and enforce governance while letting NOA handle high\u2011level planning and cross\u2011domain coordination.\\n* **MicroAgentStacks:** Board Agents are the owners of stacks.  They commission stacks to achieve defined objectives and decommission them when tasks complete.  Each stack operates autonomously but reports progress to its Board Agent.\\n* **ModelSelectorAgents:** When tasks require AI model inference",
              "Board Agents request a ModelSelector to choose among local or hosted models.  The selection is recorded in the trace for audit.\\n* **Digest Agent:** The Digest Agent is part of the Board but behaves like an R&D lab\u2014collecting raw information",
              "synthesising knowledge graphs and summarising finding\"}"
            ],
            "spawn_policy": [
              "pack=PACK-24114ed9",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Digest Agent",
          "name": "Digest Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "es FPS-13",
            "agent_id": "Digest Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-a7c4c5d1",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "Digest Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "board_agents.md",
            "source_rows_json": [
              "{\"sample\": \"* **NOA:** Board Agents receive missions from NOA and report status back.  They provide domain expertise and enforce governance while letting NOA handle high\u2011level planning and cross\u2011domain coordination.\\n* **MicroAgentStacks:** Board Agents are the owners of stacks.  They commission stacks to achieve defined objectives and decommission them when tasks complete.  Each stack operates autonomously but reports progress to its Board Agent.\\n* **ModelSelectorAgents:** When tasks require AI model inference",
              "Board Agents request a ModelSelector to choose among local or hosted models.  The selection is recorded in the trace for audit.\\n* **Digest Agent:** The Digest Agent is part of the Board but behaves like an R&D lab\u2014collecting raw information",
              "synthesising knowledge graphs and summarising finding\"}"
            ],
            "spawn_policy": [
              "pack=PACK-a7c4c5d1",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "ModelSelectorAgents and Digest Agent",
          "name": "ModelSelectorAgents and Digest Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "hz MUX-2",
            "agent_id": "ModelSelectorAgents and Digest Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-c6b578c7",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "ModelSelectorAgents and Digest Agent",
            "efg_requirements": [
              "gpu>=1",
              "vram>=8GB",
              "disk>=10GB",
              "net>=50Mbps"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined_framework_architecture.md",
            "source_rows_json": [
              "{\"sample\": \"**ark\u2011os\u2011noa** is an **agentic AI platform** designed to realise ElementArk/DeFlex\u2019s business model.  It combines hierarchical organisational patterns (NOA \u2192 Board Agents \u2192 MicroAgentStacks \u2192 microservices) with modern infrastructure techniques (Capsule/Full\u2011Illusion pattern",
              "private data plane",
              "event bus) and an adaptable AI layer (ModelSelectorAgents and Digest Agent).  The result is a **\u201chive mind\u201d** of specialised agents capable of digesting",
              "reasoning about and producing artefacts across software",
              "data and SaaS systems.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-c6b578c7",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "MicroAgentStacks",
          "name": "MicroAgentStacks",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "kp RIU-26",
            "agent_id": "MicroAgentStacks",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-24114ed9",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "MicroAgentStacks",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined_framework_architecture.md",
            "source_rows_json": [
              "{\"sample\": \"**ark\u2011os\u2011noa** is an **agentic AI platform** designed to realise ElementArk/DeFlex\u2019s business model.  It combines hierarchical organisational patterns (NOA \u2192 Board Agents \u2192 MicroAgentStacks \u2192 microservices) with modern infrastructure techniques (Capsule/Full\u2011Illusion pattern",
              "private data plane",
              "event bus) and an adaptable AI layer (ModelSelectorAgents and Digest Agent).  The result is a **\u201chive mind\u201d** of specialised agents capable of digesting",
              "reasoning about and producing artefacts across software",
              "data and SaaS systems.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-24114ed9",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Each can commission work via MicroAgentStacks",
          "name": "Each can commission work via MicroAgentStacks",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "de LBD-2",
            "agent_id": "Each can commission work via MicroAgentStacks",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-f291ea41",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "Each can commission work via MicroAgentStacks",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined_framework_architecture.md",
            "source_rows_json": [
              "{\"sample\": \"- **NOA:** The ExecutiveCommanderChiefAgent at the top.  Transforms business goals into actionable plans",
              "assigns Board Agents",
              "sets policies",
              "and monitors execution.\\n- **Board Agents:** Domain\u2011specific executives (Strategy/CTO",
              "COO",
              "CFO/FinOps",
              "Legal/Compliance",
              "Security",
              "Growth/Partnerships",
              "R&D/Digest).  Each can commission work via MicroAgentStacks and request ModelSelector assistance.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-f291ea41",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "The ExecutiveCommanderChiefAgent",
          "name": "The ExecutiveCommanderChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "gt VJD-2",
            "agent_id": "The ExecutiveCommanderChiefAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-a4541e11",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "The ExecutiveCommanderChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Executive",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined_framework_architecture.md",
            "source_rows_json": [
              "{\"sample\": \"- **NOA:** The ExecutiveCommanderChiefAgent at the top.  Transforms business goals into actionable plans",
              "assigns Board Agents",
              "sets policies",
              "and monitors execution.\\n- **Board Agents:** Domain\u2011specific executives (Strategy/CTO",
              "COO",
              "CFO/FinOps",
              "Legal/Compliance",
              "Security",
              "Growth/Partnerships",
              "R&D/Digest).  Each can commission work via MicroAgentStacks and request ModelSelector assistance.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-a4541e11",
              "min_plane=Deployed",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "CommandChiefAgent",
          "name": "CommandChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "jj CON-10",
            "agent_id": "CommandChiefAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-299e0062",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "CommandChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined_framework_architecture.md",
            "source_rows_json": [
              "{\"sample\": \"- **MicroAgentStacks:** On\u2011demand work pods orchestrated by a CommandChiefAgent.  Each stack contains Operators",
              "Adapters and Guards and runs through a defined lifecycle (Bootstrap \u2192 Execute \u2192 Validate \u2192 Package \u2192 Archive).  Stacks interact with external sources (repos",
              "CRMs",
              "APIs) and internal services via Adapters.\\n- **Expanded Digest Pipeline:** A set of microservices (Intake",
              "Classifier",
              "Graph Extract",
              "Embeddings",
              "Env Synthesis",
              "Safety",
              "Runner",
              "Integrator",
              "Registrar) that perform the actual work.  Each is loosely coupled via an event bus and runs inside the Capsule environment.  CRM Strangler and Model Serving are additional services.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-299e0062",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "MicroAgentStacks",
          "name": "MicroAgentStacks",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "kp RIU-27",
            "agent_id": "MicroAgentStacks",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-24114ed9",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "MicroAgentStacks",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined_framework_architecture.md",
            "source_rows_json": [
              "{\"sample\": \"- **MicroAgentStacks:** On\u2011demand work pods orchestrated by a CommandChiefAgent.  Each stack contains Operators",
              "Adapters and Guards and runs through a defined lifecycle (Bootstrap \u2192 Execute \u2192 Validate \u2192 Package \u2192 Archive).  Stacks interact with external sources (repos",
              "CRMs",
              "APIs) and internal services via Adapters.\\n- **Expanded Digest Pipeline:** A set of microservices (Intake",
              "Classifier",
              "Graph Extract",
              "Embeddings",
              "Env Synthesis",
              "Safety",
              "Runner",
              "Integrator",
              "Registrar) that perform the actual work.  Each is loosely coupled via an event bus and runs inside the Capsule environment.  CRM Strangler and Model Serving are additional services.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-24114ed9",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Telemetry Agent",
          "name": "Telemetry Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "oe IBT-4",
            "agent_id": "Telemetry Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-88389aa1",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Telemetry Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined_framework_architecture.md",
            "source_rows_json": [
              "{\"sample\": \"- **Capsule Architecture (Full Illusion):** Encapsulates stacks and services in a sandbox that forwards build operations and network traffic to the outer runtime.  Capsule sidecars (Build\u2011Proxy",
              "Service\u2011Mirror",
              "Policy Agent",
              "Telemetry Agent",
              "optionally vcluster) provide the illusion of Docker\u2011in\u2011Docker and Kubernetes\u2011in\u2011Kubernetes without their drawbacks\u3010716409907369096\u2020L1037-L1067\u3011.\\n- **Event Bus & Orchestration:** Redis Streams (primary) and optional NATS enable asynchronous communication.  A workflow engine coordinates the pipeline steps",
              "handling retries and backoff.\\n- **Data Plane:** Private OCI registry",
              "MinIO",
              "Postgres (+ pgvector/Supabase) and optionally Qdrant.  This plane stores everything from container images to embeddings and ensures data stays within the trust boundary.\\n- **O\"}"
            ],
            "spawn_policy": [
              "pack=PACK-88389aa1",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "MicroAgentStack",
          "name": "MicroAgentStack",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "qi KZU-8",
            "agent_id": "MicroAgentStack",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-d2c954bc",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "MicroAgentStack",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined_framework_architecture.md",
            "source_rows_json": [
              "{\"sample\": \"1. **Goal Intake:** A high\u2011level goal arrives.  NOA normalises it into a WorkPlan and determines which Board Agents are responsible.\\n2. **Board Planning:** Board Agents refine the goal",
              "assign budgets",
              "define SLAs and set policies.  They request MicroAgentStacks and ModelSelectorAgents as needed.\\n3. **Stack Deployment:** For each task",
              "a MicroAgentStack is spawned.  The stack uses Adapters to fetch sources (repos",
              "CRMs)",
              "Operators to parse/analyse",
              "and Guards to enforce policies.  Microservices implement the digest pipeline",
              "orchestrated via the event bus.\\n4. **Model Selection & Execution:** When a service or operator needs AI inference (embeddings",
              "summarisation",
              "code explanation)",
              "it calls a ModelSelectorAgent.  The selected model is executed via local model servers or remote APIs.\\n5. **\"}"
            ],
            "spawn_policy": [
              "pack=PACK-d2c954bc",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "ModelSelectorAgent",
          "name": "ModelSelectorAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "fl YEL-9",
            "agent_id": "ModelSelectorAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-20c0247c",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-F",
            "display_name": "ModelSelectorAgent",
            "efg_requirements": [
              "gpu>=1",
              "vram>=8GB",
              "disk>=10GB",
              "net>=50Mbps"
            ],
            "epic": "F",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined_framework_architecture.md",
            "source_rows_json": [
              "{\"sample\": \"1. **Goal Intake:** A high\u2011level goal arrives.  NOA normalises it into a WorkPlan and determines which Board Agents are responsible.\\n2. **Board Planning:** Board Agents refine the goal",
              "assign budgets",
              "define SLAs and set policies.  They request MicroAgentStacks and ModelSelectorAgents as needed.\\n3. **Stack Deployment:** For each task",
              "a MicroAgentStack is spawned.  The stack uses Adapters to fetch sources (repos",
              "CRMs)",
              "Operators to parse/analyse",
              "and Guards to enforce policies.  Microservices implement the digest pipeline",
              "orchestrated via the event bus.\\n4. **Model Selection & Execution:** When a service or operator needs AI inference (embeddings",
              "summarisation",
              "code explanation)",
              "it calls a ModelSelectorAgent.  The selected model is executed via local model servers or remote APIs.\\n5. **\"}"
            ],
            "spawn_policy": [
              "pack=PACK-20c0247c",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.f",
            "type": "Agent"
          }
        },
        {
          "id": "They request MicroAgentStacks",
          "name": "They request MicroAgentStacks",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "mn NCR-2",
            "agent_id": "They request MicroAgentStacks",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-40e8ffaf",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "They request MicroAgentStacks",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined_framework_architecture.md",
            "source_rows_json": [
              "{\"sample\": \"1. **Goal Intake:** A high\u2011level goal arrives.  NOA normalises it into a WorkPlan and determines which Board Agents are responsible.\\n2. **Board Planning:** Board Agents refine the goal",
              "assign budgets",
              "define SLAs and set policies.  They request MicroAgentStacks and ModelSelectorAgents as needed.\\n3. **Stack Deployment:** For each task",
              "a MicroAgentStack is spawned.  The stack uses Adapters to fetch sources (repos",
              "CRMs)",
              "Operators to parse/analyse",
              "and Guards to enforce policies.  Microservices implement the digest pipeline",
              "orchestrated via the event bus.\\n4. **Model Selection & Execution:** When a service or operator needs AI inference (embeddings",
              "summarisation",
              "code explanation)",
              "it calls a ModelSelectorAgent.  The selected model is executed via local model servers or remote APIs.\\n5. **\"}"
            ],
            "spawn_policy": [
              "pack=PACK-40e8ffaf",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Digest Agent",
          "name": "Digest Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "es FPS-14",
            "agent_id": "Digest Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-a7c4c5d1",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "Digest Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined_framework_architecture.md",
            "source_rows_json": [
              "{\"sample\": \"1. **Modularity & Scalability:** By decomposing functionality into microservices and agents",
              "ark\u2011os\u2011noa can scale horizontally and update components independently\u2014avoiding the pitfalls of monolithic systems\u301043537238352704\u2020L1068-L1088\u3011.\\n2. **Security & Compliance:** The Capsule pattern",
              "no DinD policy",
              "private data plane and sidecar enforcement minimise the attack surface.  SBOMs",
              "licences and vulnerability scans ensure supply\u2011chain integrity.\\n3. **Intelligence & Adaptability:** ModelSelectorAgents enable adaptive AI usage",
              "the Digest Agent builds knowledge graphs and embeddings",
              "the board can ingest CRMs and SaaS systems without downtime using the strangler proxy.\\n4. **Auditability & Provenance:** Every decision",
              "model selection and action is logged in Postgres and associated with a run ID\"}"
            ],
            "spawn_policy": [
              "pack=PACK-a7c4c5d1",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "COO Agent",
          "name": "COO Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "xf AYN-3",
            "agent_id": "COO Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-29d06ba7",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "COO Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined-architecture-v.2.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffNOA - ExecutiveCommanderChiefAgent\\nOverview\\nArk-AI-NOA is a local-first agentic OS: a hive-mind of orchestrated micro-agent stacks that plan",
              "act",
              "learn",
              "adapt",
              "and self-upgrade your entire software/hardware environment. It replaces traditional apps and cloud-fragility with a neural runtime + dynamic UI that digests code/data",
              "composes tools on demand",
              "and continuously optimizes itself across Server",
              "Network",
              "PC and mobile. Long-term",
              "NOA is the autonomous command center that owns your stack end-to-end-air-gapped when needed",
              "auditable",
              "and capable of running any business autonomously without SaaS.\\nDefinition & Purpose\\nNOA (sometimes called the ExecutiveCommanderChiefAgent) is the top-level orchestrator of the ark-os-noa platform. It acts like a CEO for the agent ecosystem: it translates \"}"
            ],
            "spawn_policy": [
              "pack=PACK-29d06ba7",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Each stack has its own CommandChiefAgent",
          "name": "Each stack has its own CommandChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "js FVM",
            "agent_id": "Each stack has its own CommandChiefAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-623ba98d",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Each stack has its own CommandChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined-architecture-v.2.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffNOA - ExecutiveCommanderChiefAgent\\nOverview\\nArk-AI-NOA is a local-first agentic OS: a hive-mind of orchestrated micro-agent stacks that plan",
              "act",
              "learn",
              "adapt",
              "and self-upgrade your entire software/hardware environment. It replaces traditional apps and cloud-fragility with a neural runtime + dynamic UI that digests code/data",
              "composes tools on demand",
              "and continuously optimizes itself across Server",
              "Network",
              "PC and mobile. Long-term",
              "NOA is the autonomous command center that owns your stack end-to-end-air-gapped when needed",
              "auditable",
              "and capable of running any business autonomously without SaaS.\\nDefinition & Purpose\\nNOA (sometimes called the ExecutiveCommanderChiefAgent) is the top-level orchestrator of the ark-os-noa platform. It acts like a CEO for the agent ecosystem: it translates \"}"
            ],
            "spawn_policy": [
              "pack=PACK-623ba98d",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "NOA - ExecutiveCommanderChiefAgent\nOverview",
          "name": "NOA - ExecutiveCommanderChiefAgent\nOverview",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "za STE",
            "agent_id": "NOA - ExecutiveCommanderChiefAgent\nOverview",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-37be9963",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "NOA - ExecutiveCommanderChiefAgent\nOverview",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Executive",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined-architecture-v.2.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffNOA - ExecutiveCommanderChiefAgent\\nOverview\\nArk-AI-NOA is a local-first agentic OS: a hive-mind of orchestrated micro-agent stacks that plan",
              "act",
              "learn",
              "adapt",
              "and self-upgrade your entire software/hardware environment. It replaces traditional apps and cloud-fragility with a neural runtime + dynamic UI that digests code/data",
              "composes tools on demand",
              "and continuously optimizes itself across Server",
              "Network",
              "PC and mobile. Long-term",
              "NOA is the autonomous command center that owns your stack end-to-end-air-gapped when needed",
              "auditable",
              "and capable of running any business autonomously without SaaS.\\nDefinition & Purpose\\nNOA (sometimes called the ExecutiveCommanderChiefAgent) is the top-level orchestrator of the ark-os-noa platform. It acts like a CEO for the agent ecosystem: it translates \"}"
            ],
            "spawn_policy": [
              "pack=PACK-37be9963",
              "min_plane=Deployed",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "A MicroAgentStack",
          "name": "A MicroAgentStack",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "xd VAX",
            "agent_id": "A MicroAgentStack",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-598896fd",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "A MicroAgentStack",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined-architecture-v.2.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffNOA - ExecutiveCommanderChiefAgent\\nOverview\\nArk-AI-NOA is a local-first agentic OS: a hive-mind of orchestrated micro-agent stacks that plan",
              "act",
              "learn",
              "adapt",
              "and self-upgrade your entire software/hardware environment. It replaces traditional apps and cloud-fragility with a neural runtime + dynamic UI that digests code/data",
              "composes tools on demand",
              "and continuously optimizes itself across Server",
              "Network",
              "PC and mobile. Long-term",
              "NOA is the autonomous command center that owns your stack end-to-end-air-gapped when needed",
              "auditable",
              "and capable of running any business autonomously without SaaS.\\nDefinition & Purpose\\nNOA (sometimes called the ExecutiveCommanderChiefAgent) is the top-level orchestrator of the ark-os-noa platform. It acts like a CEO for the agent ecosystem: it translates \"}"
            ],
            "spawn_policy": [
              "pack=PACK-598896fd",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "By delegating model/tool choice to a dedicated ModelSelectorAgent",
          "name": "By delegating model/tool choice to a dedicated ModelSelectorAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "qf DBJ-3",
            "agent_id": "By delegating model/tool choice to a dedicated ModelSelectorAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-ead9fea9",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-F",
            "display_name": "By delegating model/tool choice to a dedicated ModelSelectorAgent",
            "efg_requirements": [
              "gpu>=1",
              "vram>=8GB",
              "disk>=10GB",
              "net>=50Mbps"
            ],
            "epic": "F",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined-architecture-v.2.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffNOA - ExecutiveCommanderChiefAgent\\nOverview\\nArk-AI-NOA is a local-first agentic OS: a hive-mind of orchestrated micro-agent stacks that plan",
              "act",
              "learn",
              "adapt",
              "and self-upgrade your entire software/hardware environment. It replaces traditional apps and cloud-fragility with a neural runtime + dynamic UI that digests code/data",
              "composes tools on demand",
              "and continuously optimizes itself across Server",
              "Network",
              "PC and mobile. Long-term",
              "NOA is the autonomous command center that owns your stack end-to-end-air-gapped when needed",
              "auditable",
              "and capable of running any business autonomously without SaaS.\\nDefinition & Purpose\\nNOA (sometimes called the ExecutiveCommanderChiefAgent) is the top-level orchestrator of the ark-os-noa platform. It acts like a CEO for the agent ecosystem: it translates \"}"
            ],
            "spawn_policy": [
              "pack=PACK-ead9fea9",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.f",
            "type": "Agent"
          }
        },
        {
          "id": "MicroAgentStacks",
          "name": "MicroAgentStacks",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "kp RIU-28",
            "agent_id": "MicroAgentStacks",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-24114ed9",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "MicroAgentStacks",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined-architecture-v.2.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffNOA - ExecutiveCommanderChiefAgent\\nOverview\\nArk-AI-NOA is a local-first agentic OS: a hive-mind of orchestrated micro-agent stacks that plan",
              "act",
              "learn",
              "adapt",
              "and self-upgrade your entire software/hardware environment. It replaces traditional apps and cloud-fragility with a neural runtime + dynamic UI that digests code/data",
              "composes tools on demand",
              "and continuously optimizes itself across Server",
              "Network",
              "PC and mobile. Long-term",
              "NOA is the autonomous command center that owns your stack end-to-end-air-gapped when needed",
              "auditable",
              "and capable of running any business autonomously without SaaS.\\nDefinition & Purpose\\nNOA (sometimes called the ExecutiveCommanderChiefAgent) is the top-level orchestrator of the ark-os-noa platform. It acts like a CEO for the agent ecosystem: it translates \"}"
            ],
            "spawn_policy": [
              "pack=PACK-24114ed9",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Each stack reports to its Board Agent",
          "name": "Each stack reports to its Board Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "sw PTK-3",
            "agent_id": "Each stack reports to its Board Agent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-bc2ff087",
            "category": "Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Each stack reports to its Board Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined-architecture-v.2.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffNOA - ExecutiveCommanderChiefAgent\\nOverview\\nArk-AI-NOA is a local-first agentic OS: a hive-mind of orchestrated micro-agent stacks that plan",
              "act",
              "learn",
              "adapt",
              "and self-upgrade your entire software/hardware environment. It replaces traditional apps and cloud-fragility with a neural runtime + dynamic UI that digests code/data",
              "composes tools on demand",
              "and continuously optimizes itself across Server",
              "Network",
              "PC and mobile. Long-term",
              "NOA is the autonomous command center that owns your stack end-to-end-air-gapped when needed",
              "auditable",
              "and capable of running any business autonomously without SaaS.\\nDefinition & Purpose\\nNOA (sometimes called the ExecutiveCommanderChiefAgent) is the top-level orchestrator of the ark-os-noa platform. It acts like a CEO for the agent ecosystem: it translates \"}"
            ],
            "spawn_policy": [
              "pack=PACK-bc2ff087",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "MicroAgentStack",
          "name": "MicroAgentStack",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "qi KZU-9",
            "agent_id": "MicroAgentStack",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-d2c954bc",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "MicroAgentStack",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined-architecture-v.2.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffNOA - ExecutiveCommanderChiefAgent\\nOverview\\nArk-AI-NOA is a local-first agentic OS: a hive-mind of orchestrated micro-agent stacks that plan",
              "act",
              "learn",
              "adapt",
              "and self-upgrade your entire software/hardware environment. It replaces traditional apps and cloud-fragility with a neural runtime + dynamic UI that digests code/data",
              "composes tools on demand",
              "and continuously optimizes itself across Server",
              "Network",
              "PC and mobile. Long-term",
              "NOA is the autonomous command center that owns your stack end-to-end-air-gapped when needed",
              "auditable",
              "and capable of running any business autonomously without SaaS.\\nDefinition & Purpose\\nNOA (sometimes called the ExecutiveCommanderChiefAgent) is the top-level orchestrator of the ark-os-noa platform. It acts like a CEO for the agent ecosystem: it translates \"}"
            ],
            "spawn_policy": [
              "pack=PACK-d2c954bc",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Board Agents can spin up one or more MicroAgentStacks",
          "name": "Board Agents can spin up one or more MicroAgentStacks",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "hj AFR",
            "agent_id": "Board Agents can spin up one or more MicroAgentStacks",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-74f61bd5",
            "category": "Micro-Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "Board Agents can spin up one or more MicroAgentStacks",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined-architecture-v.2.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffNOA - ExecutiveCommanderChiefAgent\\nOverview\\nArk-AI-NOA is a local-first agentic OS: a hive-mind of orchestrated micro-agent stacks that plan",
              "act",
              "learn",
              "adapt",
              "and self-upgrade your entire software/hardware environment. It replaces traditional apps and cloud-fragility with a neural runtime + dynamic UI that digests code/data",
              "composes tools on demand",
              "and continuously optimizes itself across Server",
              "Network",
              "PC and mobile. Long-term",
              "NOA is the autonomous command center that owns your stack end-to-end-air-gapped when needed",
              "auditable",
              "and capable of running any business autonomously without SaaS.\\nDefinition & Purpose\\nNOA (sometimes called the ExecutiveCommanderChiefAgent) is the top-level orchestrator of the ark-os-noa platform. It acts like a CEO for the agent ecosystem: it translates \"}"
            ],
            "spawn_policy": [
              "pack=PACK-74f61bd5",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Each stack digests one or more sources and returns results to the Digest Agent",
          "name": "Each stack digests one or more sources and returns results to the Digest Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ce YFE-3",
            "agent_id": "Each stack digests one or more sources and returns results to the Digest Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-9332d4db",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "Each stack digests one or more sources and returns results to the Digest Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined-architecture-v.2.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffNOA - ExecutiveCommanderChiefAgent\\nOverview\\nArk-AI-NOA is a local-first agentic OS: a hive-mind of orchestrated micro-agent stacks that plan",
              "act",
              "learn",
              "adapt",
              "and self-upgrade your entire software/hardware environment. It replaces traditional apps and cloud-fragility with a neural runtime + dynamic UI that digests code/data",
              "composes tools on demand",
              "and continuously optimizes itself across Server",
              "Network",
              "PC and mobile. Long-term",
              "NOA is the autonomous command center that owns your stack end-to-end-air-gapped when needed",
              "auditable",
              "and capable of running any business autonomously without SaaS.\\nDefinition & Purpose\\nNOA (sometimes called the ExecutiveCommanderChiefAgent) is the top-level orchestrator of the ark-os-noa platform. It acts like a CEO for the agent ecosystem: it translates \"}"
            ],
            "spawn_policy": [
              "pack=PACK-9332d4db",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "Growth/Partnerships Agent",
          "name": "Growth/Partnerships Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ij VCO-3",
            "agent_id": "Growth/Partnerships Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-ddb18977",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Growth/Partnerships Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined-architecture-v.2.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffNOA - ExecutiveCommanderChiefAgent\\nOverview\\nArk-AI-NOA is a local-first agentic OS: a hive-mind of orchestrated micro-agent stacks that plan",
              "act",
              "learn",
              "adapt",
              "and self-upgrade your entire software/hardware environment. It replaces traditional apps and cloud-fragility with a neural runtime + dynamic UI that digests code/data",
              "composes tools on demand",
              "and continuously optimizes itself across Server",
              "Network",
              "PC and mobile. Long-term",
              "NOA is the autonomous command center that owns your stack end-to-end-air-gapped when needed",
              "auditable",
              "and capable of running any business autonomously without SaaS.\\nDefinition & Purpose\\nNOA (sometimes called the ExecutiveCommanderChiefAgent) is the top-level orchestrator of the ark-os-noa platform. It acts like a CEO for the agent ecosystem: it translates \"}"
            ],
            "spawn_policy": [
              "pack=PACK-ddb18977",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "A ModelSelectorAgent",
          "name": "A ModelSelectorAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "qx HGV",
            "agent_id": "A ModelSelectorAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-0ad3854b",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-F",
            "display_name": "A ModelSelectorAgent",
            "efg_requirements": [
              "gpu>=1",
              "vram>=8GB",
              "disk>=10GB",
              "net>=50Mbps"
            ],
            "epic": "F",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined-architecture-v.2.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffNOA - ExecutiveCommanderChiefAgent\\nOverview\\nArk-AI-NOA is a local-first agentic OS: a hive-mind of orchestrated micro-agent stacks that plan",
              "act",
              "learn",
              "adapt",
              "and self-upgrade your entire software/hardware environment. It replaces traditional apps and cloud-fragility with a neural runtime + dynamic UI that digests code/data",
              "composes tools on demand",
              "and continuously optimizes itself across Server",
              "Network",
              "PC and mobile. Long-term",
              "NOA is the autonomous command center that owns your stack end-to-end-air-gapped when needed",
              "auditable",
              "and capable of running any business autonomously without SaaS.\\nDefinition & Purpose\\nNOA (sometimes called the ExecutiveCommanderChiefAgent) is the top-level orchestrator of the ark-os-noa platform. It acts like a CEO for the agent ecosystem: it translates \"}"
            ],
            "spawn_policy": [
              "pack=PACK-0ad3854b",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.f",
            "type": "Agent"
          }
        },
        {
          "id": "CommandChiefAgent",
          "name": "CommandChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "jj CON-11",
            "agent_id": "CommandChiefAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-299e0062",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "CommandChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined-architecture-v.2.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffNOA - ExecutiveCommanderChiefAgent\\nOverview\\nArk-AI-NOA is a local-first agentic OS: a hive-mind of orchestrated micro-agent stacks that plan",
              "act",
              "learn",
              "adapt",
              "and self-upgrade your entire software/hardware environment. It replaces traditional apps and cloud-fragility with a neural runtime + dynamic UI that digests code/data",
              "composes tools on demand",
              "and continuously optimizes itself across Server",
              "Network",
              "PC and mobile. Long-term",
              "NOA is the autonomous command center that owns your stack end-to-end-air-gapped when needed",
              "auditable",
              "and capable of running any business autonomously without SaaS.\\nDefinition & Purpose\\nNOA (sometimes called the ExecutiveCommanderChiefAgent) is the top-level orchestrator of the ark-os-noa platform. It acts like a CEO for the agent ecosystem: it translates \"}"
            ],
            "spawn_policy": [
              "pack=PACK-299e0062",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "CFO/FinOps Agent",
          "name": "CFO/FinOps Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "vj BWK-3",
            "agent_id": "CFO/FinOps Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-9d07116f",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "CFO/FinOps Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined-architecture-v.2.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffNOA - ExecutiveCommanderChiefAgent\\nOverview\\nArk-AI-NOA is a local-first agentic OS: a hive-mind of orchestrated micro-agent stacks that plan",
              "act",
              "learn",
              "adapt",
              "and self-upgrade your entire software/hardware environment. It replaces traditional apps and cloud-fragility with a neural runtime + dynamic UI that digests code/data",
              "composes tools on demand",
              "and continuously optimizes itself across Server",
              "Network",
              "PC and mobile. Long-term",
              "NOA is the autonomous command center that owns your stack end-to-end-air-gapped when needed",
              "auditable",
              "and capable of running any business autonomously without SaaS.\\nDefinition & Purpose\\nNOA (sometimes called the ExecutiveCommanderChiefAgent) is the top-level orchestrator of the ark-os-noa platform. It acts like a CEO for the agent ecosystem: it translates \"}"
            ],
            "spawn_policy": [
              "pack=PACK-9d07116f",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Board Agents and MicroAgentStacks",
          "name": "Board Agents and MicroAgentStacks",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "fh QJZ-3",
            "agent_id": "Board Agents and MicroAgentStacks",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-4ebd1903",
            "category": "Micro-Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "Board Agents and MicroAgentStacks",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined-architecture-v.2.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffNOA - ExecutiveCommanderChiefAgent\\nOverview\\nArk-AI-NOA is a local-first agentic OS: a hive-mind of orchestrated micro-agent stacks that plan",
              "act",
              "learn",
              "adapt",
              "and self-upgrade your entire software/hardware environment. It replaces traditional apps and cloud-fragility with a neural runtime + dynamic UI that digests code/data",
              "composes tools on demand",
              "and continuously optimizes itself across Server",
              "Network",
              "PC and mobile. Long-term",
              "NOA is the autonomous command center that owns your stack end-to-end-air-gapped when needed",
              "auditable",
              "and capable of running any business autonomously without SaaS.\\nDefinition & Purpose\\nNOA (sometimes called the ExecutiveCommanderChiefAgent) is the top-level orchestrator of the ark-os-noa platform. It acts like a CEO for the agent ecosystem: it translates \"}"
            ],
            "spawn_policy": [
              "pack=PACK-4ebd1903",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Often uses MicroAgentStacks",
          "name": "Often uses MicroAgentStacks",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "kr KFW-3",
            "agent_id": "Often uses MicroAgentStacks",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-fe076a0d",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "Often uses MicroAgentStacks",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined-architecture-v.2.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffNOA - ExecutiveCommanderChiefAgent\\nOverview\\nArk-AI-NOA is a local-first agentic OS: a hive-mind of orchestrated micro-agent stacks that plan",
              "act",
              "learn",
              "adapt",
              "and self-upgrade your entire software/hardware environment. It replaces traditional apps and cloud-fragility with a neural runtime + dynamic UI that digests code/data",
              "composes tools on demand",
              "and continuously optimizes itself across Server",
              "Network",
              "PC and mobile. Long-term",
              "NOA is the autonomous command center that owns your stack end-to-end-air-gapped when needed",
              "auditable",
              "and capable of running any business autonomously without SaaS.\\nDefinition & Purpose\\nNOA (sometimes called the ExecutiveCommanderChiefAgent) is the top-level orchestrator of the ark-os-noa platform. It acts like a CEO for the agent ecosystem: it translates \"}"
            ],
            "spawn_policy": [
              "pack=PACK-fe076a0d",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "ModelSelectorAgent",
          "name": "ModelSelectorAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "fl YEL-10",
            "agent_id": "ModelSelectorAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-20c0247c",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-F",
            "display_name": "ModelSelectorAgent",
            "efg_requirements": [
              "gpu>=1",
              "vram>=8GB",
              "disk>=10GB",
              "net>=50Mbps"
            ],
            "epic": "F",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined-architecture-v.2.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffNOA - ExecutiveCommanderChiefAgent\\nOverview\\nArk-AI-NOA is a local-first agentic OS: a hive-mind of orchestrated micro-agent stacks that plan",
              "act",
              "learn",
              "adapt",
              "and self-upgrade your entire software/hardware environment. It replaces traditional apps and cloud-fragility with a neural runtime + dynamic UI that digests code/data",
              "composes tools on demand",
              "and continuously optimizes itself across Server",
              "Network",
              "PC and mobile. Long-term",
              "NOA is the autonomous command center that owns your stack end-to-end-air-gapped when needed",
              "auditable",
              "and capable of running any business autonomously without SaaS.\\nDefinition & Purpose\\nNOA (sometimes called the ExecutiveCommanderChiefAgent) is the top-level orchestrator of the ark-os-noa platform. It acts like a CEO for the agent ecosystem: it translates \"}"
            ],
            "spawn_policy": [
              "pack=PACK-20c0247c",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.f",
            "type": "Agent"
          }
        },
        {
          "id": "Digest Agent",
          "name": "Digest Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "es FPS-15",
            "agent_id": "Digest Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-a7c4c5d1",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "Digest Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined-architecture-v.2.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffNOA - ExecutiveCommanderChiefAgent\\nOverview\\nArk-AI-NOA is a local-first agentic OS: a hive-mind of orchestrated micro-agent stacks that plan",
              "act",
              "learn",
              "adapt",
              "and self-upgrade your entire software/hardware environment. It replaces traditional apps and cloud-fragility with a neural runtime + dynamic UI that digests code/data",
              "composes tools on demand",
              "and continuously optimizes itself across Server",
              "Network",
              "PC and mobile. Long-term",
              "NOA is the autonomous command center that owns your stack end-to-end-air-gapped when needed",
              "auditable",
              "and capable of running any business autonomously without SaaS.\\nDefinition & Purpose\\nNOA (sometimes called the ExecutiveCommanderChiefAgent) is the top-level orchestrator of the ark-os-noa platform. It acts like a CEO for the agent ecosystem: it translates \"}"
            ],
            "spawn_policy": [
              "pack=PACK-a7c4c5d1",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "Board Agent requests a ModelSelectorAgent",
          "name": "Board Agent requests a ModelSelectorAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "dx WOY",
            "agent_id": "Board Agent requests a ModelSelectorAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-5bf07d4b",
            "category": "Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-CORE-F",
            "display_name": "Board Agent requests a ModelSelectorAgent",
            "efg_requirements": [
              "gpu>=1",
              "vram>=8GB",
              "disk>=10GB",
              "net>=50Mbps"
            ],
            "epic": "F",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined-architecture-v.2.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffNOA - ExecutiveCommanderChiefAgent\\nOverview\\nArk-AI-NOA is a local-first agentic OS: a hive-mind of orchestrated micro-agent stacks that plan",
              "act",
              "learn",
              "adapt",
              "and self-upgrade your entire software/hardware environment. It replaces traditional apps and cloud-fragility with a neural runtime + dynamic UI that digests code/data",
              "composes tools on demand",
              "and continuously optimizes itself across Server",
              "Network",
              "PC and mobile. Long-term",
              "NOA is the autonomous command center that owns your stack end-to-end-air-gapped when needed",
              "auditable",
              "and capable of running any business autonomously without SaaS.\\nDefinition & Purpose\\nNOA (sometimes called the ExecutiveCommanderChiefAgent) is the top-level orchestrator of the ark-os-noa platform. It acts like a CEO for the agent ecosystem: it translates \"}"
            ],
            "spawn_policy": [
              "pack=PACK-5bf07d4b",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.core.f",
            "type": "Agent"
          }
        },
        {
          "id": "ExecutiveCommanderChiefAgent",
          "name": "ExecutiveCommanderChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "vw MFS-12",
            "agent_id": "ExecutiveCommanderChiefAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-df6b24c4",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "ExecutiveCommanderChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Executive",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined-architecture-v.2.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffNOA - ExecutiveCommanderChiefAgent\\nOverview\\nArk-AI-NOA is a local-first agentic OS: a hive-mind of orchestrated micro-agent stacks that plan",
              "act",
              "learn",
              "adapt",
              "and self-upgrade your entire software/hardware environment. It replaces traditional apps and cloud-fragility with a neural runtime + dynamic UI that digests code/data",
              "composes tools on demand",
              "and continuously optimizes itself across Server",
              "Network",
              "PC and mobile. Long-term",
              "NOA is the autonomous command center that owns your stack end-to-end-air-gapped when needed",
              "auditable",
              "and capable of running any business autonomously without SaaS.\\nDefinition & Purpose\\nNOA (sometimes called the ExecutiveCommanderChiefAgent) is the top-level orchestrator of the ark-os-noa platform. It acts like a CEO for the agent ecosystem: it translates \"}"
            ],
            "spawn_policy": [
              "pack=PACK-df6b24c4",
              "min_plane=Deployed",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Board Agent",
          "name": "Board Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "jm MDQ-5",
            "agent_id": "Board Agent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-796c1e54",
            "category": "Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Board Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined-architecture-v.2.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffNOA - ExecutiveCommanderChiefAgent\\nOverview\\nArk-AI-NOA is a local-first agentic OS: a hive-mind of orchestrated micro-agent stacks that plan",
              "act",
              "learn",
              "adapt",
              "and self-upgrade your entire software/hardware environment. It replaces traditional apps and cloud-fragility with a neural runtime + dynamic UI that digests code/data",
              "composes tools on demand",
              "and continuously optimizes itself across Server",
              "Network",
              "PC and mobile. Long-term",
              "NOA is the autonomous command center that owns your stack end-to-end-air-gapped when needed",
              "auditable",
              "and capable of running any business autonomously without SaaS.\\nDefinition & Purpose\\nNOA (sometimes called the ExecutiveCommanderChiefAgent) is the top-level orchestrator of the ark-os-noa platform. It acts like a CEO for the agent ecosystem: it translates \"}"
            ],
            "spawn_policy": [
              "pack=PACK-796c1e54",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Commission digestion tasks and consume the Digest Agent",
          "name": "Commission digestion tasks and consume the Digest Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "zq BMB-2",
            "agent_id": "Commission digestion tasks and consume the Digest Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-277baad0",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "Commission digestion tasks and consume the Digest Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined-architecture-v.2.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffNOA - ExecutiveCommanderChiefAgent\\nOverview\\nArk-AI-NOA is a local-first agentic OS: a hive-mind of orchestrated micro-agent stacks that plan",
              "act",
              "learn",
              "adapt",
              "and self-upgrade your entire software/hardware environment. It replaces traditional apps and cloud-fragility with a neural runtime + dynamic UI that digests code/data",
              "composes tools on demand",
              "and continuously optimizes itself across Server",
              "Network",
              "PC and mobile. Long-term",
              "NOA is the autonomous command center that owns your stack end-to-end-air-gapped when needed",
              "auditable",
              "and capable of running any business autonomously without SaaS.\\nDefinition & Purpose\\nNOA (sometimes called the ExecutiveCommanderChiefAgent) is the top-level orchestrator of the ark-os-noa platform. It acts like a CEO for the agent ecosystem: it translates \"}"
            ],
            "spawn_policy": [
              "pack=PACK-277baad0",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "The Digest Agent",
          "name": "The Digest Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "lp TKI-3",
            "agent_id": "The Digest Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-919bde43",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "The Digest Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined-architecture-v.2.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffNOA - ExecutiveCommanderChiefAgent\\nOverview\\nArk-AI-NOA is a local-first agentic OS: a hive-mind of orchestrated micro-agent stacks that plan",
              "act",
              "learn",
              "adapt",
              "and self-upgrade your entire software/hardware environment. It replaces traditional apps and cloud-fragility with a neural runtime + dynamic UI that digests code/data",
              "composes tools on demand",
              "and continuously optimizes itself across Server",
              "Network",
              "PC and mobile. Long-term",
              "NOA is the autonomous command center that owns your stack end-to-end-air-gapped when needed",
              "auditable",
              "and capable of running any business autonomously without SaaS.\\nDefinition & Purpose\\nNOA (sometimes called the ExecutiveCommanderChiefAgent) is the top-level orchestrator of the ark-os-noa platform. It acts like a CEO for the agent ecosystem: it translates \"}"
            ],
            "spawn_policy": [
              "pack=PACK-919bde43",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "Each stack operates autonomously but reports progress to its Board Agent",
          "name": "Each stack operates autonomously but reports progress to its Board Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "kh ROJ-3",
            "agent_id": "Each stack operates autonomously but reports progress to its Board Agent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-d499d363",
            "category": "Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Each stack operates autonomously but reports progress to its Board Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined-architecture-v.2.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffNOA - ExecutiveCommanderChiefAgent\\nOverview\\nArk-AI-NOA is a local-first agentic OS: a hive-mind of orchestrated micro-agent stacks that plan",
              "act",
              "learn",
              "adapt",
              "and self-upgrade your entire software/hardware environment. It replaces traditional apps and cloud-fragility with a neural runtime + dynamic UI that digests code/data",
              "composes tools on demand",
              "and continuously optimizes itself across Server",
              "Network",
              "PC and mobile. Long-term",
              "NOA is the autonomous command center that owns your stack end-to-end-air-gapped when needed",
              "auditable",
              "and capable of running any business autonomously without SaaS.\\nDefinition & Purpose\\nNOA (sometimes called the ExecutiveCommanderChiefAgent) is the top-level orchestrator of the ark-os-noa platform. It acts like a CEO for the agent ecosystem: it translates \"}"
            ],
            "spawn_policy": [
              "pack=PACK-d499d363",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Legal/Compliance Agent",
          "name": "Legal/Compliance Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "rd BLD-3",
            "agent_id": "Legal/Compliance Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-4ffaa7e7",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Legal/Compliance Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined-architecture-v.2.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffNOA - ExecutiveCommanderChiefAgent\\nOverview\\nArk-AI-NOA is a local-first agentic OS: a hive-mind of orchestrated micro-agent stacks that plan",
              "act",
              "learn",
              "adapt",
              "and self-upgrade your entire software/hardware environment. It replaces traditional apps and cloud-fragility with a neural runtime + dynamic UI that digests code/data",
              "composes tools on demand",
              "and continuously optimizes itself across Server",
              "Network",
              "PC and mobile. Long-term",
              "NOA is the autonomous command center that owns your stack end-to-end-air-gapped when needed",
              "auditable",
              "and capable of running any business autonomously without SaaS.\\nDefinition & Purpose\\nNOA (sometimes called the ExecutiveCommanderChiefAgent) is the top-level orchestrator of the ark-os-noa platform. It acts like a CEO for the agent ecosystem: it translates \"}"
            ],
            "spawn_policy": [
              "pack=PACK-4ffaa7e7",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Security Agent",
          "name": "Security Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "mr YWX-4",
            "agent_id": "Security Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-bd71ef60",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "Security Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=2GB",
              "disk>=2GB",
              "net>=10Mbps"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined-architecture-v.2.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffNOA - ExecutiveCommanderChiefAgent\\nOverview\\nArk-AI-NOA is a local-first agentic OS: a hive-mind of orchestrated micro-agent stacks that plan",
              "act",
              "learn",
              "adapt",
              "and self-upgrade your entire software/hardware environment. It replaces traditional apps and cloud-fragility with a neural runtime + dynamic UI that digests code/data",
              "composes tools on demand",
              "and continuously optimizes itself across Server",
              "Network",
              "PC and mobile. Long-term",
              "NOA is the autonomous command center that owns your stack end-to-end-air-gapped when needed",
              "auditable",
              "and capable of running any business autonomously without SaaS.\\nDefinition & Purpose\\nNOA (sometimes called the ExecutiveCommanderChiefAgent) is the top-level orchestrator of the ark-os-noa platform. It acts like a CEO for the agent ecosystem: it translates \"}"
            ],
            "spawn_policy": [
              "pack=PACK-bd71ef60",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "Used to parallelize large digests-each stack handles a set of sources and feeds results back to the Digest Agent",
          "name": "Used to parallelize large digests-each stack handles a set of sources and feeds results back to the Digest Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "cd YKQ",
            "agent_id": "Used to parallelize large digests-each stack handles a set of sources and feeds results back to the Digest Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-5f451c1b",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "Used to parallelize large digests-each stack handles a set of sources and feeds results back to the Digest Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined-architecture-v.2.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffNOA - ExecutiveCommanderChiefAgent\\nOverview\\nArk-AI-NOA is a local-first agentic OS: a hive-mind of orchestrated micro-agent stacks that plan",
              "act",
              "learn",
              "adapt",
              "and self-upgrade your entire software/hardware environment. It replaces traditional apps and cloud-fragility with a neural runtime + dynamic UI that digests code/data",
              "composes tools on demand",
              "and continuously optimizes itself across Server",
              "Network",
              "PC and mobile. Long-term",
              "NOA is the autonomous command center that owns your stack end-to-end-air-gapped when needed",
              "auditable",
              "and capable of running any business autonomously without SaaS.\\nDefinition & Purpose\\nNOA (sometimes called the ExecutiveCommanderChiefAgent) is the top-level orchestrator of the ark-os-noa platform. It acts like a CEO for the agent ecosystem: it translates \"}"
            ],
            "spawn_policy": [
              "pack=PACK-5f451c1b",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "Micro-Agent",
          "name": "Micro-Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ji ADF-5",
            "agent_id": "Micro-Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-fc7be497",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "Micro-Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined-architecture-v.2.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffNOA - ExecutiveCommanderChiefAgent\\nOverview\\nArk-AI-NOA is a local-first agentic OS: a hive-mind of orchestrated micro-agent stacks that plan",
              "act",
              "learn",
              "adapt",
              "and self-upgrade your entire software/hardware environment. It replaces traditional apps and cloud-fragility with a neural runtime + dynamic UI that digests code/data",
              "composes tools on demand",
              "and continuously optimizes itself across Server",
              "Network",
              "PC and mobile. Long-term",
              "NOA is the autonomous command center that owns your stack end-to-end-air-gapped when needed",
              "auditable",
              "and capable of running any business autonomously without SaaS.\\nDefinition & Purpose\\nNOA (sometimes called the ExecutiveCommanderChiefAgent) is the top-level orchestrator of the ark-os-noa platform. It acts like a CEO for the agent ecosystem: it translates \"}"
            ],
            "spawn_policy": [
              "pack=PACK-fc7be497",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Strategy/CTO Agent",
          "name": "Strategy/CTO Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "hn ETD-3",
            "agent_id": "Strategy/CTO Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-b20083ae",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Strategy/CTO Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined-architecture-v.2.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffNOA - ExecutiveCommanderChiefAgent\\nOverview\\nArk-AI-NOA is a local-first agentic OS: a hive-mind of orchestrated micro-agent stacks that plan",
              "act",
              "learn",
              "adapt",
              "and self-upgrade your entire software/hardware environment. It replaces traditional apps and cloud-fragility with a neural runtime + dynamic UI that digests code/data",
              "composes tools on demand",
              "and continuously optimizes itself across Server",
              "Network",
              "PC and mobile. Long-term",
              "NOA is the autonomous command center that owns your stack end-to-end-air-gapped when needed",
              "auditable",
              "and capable of running any business autonomously without SaaS.\\nDefinition & Purpose\\nNOA (sometimes called the ExecutiveCommanderChiefAgent) is the top-level orchestrator of the ark-os-noa platform. It acts like a CEO for the agent ecosystem: it translates \"}"
            ],
            "spawn_policy": [
              "pack=PACK-b20083ae",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Board Agent or CommandChiefAgent",
          "name": "Board Agent or CommandChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "jf UBC-3",
            "agent_id": "Board Agent or CommandChiefAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-9ca53e6b",
            "category": "Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Board Agent or CommandChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined-architecture-v.2.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffNOA - ExecutiveCommanderChiefAgent\\nOverview\\nArk-AI-NOA is a local-first agentic OS: a hive-mind of orchestrated micro-agent stacks that plan",
              "act",
              "learn",
              "adapt",
              "and self-upgrade your entire software/hardware environment. It replaces traditional apps and cloud-fragility with a neural runtime + dynamic UI that digests code/data",
              "composes tools on demand",
              "and continuously optimizes itself across Server",
              "Network",
              "PC and mobile. Long-term",
              "NOA is the autonomous command center that owns your stack end-to-end-air-gapped when needed",
              "auditable",
              "and capable of running any business autonomously without SaaS.\\nDefinition & Purpose\\nNOA (sometimes called the ExecutiveCommanderChiefAgent) is the top-level orchestrator of the ark-os-noa platform. It acts like a CEO for the agent ecosystem: it translates \"}"
            ],
            "spawn_policy": [
              "pack=PACK-9ca53e6b",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Telemetry Agent",
          "name": "Telemetry Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "oe IBT-5",
            "agent_id": "Telemetry Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-88389aa1",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Telemetry Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined-architecture-v.2.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffNOA - ExecutiveCommanderChiefAgent\\nOverview\\nArk-AI-NOA is a local-first agentic OS: a hive-mind of orchestrated micro-agent stacks that plan",
              "act",
              "learn",
              "adapt",
              "and self-upgrade your entire software/hardware environment. It replaces traditional apps and cloud-fragility with a neural runtime + dynamic UI that digests code/data",
              "composes tools on demand",
              "and continuously optimizes itself across Server",
              "Network",
              "PC and mobile. Long-term",
              "NOA is the autonomous command center that owns your stack end-to-end-air-gapped when needed",
              "auditable",
              "and capable of running any business autonomously without SaaS.\\nDefinition & Purpose\\nNOA (sometimes called the ExecutiveCommanderChiefAgent) is the top-level orchestrator of the ark-os-noa platform. It acts like a CEO for the agent ecosystem: it translates \"}"
            ],
            "spawn_policy": [
              "pack=PACK-88389aa1",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "On-demand work pods orchestrated by a CommandChiefAgent",
          "name": "On-demand work pods orchestrated by a CommandChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "sw HTP",
            "agent_id": "On-demand work pods orchestrated by a CommandChiefAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-934fb291",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "On-demand work pods orchestrated by a CommandChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined-architecture-v.2.txt",
            "source_rows_json": [
              "{\"sample\": \"# Content-address an artefact\\ndigest=$(sha256sum output.zip",
              "awk '{print $1}')\\ncp output.zip storage/artifacts/${digest}.zip\\nWhy Internal Data Planes Matter\\nKeeping storage internal reduces the attack surface and simplifies compliance. Data never leaves the environment without explicit signing and approval. When combined with provenance tracking",
              "this approach ensures that every piece of data can be traced back to its origin and verified-critical for regulated environments and supply-chain integrity. # Combined Framework & Architecture of ark-os-noa\\nHigh-Level Overview\\nark-os-noa is an agentic AI platform designed to realise ElementArk/DeFlex's business model. It combines hierarchical organisational patterns (NOA \u2192 Board Agents \u2192 MicroAgentStacks \u2192 microservices) with modern infrastructur\"}"
            ],
            "spawn_policy": [
              "pack=PACK-934fb291",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Each can commission work via MicroAgentStacks",
          "name": "Each can commission work via MicroAgentStacks",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "de LBD-3",
            "agent_id": "Each can commission work via MicroAgentStacks",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-f291ea41",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "Each can commission work via MicroAgentStacks",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined-architecture-v.2.txt",
            "source_rows_json": [
              "{\"sample\": \"# Content-address an artefact\\ndigest=$(sha256sum output.zip",
              "awk '{print $1}')\\ncp output.zip storage/artifacts/${digest}.zip\\nWhy Internal Data Planes Matter\\nKeeping storage internal reduces the attack surface and simplifies compliance. Data never leaves the environment without explicit signing and approval. When combined with provenance tracking",
              "this approach ensures that every piece of data can be traced back to its origin and verified-critical for regulated environments and supply-chain integrity. # Combined Framework & Architecture of ark-os-noa\\nHigh-Level Overview\\nark-os-noa is an agentic AI platform designed to realise ElementArk/DeFlex's business model. It combines hierarchical organisational patterns (NOA \u2192 Board Agents \u2192 MicroAgentStacks \u2192 microservices) with modern infrastructur\"}"
            ],
            "spawn_policy": [
              "pack=PACK-f291ea41",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "They request MicroAgentStacks",
          "name": "They request MicroAgentStacks",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "mn NCR-3",
            "agent_id": "They request MicroAgentStacks",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-40e8ffaf",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "They request MicroAgentStacks",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined-architecture-v.2.txt",
            "source_rows_json": [
              "{\"sample\": \"# Content-address an artefact\\ndigest=$(sha256sum output.zip",
              "awk '{print $1}')\\ncp output.zip storage/artifacts/${digest}.zip\\nWhy Internal Data Planes Matter\\nKeeping storage internal reduces the attack surface and simplifies compliance. Data never leaves the environment without explicit signing and approval. When combined with provenance tracking",
              "this approach ensures that every piece of data can be traced back to its origin and verified-critical for regulated environments and supply-chain integrity. # Combined Framework & Architecture of ark-os-noa\\nHigh-Level Overview\\nark-os-noa is an agentic AI platform designed to realise ElementArk/DeFlex's business model. It combines hierarchical organisational patterns (NOA \u2192 Board Agents \u2192 MicroAgentStacks \u2192 microservices) with modern infrastructur\"}"
            ],
            "spawn_policy": [
              "pack=PACK-40e8ffaf",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "The ExecutiveCommanderChiefAgent",
          "name": "The ExecutiveCommanderChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "gt VJD-3",
            "agent_id": "The ExecutiveCommanderChiefAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-a4541e11",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "The ExecutiveCommanderChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Executive",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined-architecture-v.2.txt",
            "source_rows_json": [
              "{\"sample\": \"# Content-address an artefact\\ndigest=$(sha256sum output.zip",
              "awk '{print $1}')\\ncp output.zip storage/artifacts/${digest}.zip\\nWhy Internal Data Planes Matter\\nKeeping storage internal reduces the attack surface and simplifies compliance. Data never leaves the environment without explicit signing and approval. When combined with provenance tracking",
              "this approach ensures that every piece of data can be traced back to its origin and verified-critical for regulated environments and supply-chain integrity. # Combined Framework & Architecture of ark-os-noa\\nHigh-Level Overview\\nark-os-noa is an agentic AI platform designed to realise ElementArk/DeFlex's business model. It combines hierarchical organisational patterns (NOA \u2192 Board Agents \u2192 MicroAgentStacks \u2192 microservices) with modern infrastructur\"}"
            ],
            "spawn_policy": [
              "pack=PACK-a4541e11",
              "min_plane=Deployed",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "CommandChiefAgent",
          "name": "CommandChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "jj CON-12",
            "agent_id": "CommandChiefAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-299e0062",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "CommandChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined-architecture-v.2.txt",
            "source_rows_json": [
              "{\"sample\": \"# Content-address an artefact\\ndigest=$(sha256sum output.zip",
              "awk '{print $1}')\\ncp output.zip storage/artifacts/${digest}.zip\\nWhy Internal Data Planes Matter\\nKeeping storage internal reduces the attack surface and simplifies compliance. Data never leaves the environment without explicit signing and approval. When combined with provenance tracking",
              "this approach ensures that every piece of data can be traced back to its origin and verified-critical for regulated environments and supply-chain integrity. # Combined Framework & Architecture of ark-os-noa\\nHigh-Level Overview\\nark-os-noa is an agentic AI platform designed to realise ElementArk/DeFlex's business model. It combines hierarchical organisational patterns (NOA \u2192 Board Agents \u2192 MicroAgentStacks \u2192 microservices) with modern infrastructur\"}"
            ],
            "spawn_policy": [
              "pack=PACK-299e0062",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "The ModelSelectorAgent",
          "name": "The ModelSelectorAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "mm PSK",
            "agent_id": "The ModelSelectorAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-5ba18414",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-F",
            "display_name": "The ModelSelectorAgent",
            "efg_requirements": [
              "gpu>=1",
              "vram>=8GB",
              "disk>=10GB",
              "net>=50Mbps"
            ],
            "epic": "F",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined-architecture-v.2.txt",
            "source_rows_json": [
              "{\"sample\": \"# Content-address an artefact\\ndigest=$(sha256sum output.zip",
              "awk '{print $1}')\\ncp output.zip storage/artifacts/${digest}.zip\\nWhy Internal Data Planes Matter\\nKeeping storage internal reduces the attack surface and simplifies compliance. Data never leaves the environment without explicit signing and approval. When combined with provenance tracking",
              "this approach ensures that every piece of data can be traced back to its origin and verified-critical for regulated environments and supply-chain integrity. # Combined Framework & Architecture of ark-os-noa\\nHigh-Level Overview\\nark-os-noa is an agentic AI platform designed to realise ElementArk/DeFlex's business model. It combines hierarchical organisational patterns (NOA \u2192 Board Agents \u2192 MicroAgentStacks \u2192 microservices) with modern infrastructur\"}"
            ],
            "spawn_policy": [
              "pack=PACK-5ba18414",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.f",
            "type": "Agent"
          }
        },
        {
          "id": "NOA can instruct a MicroAgentStack",
          "name": "NOA can instruct a MicroAgentStack",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "pu VQE-3",
            "agent_id": "NOA can instruct a MicroAgentStack",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-ee0b9d55",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "NOA can instruct a MicroAgentStack",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined-architecture-v.2.txt",
            "source_rows_json": [
              "{\"sample\": \"# Content-address an artefact\\ndigest=$(sha256sum output.zip",
              "awk '{print $1}')\\ncp output.zip storage/artifacts/${digest}.zip\\nWhy Internal Data Planes Matter\\nKeeping storage internal reduces the attack surface and simplifies compliance. Data never leaves the environment without explicit signing and approval. When combined with provenance tracking",
              "this approach ensures that every piece of data can be traced back to its origin and verified-critical for regulated environments and supply-chain integrity. # Combined Framework & Architecture of ark-os-noa\\nHigh-Level Overview\\nark-os-noa is an agentic AI platform designed to realise ElementArk/DeFlex's business model. It combines hierarchical organisational patterns (NOA \u2192 Board Agents \u2192 MicroAgentStacks \u2192 microservices) with modern infrastructur\"}"
            ],
            "spawn_policy": [
              "pack=PACK-ee0b9d55",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "MicroAgentStacks",
          "name": "MicroAgentStacks",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "kp RIU-29",
            "agent_id": "MicroAgentStacks",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-24114ed9",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "MicroAgentStacks",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined-architecture-v.2.txt",
            "source_rows_json": [
              "{\"sample\": \"# Content-address an artefact\\ndigest=$(sha256sum output.zip",
              "awk '{print $1}')\\ncp output.zip storage/artifacts/${digest}.zip\\nWhy Internal Data Planes Matter\\nKeeping storage internal reduces the attack surface and simplifies compliance. Data never leaves the environment without explicit signing and approval. When combined with provenance tracking",
              "this approach ensures that every piece of data can be traced back to its origin and verified-critical for regulated environments and supply-chain integrity. # Combined Framework & Architecture of ark-os-noa\\nHigh-Level Overview\\nark-os-noa is an agentic AI platform designed to realise ElementArk/DeFlex's business model. It combines hierarchical organisational patterns (NOA \u2192 Board Agents \u2192 MicroAgentStacks \u2192 microservices) with modern infrastructur\"}"
            ],
            "spawn_policy": [
              "pack=PACK-24114ed9",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Telemetry Agent",
          "name": "Telemetry Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "oe IBT-6",
            "agent_id": "Telemetry Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-88389aa1",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Telemetry Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined-architecture-v.2.txt",
            "source_rows_json": [
              "{\"sample\": \"# Content-address an artefact\\ndigest=$(sha256sum output.zip",
              "awk '{print $1}')\\ncp output.zip storage/artifacts/${digest}.zip\\nWhy Internal Data Planes Matter\\nKeeping storage internal reduces the attack surface and simplifies compliance. Data never leaves the environment without explicit signing and approval. When combined with provenance tracking",
              "this approach ensures that every piece of data can be traced back to its origin and verified-critical for regulated environments and supply-chain integrity. # Combined Framework & Architecture of ark-os-noa\\nHigh-Level Overview\\nark-os-noa is an agentic AI platform designed to realise ElementArk/DeFlex's business model. It combines hierarchical organisational patterns (NOA \u2192 Board Agents \u2192 MicroAgentStacks \u2192 microservices) with modern infrastructur\"}"
            ],
            "spawn_policy": [
              "pack=PACK-88389aa1",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "MicroAgentStack",
          "name": "MicroAgentStack",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "qi KZU-10",
            "agent_id": "MicroAgentStack",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-d2c954bc",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "MicroAgentStack",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined-architecture-v.2.txt",
            "source_rows_json": [
              "{\"sample\": \"# Content-address an artefact\\ndigest=$(sha256sum output.zip",
              "awk '{print $1}')\\ncp output.zip storage/artifacts/${digest}.zip\\nWhy Internal Data Planes Matter\\nKeeping storage internal reduces the attack surface and simplifies compliance. Data never leaves the environment without explicit signing and approval. When combined with provenance tracking",
              "this approach ensures that every piece of data can be traced back to its origin and verified-critical for regulated environments and supply-chain integrity. # Combined Framework & Architecture of ark-os-noa\\nHigh-Level Overview\\nark-os-noa is an agentic AI platform designed to realise ElementArk/DeFlex's business model. It combines hierarchical organisational patterns (NOA \u2192 Board Agents \u2192 MicroAgentStacks \u2192 microservices) with modern infrastructur\"}"
            ],
            "spawn_policy": [
              "pack=PACK-d2c954bc",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "ModelSelectorAgent",
          "name": "ModelSelectorAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "fl YEL-11",
            "agent_id": "ModelSelectorAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-20c0247c",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-F",
            "display_name": "ModelSelectorAgent",
            "efg_requirements": [
              "gpu>=1",
              "vram>=8GB",
              "disk>=10GB",
              "net>=50Mbps"
            ],
            "epic": "F",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined-architecture-v.2.txt",
            "source_rows_json": [
              "{\"sample\": \"# Content-address an artefact\\ndigest=$(sha256sum output.zip",
              "awk '{print $1}')\\ncp output.zip storage/artifacts/${digest}.zip\\nWhy Internal Data Planes Matter\\nKeeping storage internal reduces the attack surface and simplifies compliance. Data never leaves the environment without explicit signing and approval. When combined with provenance tracking",
              "this approach ensures that every piece of data can be traced back to its origin and verified-critical for regulated environments and supply-chain integrity. # Combined Framework & Architecture of ark-os-noa\\nHigh-Level Overview\\nark-os-noa is an agentic AI platform designed to realise ElementArk/DeFlex's business model. It combines hierarchical organisational patterns (NOA \u2192 Board Agents \u2192 MicroAgentStacks \u2192 microservices) with modern infrastructur\"}"
            ],
            "spawn_policy": [
              "pack=PACK-20c0247c",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.f",
            "type": "Agent"
          }
        },
        {
          "id": "ModelSelectorAgents and Digest Agent",
          "name": "ModelSelectorAgents and Digest Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "hz MUX-3",
            "agent_id": "ModelSelectorAgents and Digest Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-c6b578c7",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "ModelSelectorAgents and Digest Agent",
            "efg_requirements": [
              "gpu>=1",
              "vram>=8GB",
              "disk>=10GB",
              "net>=50Mbps"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined-architecture-v.2.txt",
            "source_rows_json": [
              "{\"sample\": \"# Content-address an artefact\\ndigest=$(sha256sum output.zip",
              "awk '{print $1}')\\ncp output.zip storage/artifacts/${digest}.zip\\nWhy Internal Data Planes Matter\\nKeeping storage internal reduces the attack surface and simplifies compliance. Data never leaves the environment without explicit signing and approval. When combined with provenance tracking",
              "this approach ensures that every piece of data can be traced back to its origin and verified-critical for regulated environments and supply-chain integrity. # Combined Framework & Architecture of ark-os-noa\\nHigh-Level Overview\\nark-os-noa is an agentic AI platform designed to realise ElementArk/DeFlex's business model. It combines hierarchical organisational patterns (NOA \u2192 Board Agents \u2192 MicroAgentStacks \u2192 microservices) with modern infrastructur\"}"
            ],
            "spawn_policy": [
              "pack=PACK-c6b578c7",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "Digest Agent",
          "name": "Digest Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "es FPS-16",
            "agent_id": "Digest Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-a7c4c5d1",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "Digest Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "combined-architecture-v.2.txt",
            "source_rows_json": [
              "{\"sample\": \"# Content-address an artefact\\ndigest=$(sha256sum output.zip",
              "awk '{print $1}')\\ncp output.zip storage/artifacts/${digest}.zip\\nWhy Internal Data Planes Matter\\nKeeping storage internal reduces the attack surface and simplifies compliance. Data never leaves the environment without explicit signing and approval. When combined with provenance tracking",
              "this approach ensures that every piece of data can be traced back to its origin and verified-critical for regulated environments and supply-chain integrity. # Combined Framework & Architecture of ark-os-noa\\nHigh-Level Overview\\nark-os-noa is an agentic AI platform designed to realise ElementArk/DeFlex's business model. It combines hierarchical organisational patterns (NOA \u2192 Board Agents \u2192 MicroAgentStacks \u2192 microservices) with modern infrastructur\"}"
            ],
            "spawn_policy": [
              "pack=PACK-a7c4c5d1",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "Digest Everything Agent",
          "name": "Digest Everything Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "zr AJM-4",
            "agent_id": "Digest Everything Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-17ec476f",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "Digest Everything Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Digest Everything Agent.txt",
            "source_rows_json": "{\"sample\": \"# **Deep Research Completed: Advanced \\\"Chop Shop\\\" Digest Everything Agent** \ud83d\udd2c\"}",
            "spawn_policy": [
              "pack=PACK-17ec476f",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "Digest Everything Agent",
          "name": "Digest Everything Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "zr AJM-5",
            "agent_id": "Digest Everything Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-17ec476f",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "Digest Everything Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Digest Everything Agent.txt",
            "source_rows_json": "{\"sample\": \"I've successfully initiated a comprehensive deep research project on your \\\"Chop Shop\\\" Digest Everything Agent architecture. The specialized research agent has conducted an extensive analysis across all the critical domains you specified.\"}",
            "spawn_policy": [
              "pack=PACK-17ec476f",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "Digest Agent",
          "name": "Digest Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "es FPS-17",
            "agent_id": "Digest Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-a7c4c5d1",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "Digest Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "data_storage.md",
            "source_rows_json": [
              "{\"sample\": \"- **Backend services:** Interact with the registry and MinIO via signed URLs or direct API calls.  BuildKit pushes images to the registry",
              "the Registrar Service writes artefacts to MinIO and records metadata in Postgres.\\n- **Digest Agent:** Reads and writes to MinIO and Postgres",
              "uploads embeddings to the vector store.  It uses the registry to store intermediate build images.\\n- **Model Selector and Model Servers:** Use Postgres (via pgvector or Qdrant) to store model metadata and evaluation results.  Models themselves may be stored as OCI artefacts or in MinIO shards.\\n- **Front\u2011end:** Accesses Supabase for real\u2011time updates and uses signed URLs to fetch artefacts from MinIO.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-a7c4c5d1",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "CommandChiefAgent",
          "name": "CommandChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "jj CON-13",
            "agent_id": "CommandChiefAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-299e0062",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "CommandChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "api_connectors_frontend.md",
            "source_rows_json": [
              "{\"sample\": \"* **External Clients:** Use the Gateway API to submit work.  They receive job IDs and can query progress or results.  Authentication tokens limit access based on roles.\\n* **Internal Agents:** Call endpoints via Adapters.  For example",
              "a CommandChiefAgent may call `/digest` to start digestion for a new source or `/models/ingest` to add an in\u2011house model.  Internal calls attach run IDs and context for traceability.\\n* **Front\u2011End Users:** Access the Admin Console to monitor and control the system.  When they trigger actions (e.g. toggling a CRM endpoint)",
              "the console issues calls to the Gateway API on their behalf.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-299e0062",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Digest Agent",
          "name": "Digest Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "es FPS-18",
            "agent_id": "Digest Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-a7c4c5d1",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "Digest Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "digest_agent.md",
            "source_rows_json": "{\"sample\": \"# Digest Agent \u2014 R&D Engine for ark\u2011os\u2011noa\"}",
            "spawn_policy": [
              "pack=PACK-a7c4c5d1",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "MicroAgentStacks",
          "name": "MicroAgentStacks",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "kp RIU-30",
            "agent_id": "MicroAgentStacks",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-24114ed9",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "MicroAgentStacks",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "digest_agent.md",
            "source_rows_json": [
              "{\"sample\": \"The **Digest Agent** operates as the research and development arm of the Board Agents.  Its primary mission is to *\u201cdigest everything\u201d*\u2014code repositories",
              "datasets",
              "documents",
              "APIs",
              "SaaS systems (including live CRMs) and even AI models.  By analysing these sources",
              "the Digest Agent extracts structured knowledge",
              "builds semantic indices",
              "and surfaces insights that inform strategic decisions.  Though part of the Board",
              "it behaves like a self\u2011contained lab",
              "spinning up **MicroAgentStacks** to perform large\u2011scale digestions.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-24114ed9",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Digest Agent",
          "name": "Digest Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "es FPS-19",
            "agent_id": "Digest Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-a7c4c5d1",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "Digest Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "digest_agent.md",
            "source_rows_json": [
              "{\"sample\": \"The **Digest Agent** operates as the research and development arm of the Board Agents.  Its primary mission is to *\u201cdigest everything\u201d*\u2014code repositories",
              "datasets",
              "documents",
              "APIs",
              "SaaS systems (including live CRMs) and even AI models.  By analysing these sources",
              "the Digest Agent extracts structured knowledge",
              "builds semantic indices",
              "and surfaces insights that inform strategic decisions.  Though part of the Board",
              "it behaves like a self\u2011contained lab",
              "spinning up **MicroAgentStacks** to perform large\u2011scale digestions.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-a7c4c5d1",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "The Digest Agent",
          "name": "The Digest Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "lp TKI-4",
            "agent_id": "The Digest Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-919bde43",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "The Digest Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "digest_agent.md",
            "source_rows_json": [
              "{\"sample\": \"1. **Discover:** Identify sources to digest.  This includes scanning internal GitHub repos",
              "listing connected APIs/CRMs",
              "and reading the current model ingestion list.  Discovery may rely on board directives or scheduled tasks.\\n2. **Fetch:** Clone or synchronise the source material.  For code repos",
              "perform a shallow clone and gather dependency lock files.  For CRMs or APIs",
              "pull metadata and sample records while respecting rate limits.  Handle authentication using secure tokens from the secrets manager.\\n3. **Parse:** Use language\u2011specific parsers (Python AST",
              "ts\u2011morph for JS/TS",
              "go/ast",
              "Rust syn",
              "JavaParser) to analyse code and extract modules",
              "functions",
              "classes and call graphs.  For API schemas",
              "parse OpenAPI/GraphQL definitions.  Build an **SBOM** to capture all packages and versions.\\n4\"}"
            ],
            "spawn_policy": [
              "pack=PACK-919bde43",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "ModelSelectorAgent",
          "name": "ModelSelectorAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "fl YEL-12",
            "agent_id": "ModelSelectorAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-20c0247c",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-F",
            "display_name": "ModelSelectorAgent",
            "efg_requirements": [
              "gpu>=1",
              "vram>=8GB",
              "disk>=10GB",
              "net>=50Mbps"
            ],
            "epic": "F",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "digest_agent.md",
            "source_rows_json": [
              "{\"sample\": \"1. **Discover:** Identify sources to digest.  This includes scanning internal GitHub repos",
              "listing connected APIs/CRMs",
              "and reading the current model ingestion list.  Discovery may rely on board directives or scheduled tasks.\\n2. **Fetch:** Clone or synchronise the source material.  For code repos",
              "perform a shallow clone and gather dependency lock files.  For CRMs or APIs",
              "pull metadata and sample records while respecting rate limits.  Handle authentication using secure tokens from the secrets manager.\\n3. **Parse:** Use language\u2011specific parsers (Python AST",
              "ts\u2011morph for JS/TS",
              "go/ast",
              "Rust syn",
              "JavaParser) to analyse code and extract modules",
              "functions",
              "classes and call graphs.  For API schemas",
              "parse OpenAPI/GraphQL definitions.  Build an **SBOM** to capture all packages and versions.\\n4\"}"
            ],
            "spawn_policy": [
              "pack=PACK-20c0247c",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.f",
            "type": "Agent"
          }
        },
        {
          "id": "The Digest Agent",
          "name": "The Digest Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "lp TKI-5",
            "agent_id": "The Digest Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-919bde43",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "The Digest Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "digest_agent.md",
            "source_rows_json": "{\"sample\": \"The Digest Agent delivers:\"}",
            "spawn_policy": [
              "pack=PACK-919bde43",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "The Digest Agent",
          "name": "The Digest Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "lp TKI-6",
            "agent_id": "The Digest Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-919bde43",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "The Digest Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "digest_agent.md",
            "source_rows_json": [
              "{\"sample\": \"* **Board Agents:** Commission digestion tasks and consume the Digest Agent\u2019s findings when making strategic decisions.\\n* **MicroAgentStacks:** Used to parallelise large digests\u2014each stack handles a set of sources and feeds results back to the Digest Agent.\\n* **ModelSelectorAgents:** Select embedding models and summarisation LLMs appropriate for each source type.  For example",
              "code summarisation may use a codex model",
              "while plain text summarisation uses a general LLM.\\n* **Data & Storage layer:** Stores artefacts and indices in MinIO",
              "Postgres and the vector store.  The Digest Agent ensures proper metadata tagging and retention policies.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-919bde43",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "Commission digestion tasks and consume the Digest Agent",
          "name": "Commission digestion tasks and consume the Digest Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "zq BMB-3",
            "agent_id": "Commission digestion tasks and consume the Digest Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-277baad0",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "Commission digestion tasks and consume the Digest Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "digest_agent.md",
            "source_rows_json": [
              "{\"sample\": \"* **Board Agents:** Commission digestion tasks and consume the Digest Agent\u2019s findings when making strategic decisions.\\n* **MicroAgentStacks:** Used to parallelise large digests\u2014each stack handles a set of sources and feeds results back to the Digest Agent.\\n* **ModelSelectorAgents:** Select embedding models and summarisation LLMs appropriate for each source type.  For example",
              "code summarisation may use a codex model",
              "while plain text summarisation uses a general LLM.\\n* **Data & Storage layer:** Stores artefacts and indices in MinIO",
              "Postgres and the vector store.  The Digest Agent ensures proper metadata tagging and retention policies.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-277baad0",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "MicroAgentStacks",
          "name": "MicroAgentStacks",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "kp RIU-31",
            "agent_id": "MicroAgentStacks",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-24114ed9",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "MicroAgentStacks",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "digest_agent.md",
            "source_rows_json": [
              "{\"sample\": \"* **Board Agents:** Commission digestion tasks and consume the Digest Agent\u2019s findings when making strategic decisions.\\n* **MicroAgentStacks:** Used to parallelise large digests\u2014each stack handles a set of sources and feeds results back to the Digest Agent.\\n* **ModelSelectorAgents:** Select embedding models and summarisation LLMs appropriate for each source type.  For example",
              "code summarisation may use a codex model",
              "while plain text summarisation uses a general LLM.\\n* **Data & Storage layer:** Stores artefacts and indices in MinIO",
              "Postgres and the vector store.  The Digest Agent ensures proper metadata tagging and retention policies.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-24114ed9",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Digest Agent",
          "name": "Digest Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "es FPS-20",
            "agent_id": "Digest Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-a7c4c5d1",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "Digest Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "digest_agent.md",
            "source_rows_json": [
              "{\"sample\": \"* **Board Agents:** Commission digestion tasks and consume the Digest Agent\u2019s findings when making strategic decisions.\\n* **MicroAgentStacks:** Used to parallelise large digests\u2014each stack handles a set of sources and feeds results back to the Digest Agent.\\n* **ModelSelectorAgents:** Select embedding models and summarisation LLMs appropriate for each source type.  For example",
              "code summarisation may use a codex model",
              "while plain text summarisation uses a general LLM.\\n* **Data & Storage layer:** Stores artefacts and indices in MinIO",
              "Postgres and the vector store.  The Digest Agent ensures proper metadata tagging and retention policies.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-a7c4c5d1",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "Digest Agent",
          "name": "Digest Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "es FPS-21",
            "agent_id": "Digest Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-a7c4c5d1",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "Digest Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "digest_agent.md",
            "source_rows_json": [
              "{\"sample\": \"By systematically consuming and analysing every relevant piece of information",
              "the Digest Agent turns unstructured data into actionable knowledge for ark\u2011os\u2011noa\u2019s decision makers.\\n\"}"
            ],
            "spawn_policy": [
              "pack=PACK-a7c4c5d1",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "Micro-Agent",
          "name": "Micro-Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ji ADF-6",
            "agent_id": "Micro-Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-fc7be497",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "Micro-Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "3-plane-knowledge-cluster-pipeline.txt",
            "source_rows_json": [
              "{\"sample\": \"A capability is anything new NOA might learn or adopt: a tool/agent/plugin",
              "a model",
              "a driver/toolchain version",
              "a dataset",
              "or a micro-agent stack. Every capability ships as a **signed pack**:\"}"
            ],
            "spawn_policy": [
              "pack=PACK-fc7be497",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Each Board Agent",
          "name": "Each Board Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "vi RXT",
            "agent_id": "Each Board Agent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-1522e270",
            "category": "Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Each Board Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Ark AI NOA \u2014 Data Architecture & Autonomous Intelligence.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffArk AI NOA - Data Architecture & Autonomous \\nIntelligence\\nData Architecture\\nInternal-First Philosophy: Ark AI NOA is built on an internal-first data philosophy. All \\ncritical data and artifacts remain inside the trust boundary of the system's private \\ninfrastructure[1]. This means the platform avoids external dependencies for storage and \\ncomputation whenever possible. Only finished",
              "signed outputs are allowed to leave the \\nenclave",
              "ensuring that internal work-in-progress",
              "models",
              "and intermediate data stay \\nprotected. By \\\"shipping only signed artifacts outward\\\"[1]",
              "Ark AI NOA maintains tight \\ncontrol over integrity and confidentiality. This approach reduces exposure to external \\nbreaches and keeps sensitive intelligence in-house.\\nStorage Components & Structure: The data plane is composed\"}"
            ],
            "spawn_policy": [
              "pack=PACK-1522e270",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "The Legal Board Agent",
          "name": "The Legal Board Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ey VWN",
            "agent_id": "The Legal Board Agent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-637827af",
            "category": "Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "The Legal Board Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Ark AI NOA \u2014 Data Architecture & Autonomous Intelligence.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffArk AI NOA - Data Architecture & Autonomous \\nIntelligence\\nData Architecture\\nInternal-First Philosophy: Ark AI NOA is built on an internal-first data philosophy. All \\ncritical data and artifacts remain inside the trust boundary of the system's private \\ninfrastructure[1]. This means the platform avoids external dependencies for storage and \\ncomputation whenever possible. Only finished",
              "signed outputs are allowed to leave the \\nenclave",
              "ensuring that internal work-in-progress",
              "models",
              "and intermediate data stay \\nprotected. By \\\"shipping only signed artifacts outward\\\"[1]",
              "Ark AI NOA maintains tight \\ncontrol over integrity and confidentiality. This approach reduces exposure to external \\nbreaches and keeps sensitive intelligence in-house.\\nStorage Components & Structure: The data plane is composed\"}"
            ],
            "spawn_policy": [
              "pack=PACK-637827af",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "NOA can then spin up a MicroAgentStack",
          "name": "NOA can then spin up a MicroAgentStack",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "np ICB",
            "agent_id": "NOA can then spin up a MicroAgentStack",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-8618be26",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "NOA can then spin up a MicroAgentStack",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Ark AI NOA \u2014 Data Architecture & Autonomous Intelligence.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffArk AI NOA - Data Architecture & Autonomous \\nIntelligence\\nData Architecture\\nInternal-First Philosophy: Ark AI NOA is built on an internal-first data philosophy. All \\ncritical data and artifacts remain inside the trust boundary of the system's private \\ninfrastructure[1]. This means the platform avoids external dependencies for storage and \\ncomputation whenever possible. Only finished",
              "signed outputs are allowed to leave the \\nenclave",
              "ensuring that internal work-in-progress",
              "models",
              "and intermediate data stay \\nprotected. By \\\"shipping only signed artifacts outward\\\"[1]",
              "Ark AI NOA maintains tight \\ncontrol over integrity and confidentiality. This approach reduces exposure to external \\nbreaches and keeps sensitive intelligence in-house.\\nStorage Components & Structure: The data plane is composed\"}"
            ],
            "spawn_policy": [
              "pack=PACK-8618be26",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "The Strategy Agent",
          "name": "The Strategy Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "lz QBP",
            "agent_id": "The Strategy Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-52794e53",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "The Strategy Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Ark AI NOA \u2014 Data Architecture & Autonomous Intelligence.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffArk AI NOA - Data Architecture & Autonomous \\nIntelligence\\nData Architecture\\nInternal-First Philosophy: Ark AI NOA is built on an internal-first data philosophy. All \\ncritical data and artifacts remain inside the trust boundary of the system's private \\ninfrastructure[1]. This means the platform avoids external dependencies for storage and \\ncomputation whenever possible. Only finished",
              "signed outputs are allowed to leave the \\nenclave",
              "ensuring that internal work-in-progress",
              "models",
              "and intermediate data stay \\nprotected. By \\\"shipping only signed artifacts outward\\\"[1]",
              "Ark AI NOA maintains tight \\ncontrol over integrity and confidentiality. This approach reduces exposure to external \\nbreaches and keeps sensitive intelligence in-house.\\nStorage Components & Structure: The data plane is composed\"}"
            ],
            "spawn_policy": [
              "pack=PACK-52794e53",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Perhaps the Digest Agent",
          "name": "Perhaps the Digest Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "jm YIE",
            "agent_id": "Perhaps the Digest Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-77d477ad",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "Perhaps the Digest Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Ark AI NOA \u2014 Data Architecture & Autonomous Intelligence.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffArk AI NOA - Data Architecture & Autonomous \\nIntelligence\\nData Architecture\\nInternal-First Philosophy: Ark AI NOA is built on an internal-first data philosophy. All \\ncritical data and artifacts remain inside the trust boundary of the system's private \\ninfrastructure[1]. This means the platform avoids external dependencies for storage and \\ncomputation whenever possible. Only finished",
              "signed outputs are allowed to leave the \\nenclave",
              "ensuring that internal work-in-progress",
              "models",
              "and intermediate data stay \\nprotected. By \\\"shipping only signed artifacts outward\\\"[1]",
              "Ark AI NOA maintains tight \\ncontrol over integrity and confidentiality. This approach reduces exposure to external \\nbreaches and keeps sensitive intelligence in-house.\\nStorage Components & Structure: The data plane is composed\"}"
            ],
            "spawn_policy": [
              "pack=PACK-77d477ad",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "When NOA or a Board Agent decides to launch a MicroAgentStack",
          "name": "When NOA or a Board Agent decides to launch a MicroAgentStack",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "nb REO",
            "agent_id": "When NOA or a Board Agent decides to launch a MicroAgentStack",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-1ccfca51",
            "category": "Micro-Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "When NOA or a Board Agent decides to launch a MicroAgentStack",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Ark AI NOA \u2014 Data Architecture & Autonomous Intelligence.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffArk AI NOA - Data Architecture & Autonomous \\nIntelligence\\nData Architecture\\nInternal-First Philosophy: Ark AI NOA is built on an internal-first data philosophy. All \\ncritical data and artifacts remain inside the trust boundary of the system's private \\ninfrastructure[1]. This means the platform avoids external dependencies for storage and \\ncomputation whenever possible. Only finished",
              "signed outputs are allowed to leave the \\nenclave",
              "ensuring that internal work-in-progress",
              "models",
              "and intermediate data stay \\nprotected. By \\\"shipping only signed artifacts outward\\\"[1]",
              "Ark AI NOA maintains tight \\ncontrol over integrity and confidentiality. This approach reduces exposure to external \\nbreaches and keeps sensitive intelligence in-house.\\nStorage Components & Structure: The data plane is composed\"}"
            ],
            "spawn_policy": [
              "pack=PACK-1ccfca51",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "NOA now orchestrates multiple MicroAgentStacks",
          "name": "NOA now orchestrates multiple MicroAgentStacks",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ux FMR",
            "agent_id": "NOA now orchestrates multiple MicroAgentStacks",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-9ed47bac",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "NOA now orchestrates multiple MicroAgentStacks",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Ark AI NOA \u2014 Data Architecture & Autonomous Intelligence.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffArk AI NOA - Data Architecture & Autonomous \\nIntelligence\\nData Architecture\\nInternal-First Philosophy: Ark AI NOA is built on an internal-first data philosophy. All \\ncritical data and artifacts remain inside the trust boundary of the system's private \\ninfrastructure[1]. This means the platform avoids external dependencies for storage and \\ncomputation whenever possible. Only finished",
              "signed outputs are allowed to leave the \\nenclave",
              "ensuring that internal work-in-progress",
              "models",
              "and intermediate data stay \\nprotected. By \\\"shipping only signed artifacts outward\\\"[1]",
              "Ark AI NOA maintains tight \\ncontrol over integrity and confidentiality. This approach reduces exposure to external \\nbreaches and keeps sensitive intelligence in-house.\\nStorage Components & Structure: The data plane is composed\"}"
            ],
            "spawn_policy": [
              "pack=PACK-9ed47bac",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "MicroAgentStacks",
          "name": "MicroAgentStacks",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "kp RIU-32",
            "agent_id": "MicroAgentStacks",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-24114ed9",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "MicroAgentStacks",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Ark AI NOA \u2014 Data Architecture & Autonomous Intelligence.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffArk AI NOA - Data Architecture & Autonomous \\nIntelligence\\nData Architecture\\nInternal-First Philosophy: Ark AI NOA is built on an internal-first data philosophy. All \\ncritical data and artifacts remain inside the trust boundary of the system's private \\ninfrastructure[1]. This means the platform avoids external dependencies for storage and \\ncomputation whenever possible. Only finished",
              "signed outputs are allowed to leave the \\nenclave",
              "ensuring that internal work-in-progress",
              "models",
              "and intermediate data stay \\nprotected. By \\\"shipping only signed artifacts outward\\\"[1]",
              "Ark AI NOA maintains tight \\ncontrol over integrity and confidentiality. This approach reduces exposure to external \\nbreaches and keeps sensitive intelligence in-house.\\nStorage Components & Structure: The data plane is composed\"}"
            ],
            "spawn_policy": [
              "pack=PACK-24114ed9",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "The Model Selector Agent",
          "name": "The Model Selector Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wv LDC",
            "agent_id": "The Model Selector Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-669f4491",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-F",
            "display_name": "The Model Selector Agent",
            "efg_requirements": [
              "gpu>=1",
              "vram>=8GB",
              "disk>=10GB",
              "net>=50Mbps"
            ],
            "epic": "F",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Ark AI NOA \u2014 Data Architecture & Autonomous Intelligence.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffArk AI NOA - Data Architecture & Autonomous \\nIntelligence\\nData Architecture\\nInternal-First Philosophy: Ark AI NOA is built on an internal-first data philosophy. All \\ncritical data and artifacts remain inside the trust boundary of the system's private \\ninfrastructure[1]. This means the platform avoids external dependencies for storage and \\ncomputation whenever possible. Only finished",
              "signed outputs are allowed to leave the \\nenclave",
              "ensuring that internal work-in-progress",
              "models",
              "and intermediate data stay \\nprotected. By \\\"shipping only signed artifacts outward\\\"[1]",
              "Ark AI NOA maintains tight \\ncontrol over integrity and confidentiality. This approach reduces exposure to external \\nbreaches and keeps sensitive intelligence in-house.\\nStorage Components & Structure: The data plane is composed\"}"
            ],
            "spawn_policy": [
              "pack=PACK-669f4491",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.f",
            "type": "Agent"
          }
        },
        {
          "id": "MicroAgentStack",
          "name": "MicroAgentStack",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "qi KZU-11",
            "agent_id": "MicroAgentStack",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-d2c954bc",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "MicroAgentStack",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Ark AI NOA \u2014 Data Architecture & Autonomous Intelligence.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffArk AI NOA - Data Architecture & Autonomous \\nIntelligence\\nData Architecture\\nInternal-First Philosophy: Ark AI NOA is built on an internal-first data philosophy. All \\ncritical data and artifacts remain inside the trust boundary of the system's private \\ninfrastructure[1]. This means the platform avoids external dependencies for storage and \\ncomputation whenever possible. Only finished",
              "signed outputs are allowed to leave the \\nenclave",
              "ensuring that internal work-in-progress",
              "models",
              "and intermediate data stay \\nprotected. By \\\"shipping only signed artifacts outward\\\"[1]",
              "Ark AI NOA maintains tight \\ncontrol over integrity and confidentiality. This approach reduces exposure to external \\nbreaches and keeps sensitive intelligence in-house.\\nStorage Components & Structure: The data plane is composed\"}"
            ],
            "spawn_policy": [
              "pack=PACK-d2c954bc",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Autonomous Agent Utilization",
          "name": "Autonomous Agent Utilization",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "qd JWX",
            "agent_id": "Autonomous Agent Utilization",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-1a07eaa1",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Autonomous Agent Utilization",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Ark AI NOA \u2014 Data Architecture & Autonomous Intelligence.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffArk AI NOA - Data Architecture & Autonomous \\nIntelligence\\nData Architecture\\nInternal-First Philosophy: Ark AI NOA is built on an internal-first data philosophy. All \\ncritical data and artifacts remain inside the trust boundary of the system's private \\ninfrastructure[1]. This means the platform avoids external dependencies for storage and \\ncomputation whenever possible. Only finished",
              "signed outputs are allowed to leave the \\nenclave",
              "ensuring that internal work-in-progress",
              "models",
              "and intermediate data stay \\nprotected. By \\\"shipping only signed artifacts outward\\\"[1]",
              "Ark AI NOA maintains tight \\ncontrol over integrity and confidentiality. This approach reduces exposure to external \\nbreaches and keeps sensitive intelligence in-house.\\nStorage Components & Structure: The data plane is composed\"}"
            ],
            "spawn_policy": [
              "pack=PACK-1a07eaa1",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "If the Security Agent",
          "name": "If the Security Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "qh RTL",
            "agent_id": "If the Security Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-aeb6164b",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "If the Security Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=2GB",
              "disk>=2GB",
              "net>=10Mbps"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Ark AI NOA \u2014 Data Architecture & Autonomous Intelligence.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffArk AI NOA - Data Architecture & Autonomous \\nIntelligence\\nData Architecture\\nInternal-First Philosophy: Ark AI NOA is built on an internal-first data philosophy. All \\ncritical data and artifacts remain inside the trust boundary of the system's private \\ninfrastructure[1]. This means the platform avoids external dependencies for storage and \\ncomputation whenever possible. Only finished",
              "signed outputs are allowed to leave the \\nenclave",
              "ensuring that internal work-in-progress",
              "models",
              "and intermediate data stay \\nprotected. By \\\"shipping only signed artifacts outward\\\"[1]",
              "Ark AI NOA maintains tight \\ncontrol over integrity and confidentiality. This approach reduces exposure to external \\nbreaches and keeps sensitive intelligence in-house.\\nStorage Components & Structure: The data plane is composed\"}"
            ],
            "spawn_policy": [
              "pack=PACK-aeb6164b",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "The Strategy/CTO Agent",
          "name": "The Strategy/CTO Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "yc XFI",
            "agent_id": "The Strategy/CTO Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-ad7e9106",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "The Strategy/CTO Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Ark AI NOA \u2014 Data Architecture & Autonomous Intelligence.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffArk AI NOA - Data Architecture & Autonomous \\nIntelligence\\nData Architecture\\nInternal-First Philosophy: Ark AI NOA is built on an internal-first data philosophy. All \\ncritical data and artifacts remain inside the trust boundary of the system's private \\ninfrastructure[1]. This means the platform avoids external dependencies for storage and \\ncomputation whenever possible. Only finished",
              "signed outputs are allowed to leave the \\nenclave",
              "ensuring that internal work-in-progress",
              "models",
              "and intermediate data stay \\nprotected. By \\\"shipping only signed artifacts outward\\\"[1]",
              "Ark AI NOA maintains tight \\ncontrol over integrity and confidentiality. This approach reduces exposure to external \\nbreaches and keeps sensitive intelligence in-house.\\nStorage Components & Structure: The data plane is composed\"}"
            ],
            "spawn_policy": [
              "pack=PACK-ad7e9106",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Strategy Agent",
          "name": "Strategy Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "bi QDX",
            "agent_id": "Strategy Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-a527fd9a",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Strategy Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Ark AI NOA \u2014 Data Architecture & Autonomous Intelligence.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffArk AI NOA - Data Architecture & Autonomous \\nIntelligence\\nData Architecture\\nInternal-First Philosophy: Ark AI NOA is built on an internal-first data philosophy. All \\ncritical data and artifacts remain inside the trust boundary of the system's private \\ninfrastructure[1]. This means the platform avoids external dependencies for storage and \\ncomputation whenever possible. Only finished",
              "signed outputs are allowed to leave the \\nenclave",
              "ensuring that internal work-in-progress",
              "models",
              "and intermediate data stay \\nprotected. By \\\"shipping only signed artifacts outward\\\"[1]",
              "Ark AI NOA maintains tight \\ncontrol over integrity and confidentiality. This approach reduces exposure to external \\nbreaches and keeps sensitive intelligence in-house.\\nStorage Components & Structure: The data plane is composed\"}"
            ],
            "spawn_policy": [
              "pack=PACK-a527fd9a",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Whenever a MicroAgentStack",
          "name": "Whenever a MicroAgentStack",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "es QZI",
            "agent_id": "Whenever a MicroAgentStack",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-5d2e63e7",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "Whenever a MicroAgentStack",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Ark AI NOA \u2014 Data Architecture & Autonomous Intelligence.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffArk AI NOA - Data Architecture & Autonomous \\nIntelligence\\nData Architecture\\nInternal-First Philosophy: Ark AI NOA is built on an internal-first data philosophy. All \\ncritical data and artifacts remain inside the trust boundary of the system's private \\ninfrastructure[1]. This means the platform avoids external dependencies for storage and \\ncomputation whenever possible. Only finished",
              "signed outputs are allowed to leave the \\nenclave",
              "ensuring that internal work-in-progress",
              "models",
              "and intermediate data stay \\nprotected. By \\\"shipping only signed artifacts outward\\\"[1]",
              "Ark AI NOA maintains tight \\ncontrol over integrity and confidentiality. This approach reduces exposure to external \\nbreaches and keeps sensitive intelligence in-house.\\nStorage Components & Structure: The data plane is composed\"}"
            ],
            "spawn_policy": [
              "pack=PACK-5d2e63e7",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "The CommandChiefAgent",
          "name": "The CommandChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "rs RMH",
            "agent_id": "The CommandChiefAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-8b3e415f",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "The CommandChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Ark AI NOA \u2014 Data Architecture & Autonomous Intelligence.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffArk AI NOA - Data Architecture & Autonomous \\nIntelligence\\nData Architecture\\nInternal-First Philosophy: Ark AI NOA is built on an internal-first data philosophy. All \\ncritical data and artifacts remain inside the trust boundary of the system's private \\ninfrastructure[1]. This means the platform avoids external dependencies for storage and \\ncomputation whenever possible. Only finished",
              "signed outputs are allowed to leave the \\nenclave",
              "ensuring that internal work-in-progress",
              "models",
              "and intermediate data stay \\nprotected. By \\\"shipping only signed artifacts outward\\\"[1]",
              "Ark AI NOA maintains tight \\ncontrol over integrity and confidentiality. This approach reduces exposure to external \\nbreaches and keeps sensitive intelligence in-house.\\nStorage Components & Structure: The data plane is composed\"}"
            ],
            "spawn_policy": [
              "pack=PACK-8b3e415f",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "NOA then spins up a new MicroAgentStack",
          "name": "NOA then spins up a new MicroAgentStack",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "dp ASK",
            "agent_id": "NOA then spins up a new MicroAgentStack",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-32a73164",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "NOA then spins up a new MicroAgentStack",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Ark AI NOA \u2014 Data Architecture & Autonomous Intelligence.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffArk AI NOA - Data Architecture & Autonomous \\nIntelligence\\nData Architecture\\nInternal-First Philosophy: Ark AI NOA is built on an internal-first data philosophy. All \\ncritical data and artifacts remain inside the trust boundary of the system's private \\ninfrastructure[1]. This means the platform avoids external dependencies for storage and \\ncomputation whenever possible. Only finished",
              "signed outputs are allowed to leave the \\nenclave",
              "ensuring that internal work-in-progress",
              "models",
              "and intermediate data stay \\nprotected. By \\\"shipping only signed artifacts outward\\\"[1]",
              "Ark AI NOA maintains tight \\ncontrol over integrity and confidentiality. This approach reduces exposure to external \\nbreaches and keeps sensitive intelligence in-house.\\nStorage Components & Structure: The data plane is composed\"}"
            ],
            "spawn_policy": [
              "pack=PACK-32a73164",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "CommandChiefAgent",
          "name": "CommandChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "jj CON-14",
            "agent_id": "CommandChiefAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-299e0062",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "CommandChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Ark AI NOA \u2014 Data Architecture & Autonomous Intelligence.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffArk AI NOA - Data Architecture & Autonomous \\nIntelligence\\nData Architecture\\nInternal-First Philosophy: Ark AI NOA is built on an internal-first data philosophy. All \\ncritical data and artifacts remain inside the trust boundary of the system's private \\ninfrastructure[1]. This means the platform avoids external dependencies for storage and \\ncomputation whenever possible. Only finished",
              "signed outputs are allowed to leave the \\nenclave",
              "ensuring that internal work-in-progress",
              "models",
              "and intermediate data stay \\nprotected. By \\\"shipping only signed artifacts outward\\\"[1]",
              "Ark AI NOA maintains tight \\ncontrol over integrity and confidentiality. This approach reduces exposure to external \\nbreaches and keeps sensitive intelligence in-house.\\nStorage Components & Structure: The data plane is composed\"}"
            ],
            "spawn_policy": [
              "pack=PACK-299e0062",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Security Board Agent",
          "name": "Security Board Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ew TSW",
            "agent_id": "Security Board Agent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-c1d40670",
            "category": "Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "Security Board Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=2GB",
              "disk>=2GB",
              "net>=10Mbps"
            ],
            "epic": "D",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Ark AI NOA \u2014 Data Architecture & Autonomous Intelligence.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffArk AI NOA - Data Architecture & Autonomous \\nIntelligence\\nData Architecture\\nInternal-First Philosophy: Ark AI NOA is built on an internal-first data philosophy. All \\ncritical data and artifacts remain inside the trust boundary of the system's private \\ninfrastructure[1]. This means the platform avoids external dependencies for storage and \\ncomputation whenever possible. Only finished",
              "signed outputs are allowed to leave the \\nenclave",
              "ensuring that internal work-in-progress",
              "models",
              "and intermediate data stay \\nprotected. By \\\"shipping only signed artifacts outward\\\"[1]",
              "Ark AI NOA maintains tight \\ncontrol over integrity and confidentiality. This approach reduces exposure to external \\nbreaches and keeps sensitive intelligence in-house.\\nStorage Components & Structure: The data plane is composed\"}"
            ],
            "spawn_policy": [
              "pack=PACK-c1d40670",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "When a Board Agent",
          "name": "When a Board Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "hm AGQ",
            "agent_id": "When a Board Agent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-ca58932f",
            "category": "Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "When a Board Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Ark AI NOA \u2014 Data Architecture & Autonomous Intelligence.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffArk AI NOA - Data Architecture & Autonomous \\nIntelligence\\nData Architecture\\nInternal-First Philosophy: Ark AI NOA is built on an internal-first data philosophy. All \\ncritical data and artifacts remain inside the trust boundary of the system's private \\ninfrastructure[1]. This means the platform avoids external dependencies for storage and \\ncomputation whenever possible. Only finished",
              "signed outputs are allowed to leave the \\nenclave",
              "ensuring that internal work-in-progress",
              "models",
              "and intermediate data stay \\nprotected. By \\\"shipping only signed artifacts outward\\\"[1]",
              "Ark AI NOA maintains tight \\ncontrol over integrity and confidentiality. This approach reduces exposure to external \\nbreaches and keeps sensitive intelligence in-house.\\nStorage Components & Structure: The data plane is composed\"}"
            ],
            "spawn_policy": [
              "pack=PACK-ca58932f",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "ModelSelectorAgent",
          "name": "ModelSelectorAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "fl YEL-13",
            "agent_id": "ModelSelectorAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-20c0247c",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-F",
            "display_name": "ModelSelectorAgent",
            "efg_requirements": [
              "gpu>=1",
              "vram>=8GB",
              "disk>=10GB",
              "net>=50Mbps"
            ],
            "epic": "F",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Ark AI NOA \u2014 Data Architecture & Autonomous Intelligence.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffArk AI NOA - Data Architecture & Autonomous \\nIntelligence\\nData Architecture\\nInternal-First Philosophy: Ark AI NOA is built on an internal-first data philosophy. All \\ncritical data and artifacts remain inside the trust boundary of the system's private \\ninfrastructure[1]. This means the platform avoids external dependencies for storage and \\ncomputation whenever possible. Only finished",
              "signed outputs are allowed to leave the \\nenclave",
              "ensuring that internal work-in-progress",
              "models",
              "and intermediate data stay \\nprotected. By \\\"shipping only signed artifacts outward\\\"[1]",
              "Ark AI NOA maintains tight \\ncontrol over integrity and confidentiality. This approach reduces exposure to external \\nbreaches and keeps sensitive intelligence in-house.\\nStorage Components & Structure: The data plane is composed\"}"
            ],
            "spawn_policy": [
              "pack=PACK-20c0247c",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.f",
            "type": "Agent"
          }
        },
        {
          "id": "When the Digest Agent",
          "name": "When the Digest Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "lp OTV",
            "agent_id": "When the Digest Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-9d599511",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "When the Digest Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Ark AI NOA \u2014 Data Architecture & Autonomous Intelligence.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffArk AI NOA - Data Architecture & Autonomous \\nIntelligence\\nData Architecture\\nInternal-First Philosophy: Ark AI NOA is built on an internal-first data philosophy. All \\ncritical data and artifacts remain inside the trust boundary of the system's private \\ninfrastructure[1]. This means the platform avoids external dependencies for storage and \\ncomputation whenever possible. Only finished",
              "signed outputs are allowed to leave the \\nenclave",
              "ensuring that internal work-in-progress",
              "models",
              "and intermediate data stay \\nprotected. By \\\"shipping only signed artifacts outward\\\"[1]",
              "Ark AI NOA maintains tight \\ncontrol over integrity and confidentiality. This approach reduces exposure to external \\nbreaches and keeps sensitive intelligence in-house.\\nStorage Components & Structure: The data plane is composed\"}"
            ],
            "spawn_policy": [
              "pack=PACK-9d599511",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "Digest Agent",
          "name": "Digest Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "es FPS-22",
            "agent_id": "Digest Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-a7c4c5d1",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "Digest Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Ark AI NOA \u2014 Data Architecture & Autonomous Intelligence.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffArk AI NOA - Data Architecture & Autonomous \\nIntelligence\\nData Architecture\\nInternal-First Philosophy: Ark AI NOA is built on an internal-first data philosophy. All \\ncritical data and artifacts remain inside the trust boundary of the system's private \\ninfrastructure[1]. This means the platform avoids external dependencies for storage and \\ncomputation whenever possible. Only finished",
              "signed outputs are allowed to leave the \\nenclave",
              "ensuring that internal work-in-progress",
              "models",
              "and intermediate data stay \\nprotected. By \\\"shipping only signed artifacts outward\\\"[1]",
              "Ark AI NOA maintains tight \\ncontrol over integrity and confidentiality. This approach reduces exposure to external \\nbreaches and keeps sensitive intelligence in-house.\\nStorage Components & Structure: The data plane is composed\"}"
            ],
            "spawn_policy": [
              "pack=PACK-a7c4c5d1",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "Growth Agent",
          "name": "Growth Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ou SUQ",
            "agent_id": "Growth Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-465f5417",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Growth Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Ark AI NOA \u2014 Data Architecture & Autonomous Intelligence.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffArk AI NOA - Data Architecture & Autonomous \\nIntelligence\\nData Architecture\\nInternal-First Philosophy: Ark AI NOA is built on an internal-first data philosophy. All \\ncritical data and artifacts remain inside the trust boundary of the system's private \\ninfrastructure[1]. This means the platform avoids external dependencies for storage and \\ncomputation whenever possible. Only finished",
              "signed outputs are allowed to leave the \\nenclave",
              "ensuring that internal work-in-progress",
              "models",
              "and intermediate data stay \\nprotected. By \\\"shipping only signed artifacts outward\\\"[1]",
              "Ark AI NOA maintains tight \\ncontrol over integrity and confidentiality. This approach reduces exposure to external \\nbreaches and keeps sensitive intelligence in-house.\\nStorage Components & Structure: The data plane is composed\"}"
            ],
            "spawn_policy": [
              "pack=PACK-465f5417",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Board Agent can deploy multiple MicroAgentStacks",
          "name": "Board Agent can deploy multiple MicroAgentStacks",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ia AUF",
            "agent_id": "Board Agent can deploy multiple MicroAgentStacks",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-4c8f4fa1",
            "category": "Micro-Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "Board Agent can deploy multiple MicroAgentStacks",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Ark AI NOA \u2014 Data Architecture & Autonomous Intelligence.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffArk AI NOA - Data Architecture & Autonomous \\nIntelligence\\nData Architecture\\nInternal-First Philosophy: Ark AI NOA is built on an internal-first data philosophy. All \\ncritical data and artifacts remain inside the trust boundary of the system's private \\ninfrastructure[1]. This means the platform avoids external dependencies for storage and \\ncomputation whenever possible. Only finished",
              "signed outputs are allowed to leave the \\nenclave",
              "ensuring that internal work-in-progress",
              "models",
              "and intermediate data stay \\nprotected. By \\\"shipping only signed artifacts outward\\\"[1]",
              "Ark AI NOA maintains tight \\ncontrol over integrity and confidentiality. This approach reduces exposure to external \\nbreaches and keeps sensitive intelligence in-house.\\nStorage Components & Structure: The data plane is composed\"}"
            ],
            "spawn_policy": [
              "pack=PACK-4c8f4fa1",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "The Strategy/CTO Board Agent",
          "name": "The Strategy/CTO Board Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "cm KQE",
            "agent_id": "The Strategy/CTO Board Agent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-9522d4fe",
            "category": "Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "The Strategy/CTO Board Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Ark AI NOA \u2014 Data Architecture & Autonomous Intelligence.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffArk AI NOA - Data Architecture & Autonomous \\nIntelligence\\nData Architecture\\nInternal-First Philosophy: Ark AI NOA is built on an internal-first data philosophy. All \\ncritical data and artifacts remain inside the trust boundary of the system's private \\ninfrastructure[1]. This means the platform avoids external dependencies for storage and \\ncomputation whenever possible. Only finished",
              "signed outputs are allowed to leave the \\nenclave",
              "ensuring that internal work-in-progress",
              "models",
              "and intermediate data stay \\nprotected. By \\\"shipping only signed artifacts outward\\\"[1]",
              "Ark AI NOA maintains tight \\ncontrol over integrity and confidentiality. This approach reduces exposure to external \\nbreaches and keeps sensitive intelligence in-house.\\nStorage Components & Structure: The data plane is composed\"}"
            ],
            "spawn_policy": [
              "pack=PACK-9522d4fe",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Strategy/CTO agent or the CommandChiefAgent",
          "name": "Strategy/CTO agent or the CommandChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "qy EXG",
            "agent_id": "Strategy/CTO agent or the CommandChiefAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-98aabb7b",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Strategy/CTO agent or the CommandChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Ark AI NOA \u2014 Data Architecture & Autonomous Intelligence.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffArk AI NOA - Data Architecture & Autonomous \\nIntelligence\\nData Architecture\\nInternal-First Philosophy: Ark AI NOA is built on an internal-first data philosophy. All \\ncritical data and artifacts remain inside the trust boundary of the system's private \\ninfrastructure[1]. This means the platform avoids external dependencies for storage and \\ncomputation whenever possible. Only finished",
              "signed outputs are allowed to leave the \\nenclave",
              "ensuring that internal work-in-progress",
              "models",
              "and intermediate data stay \\nprotected. By \\\"shipping only signed artifacts outward\\\"[1]",
              "Ark AI NOA maintains tight \\ncontrol over integrity and confidentiality. This approach reduces exposure to external \\nbreaches and keeps sensitive intelligence in-house.\\nStorage Components & Structure: The data plane is composed\"}"
            ],
            "spawn_policy": [
              "pack=PACK-98aabb7b",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Legal Agent",
          "name": "Legal Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ax OZA",
            "agent_id": "Legal Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-e2eaf78c",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Legal Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Ark AI NOA \u2014 Data Architecture & Autonomous Intelligence.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffArk AI NOA - Data Architecture & Autonomous \\nIntelligence\\nData Architecture\\nInternal-First Philosophy: Ark AI NOA is built on an internal-first data philosophy. All \\ncritical data and artifacts remain inside the trust boundary of the system's private \\ninfrastructure[1]. This means the platform avoids external dependencies for storage and \\ncomputation whenever possible. Only finished",
              "signed outputs are allowed to leave the \\nenclave",
              "ensuring that internal work-in-progress",
              "models",
              "and intermediate data stay \\nprotected. By \\\"shipping only signed artifacts outward\\\"[1]",
              "Ark AI NOA maintains tight \\ncontrol over integrity and confidentiality. This approach reduces exposure to external \\nbreaches and keeps sensitive intelligence in-house.\\nStorage Components & Structure: The data plane is composed\"}"
            ],
            "spawn_policy": [
              "pack=PACK-e2eaf78c",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "The MicroAgentStacks",
          "name": "The MicroAgentStacks",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "tv NXZ",
            "agent_id": "The MicroAgentStacks",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-58b1cce0",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "The MicroAgentStacks",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Ark AI NOA \u2014 Data Architecture & Autonomous Intelligence.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffArk AI NOA - Data Architecture & Autonomous \\nIntelligence\\nData Architecture\\nInternal-First Philosophy: Ark AI NOA is built on an internal-first data philosophy. All \\ncritical data and artifacts remain inside the trust boundary of the system's private \\ninfrastructure[1]. This means the platform avoids external dependencies for storage and \\ncomputation whenever possible. Only finished",
              "signed outputs are allowed to leave the \\nenclave",
              "ensuring that internal work-in-progress",
              "models",
              "and intermediate data stay \\nprotected. By \\\"shipping only signed artifacts outward\\\"[1]",
              "Ark AI NOA maintains tight \\ncontrol over integrity and confidentiality. This approach reduces exposure to external \\nbreaches and keeps sensitive intelligence in-house.\\nStorage Components & Structure: The data plane is composed\"}"
            ],
            "spawn_policy": [
              "pack=PACK-58b1cce0",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "The Strategy Board Agent",
          "name": "The Strategy Board Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "bp NGF",
            "agent_id": "The Strategy Board Agent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-8e0c49ec",
            "category": "Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "The Strategy Board Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Ark AI NOA \u2014 Data Architecture & Autonomous Intelligence.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffArk AI NOA - Data Architecture & Autonomous \\nIntelligence\\nData Architecture\\nInternal-First Philosophy: Ark AI NOA is built on an internal-first data philosophy. All \\ncritical data and artifacts remain inside the trust boundary of the system's private \\ninfrastructure[1]. This means the platform avoids external dependencies for storage and \\ncomputation whenever possible. Only finished",
              "signed outputs are allowed to leave the \\nenclave",
              "ensuring that internal work-in-progress",
              "models",
              "and intermediate data stay \\nprotected. By \\\"shipping only signed artifacts outward\\\"[1]",
              "Ark AI NOA maintains tight \\ncontrol over integrity and confidentiality. This approach reduces exposure to external \\nbreaches and keeps sensitive intelligence in-house.\\nStorage Components & Structure: The data plane is composed\"}"
            ],
            "spawn_policy": [
              "pack=PACK-8e0c49ec",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "ExecutiveCommanderChiefAgent",
          "name": "ExecutiveCommanderChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "vw MFS-13",
            "agent_id": "ExecutiveCommanderChiefAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-df6b24c4",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "ExecutiveCommanderChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Executive",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Ark AI NOA \u2014 Data Architecture & Autonomous Intelligence.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffArk AI NOA - Data Architecture & Autonomous \\nIntelligence\\nData Architecture\\nInternal-First Philosophy: Ark AI NOA is built on an internal-first data philosophy. All \\ncritical data and artifacts remain inside the trust boundary of the system's private \\ninfrastructure[1]. This means the platform avoids external dependencies for storage and \\ncomputation whenever possible. Only finished",
              "signed outputs are allowed to leave the \\nenclave",
              "ensuring that internal work-in-progress",
              "models",
              "and intermediate data stay \\nprotected. By \\\"shipping only signed artifacts outward\\\"[1]",
              "Ark AI NOA maintains tight \\ncontrol over integrity and confidentiality. This approach reduces exposure to external \\nbreaches and keeps sensitive intelligence in-house.\\nStorage Components & Structure: The data plane is composed\"}"
            ],
            "spawn_policy": [
              "pack=PACK-df6b24c4",
              "min_plane=Deployed",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Illusion approach means that each MicroAgentStack",
          "name": "Illusion approach means that each MicroAgentStack",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ju TGK",
            "agent_id": "Illusion approach means that each MicroAgentStack",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-6300a2da",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "Illusion approach means that each MicroAgentStack",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Ark AI NOA \u2014 Data Architecture & Autonomous Intelligence.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffArk AI NOA - Data Architecture & Autonomous \\nIntelligence\\nData Architecture\\nInternal-First Philosophy: Ark AI NOA is built on an internal-first data philosophy. All \\ncritical data and artifacts remain inside the trust boundary of the system's private \\ninfrastructure[1]. This means the platform avoids external dependencies for storage and \\ncomputation whenever possible. Only finished",
              "signed outputs are allowed to leave the \\nenclave",
              "ensuring that internal work-in-progress",
              "models",
              "and intermediate data stay \\nprotected. By \\\"shipping only signed artifacts outward\\\"[1]",
              "Ark AI NOA maintains tight \\ncontrol over integrity and confidentiality. This approach reduces exposure to external \\nbreaches and keeps sensitive intelligence in-house.\\nStorage Components & Structure: The data plane is composed\"}"
            ],
            "spawn_policy": [
              "pack=PACK-6300a2da",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Board Agent",
          "name": "Board Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "jm MDQ-6",
            "agent_id": "Board Agent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-796c1e54",
            "category": "Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Board Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Ark AI NOA \u2014 Data Architecture & Autonomous Intelligence.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffArk AI NOA - Data Architecture & Autonomous \\nIntelligence\\nData Architecture\\nInternal-First Philosophy: Ark AI NOA is built on an internal-first data philosophy. All \\ncritical data and artifacts remain inside the trust boundary of the system's private \\ninfrastructure[1]. This means the platform avoids external dependencies for storage and \\ncomputation whenever possible. Only finished",
              "signed outputs are allowed to leave the \\nenclave",
              "ensuring that internal work-in-progress",
              "models",
              "and intermediate data stay \\nprotected. By \\\"shipping only signed artifacts outward\\\"[1]",
              "Ark AI NOA maintains tight \\ncontrol over integrity and confidentiality. This approach reduces exposure to external \\nbreaches and keeps sensitive intelligence in-house.\\nStorage Components & Structure: The data plane is composed\"}"
            ],
            "spawn_policy": [
              "pack=PACK-796c1e54",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Each MicroAgentStack",
          "name": "Each MicroAgentStack",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ks XSZ",
            "agent_id": "Each MicroAgentStack",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-1f41c682",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "Each MicroAgentStack",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Ark AI NOA \u2014 Data Architecture & Autonomous Intelligence.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffArk AI NOA - Data Architecture & Autonomous \\nIntelligence\\nData Architecture\\nInternal-First Philosophy: Ark AI NOA is built on an internal-first data philosophy. All \\ncritical data and artifacts remain inside the trust boundary of the system's private \\ninfrastructure[1]. This means the platform avoids external dependencies for storage and \\ncomputation whenever possible. Only finished",
              "signed outputs are allowed to leave the \\nenclave",
              "ensuring that internal work-in-progress",
              "models",
              "and intermediate data stay \\nprotected. By \\\"shipping only signed artifacts outward\\\"[1]",
              "Ark AI NOA maintains tight \\ncontrol over integrity and confidentiality. This approach reduces exposure to external \\nbreaches and keeps sensitive intelligence in-house.\\nStorage Components & Structure: The data plane is composed\"}"
            ],
            "spawn_policy": [
              "pack=PACK-1f41c682",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "The Digest Agent",
          "name": "The Digest Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "lp TKI-7",
            "agent_id": "The Digest Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-919bde43",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "The Digest Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Ark AI NOA \u2014 Data Architecture & Autonomous Intelligence.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffArk AI NOA - Data Architecture & Autonomous \\nIntelligence\\nData Architecture\\nInternal-First Philosophy: Ark AI NOA is built on an internal-first data philosophy. All \\ncritical data and artifacts remain inside the trust boundary of the system's private \\ninfrastructure[1]. This means the platform avoids external dependencies for storage and \\ncomputation whenever possible. Only finished",
              "signed outputs are allowed to leave the \\nenclave",
              "ensuring that internal work-in-progress",
              "models",
              "and intermediate data stay \\nprotected. By \\\"shipping only signed artifacts outward\\\"[1]",
              "Ark AI NOA maintains tight \\ncontrol over integrity and confidentiality. This approach reduces exposure to external \\nbreaches and keeps sensitive intelligence in-house.\\nStorage Components & Structure: The data plane is composed\"}"
            ],
            "spawn_policy": [
              "pack=PACK-919bde43",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "This is done by the CommandChiefAgent",
          "name": "This is done by the CommandChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "fv REM",
            "agent_id": "This is done by the CommandChiefAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-c19d7ee9",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "This is done by the CommandChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Ark AI NOA \u2014 Data Architecture & Autonomous Intelligence.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffArk AI NOA - Data Architecture & Autonomous \\nIntelligence\\nData Architecture\\nInternal-First Philosophy: Ark AI NOA is built on an internal-first data philosophy. All \\ncritical data and artifacts remain inside the trust boundary of the system's private \\ninfrastructure[1]. This means the platform avoids external dependencies for storage and \\ncomputation whenever possible. Only finished",
              "signed outputs are allowed to leave the \\nenclave",
              "ensuring that internal work-in-progress",
              "models",
              "and intermediate data stay \\nprotected. By \\\"shipping only signed artifacts outward\\\"[1]",
              "Ark AI NOA maintains tight \\ncontrol over integrity and confidentiality. This approach reduces exposure to external \\nbreaches and keeps sensitive intelligence in-house.\\nStorage Components & Structure: The data plane is composed\"}"
            ],
            "spawn_policy": [
              "pack=PACK-c19d7ee9",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "The MicroAgentStack",
          "name": "The MicroAgentStack",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "tv DXG",
            "agent_id": "The MicroAgentStack",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-8b2c60c2",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "The MicroAgentStack",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Ark AI NOA \u2014 Data Architecture & Autonomous Intelligence.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffArk AI NOA - Data Architecture & Autonomous \\nIntelligence\\nData Architecture\\nInternal-First Philosophy: Ark AI NOA is built on an internal-first data philosophy. All \\ncritical data and artifacts remain inside the trust boundary of the system's private \\ninfrastructure[1]. This means the platform avoids external dependencies for storage and \\ncomputation whenever possible. Only finished",
              "signed outputs are allowed to leave the \\nenclave",
              "ensuring that internal work-in-progress",
              "models",
              "and intermediate data stay \\nprotected. By \\\"shipping only signed artifacts outward\\\"[1]",
              "Ark AI NOA maintains tight \\ncontrol over integrity and confidentiality. This approach reduces exposure to external \\nbreaches and keeps sensitive intelligence in-house.\\nStorage Components & Structure: The data plane is composed\"}"
            ],
            "spawn_policy": [
              "pack=PACK-8b2c60c2",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "The Security Agent",
          "name": "The Security Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "fv AIE",
            "agent_id": "The Security Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-d412e4ca",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "The Security Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=2GB",
              "disk>=2GB",
              "net>=10Mbps"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Ark AI NOA \u2014 Data Architecture & Autonomous Intelligence.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffArk AI NOA - Data Architecture & Autonomous \\nIntelligence\\nData Architecture\\nInternal-First Philosophy: Ark AI NOA is built on an internal-first data philosophy. All \\ncritical data and artifacts remain inside the trust boundary of the system's private \\ninfrastructure[1]. This means the platform avoids external dependencies for storage and \\ncomputation whenever possible. Only finished",
              "signed outputs are allowed to leave the \\nenclave",
              "ensuring that internal work-in-progress",
              "models",
              "and intermediate data stay \\nprotected. By \\\"shipping only signed artifacts outward\\\"[1]",
              "Ark AI NOA maintains tight \\ncontrol over integrity and confidentiality. This approach reduces exposure to external \\nbreaches and keeps sensitive intelligence in-house.\\nStorage Components & Structure: The data plane is composed\"}"
            ],
            "spawn_policy": [
              "pack=PACK-d412e4ca",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "The CFO Agent",
          "name": "The CFO Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "bs SVJ",
            "agent_id": "The CFO Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-d5a615b9",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "The CFO Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Ark AI NOA \u2014 Data Architecture & Autonomous Intelligence.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffArk AI NOA - Data Architecture & Autonomous \\nIntelligence\\nData Architecture\\nInternal-First Philosophy: Ark AI NOA is built on an internal-first data philosophy. All \\ncritical data and artifacts remain inside the trust boundary of the system's private \\ninfrastructure[1]. This means the platform avoids external dependencies for storage and \\ncomputation whenever possible. Only finished",
              "signed outputs are allowed to leave the \\nenclave",
              "ensuring that internal work-in-progress",
              "models",
              "and intermediate data stay \\nprotected. By \\\"shipping only signed artifacts outward\\\"[1]",
              "Ark AI NOA maintains tight \\ncontrol over integrity and confidentiality. This approach reduces exposure to external \\nbreaches and keeps sensitive intelligence in-house.\\nStorage Components & Structure: The data plane is composed\"}"
            ],
            "spawn_policy": [
              "pack=PACK-d5a615b9",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Security Agent",
          "name": "Security Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "mr YWX-5",
            "agent_id": "Security Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-bd71ef60",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "Security Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=2GB",
              "disk>=2GB",
              "net>=10Mbps"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Ark AI NOA \u2014 Data Architecture & Autonomous Intelligence.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffArk AI NOA - Data Architecture & Autonomous \\nIntelligence\\nData Architecture\\nInternal-First Philosophy: Ark AI NOA is built on an internal-first data philosophy. All \\ncritical data and artifacts remain inside the trust boundary of the system's private \\ninfrastructure[1]. This means the platform avoids external dependencies for storage and \\ncomputation whenever possible. Only finished",
              "signed outputs are allowed to leave the \\nenclave",
              "ensuring that internal work-in-progress",
              "models",
              "and intermediate data stay \\nprotected. By \\\"shipping only signed artifacts outward\\\"[1]",
              "Ark AI NOA maintains tight \\ncontrol over integrity and confidentiality. This approach reduces exposure to external \\nbreaches and keeps sensitive intelligence in-house.\\nStorage Components & Structure: The data plane is composed\"}"
            ],
            "spawn_policy": [
              "pack=PACK-bd71ef60",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "When delegating to a MicroAgentStack",
          "name": "When delegating to a MicroAgentStack",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "yt FQN",
            "agent_id": "When delegating to a MicroAgentStack",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-5f6cc956",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "When delegating to a MicroAgentStack",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Ark AI NOA \u2014 Data Architecture & Autonomous Intelligence.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffArk AI NOA - Data Architecture & Autonomous \\nIntelligence\\nData Architecture\\nInternal-First Philosophy: Ark AI NOA is built on an internal-first data philosophy. All \\ncritical data and artifacts remain inside the trust boundary of the system's private \\ninfrastructure[1]. This means the platform avoids external dependencies for storage and \\ncomputation whenever possible. Only finished",
              "signed outputs are allowed to leave the \\nenclave",
              "ensuring that internal work-in-progress",
              "models",
              "and intermediate data stay \\nprotected. By \\\"shipping only signed artifacts outward\\\"[1]",
              "Ark AI NOA maintains tight \\ncontrol over integrity and confidentiality. This approach reduces exposure to external \\nbreaches and keeps sensitive intelligence in-house.\\nStorage Components & Structure: The data plane is composed\"}"
            ],
            "spawn_policy": [
              "pack=PACK-5f6cc956",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Micro-Agent",
          "name": "Micro-Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ji ADF-7",
            "agent_id": "Micro-Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-fc7be497",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "Micro-Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Ark AI NOA \u2014 Data Architecture & Autonomous Intelligence.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffArk AI NOA - Data Architecture & Autonomous \\nIntelligence\\nData Architecture\\nInternal-First Philosophy: Ark AI NOA is built on an internal-first data philosophy. All \\ncritical data and artifacts remain inside the trust boundary of the system's private \\ninfrastructure[1]. This means the platform avoids external dependencies for storage and \\ncomputation whenever possible. Only finished",
              "signed outputs are allowed to leave the \\nenclave",
              "ensuring that internal work-in-progress",
              "models",
              "and intermediate data stay \\nprotected. By \\\"shipping only signed artifacts outward\\\"[1]",
              "Ark AI NOA maintains tight \\ncontrol over integrity and confidentiality. This approach reduces exposure to external \\nbreaches and keeps sensitive intelligence in-house.\\nStorage Components & Structure: The data plane is composed\"}"
            ],
            "spawn_policy": [
              "pack=PACK-fc7be497",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Each MicroAgentStack or Board Agent",
          "name": "Each MicroAgentStack or Board Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "id YCG",
            "agent_id": "Each MicroAgentStack or Board Agent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-6752f475",
            "category": "Micro-Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "Each MicroAgentStack or Board Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Ark AI NOA \u2014 Data Architecture & Autonomous Intelligence.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffArk AI NOA - Data Architecture & Autonomous \\nIntelligence\\nData Architecture\\nInternal-First Philosophy: Ark AI NOA is built on an internal-first data philosophy. All \\ncritical data and artifacts remain inside the trust boundary of the system's private \\ninfrastructure[1]. This means the platform avoids external dependencies for storage and \\ncomputation whenever possible. Only finished",
              "signed outputs are allowed to leave the \\nenclave",
              "ensuring that internal work-in-progress",
              "models",
              "and intermediate data stay \\nprotected. By \\\"shipping only signed artifacts outward\\\"[1]",
              "Ark AI NOA maintains tight \\ncontrol over integrity and confidentiality. This approach reduces exposure to external \\nbreaches and keeps sensitive intelligence in-house.\\nStorage Components & Structure: The data plane is composed\"}"
            ],
            "spawn_policy": [
              "pack=PACK-6752f475",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "It gives the CommandChiefAgent",
          "name": "It gives the CommandChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "jq DVJ",
            "agent_id": "It gives the CommandChiefAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-3d9767ec",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "It gives the CommandChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Ark AI NOA \u2014 Data Architecture & Autonomous Intelligence.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffArk AI NOA - Data Architecture & Autonomous \\nIntelligence\\nData Architecture\\nInternal-First Philosophy: Ark AI NOA is built on an internal-first data philosophy. All \\ncritical data and artifacts remain inside the trust boundary of the system's private \\ninfrastructure[1]. This means the platform avoids external dependencies for storage and \\ncomputation whenever possible. Only finished",
              "signed outputs are allowed to leave the \\nenclave",
              "ensuring that internal work-in-progress",
              "models",
              "and intermediate data stay \\nprotected. By \\\"shipping only signed artifacts outward\\\"[1]",
              "Ark AI NOA maintains tight \\ncontrol over integrity and confidentiality. This approach reduces exposure to external \\nbreaches and keeps sensitive intelligence in-house.\\nStorage Components & Structure: The data plane is composed\"}"
            ],
            "spawn_policy": [
              "pack=PACK-3d9767ec",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "CFO Agent",
          "name": "CFO Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "gm KTB",
            "agent_id": "CFO Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-ae6209fe",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "CFO Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Ark AI NOA \u2014 Data Architecture & Autonomous Intelligence.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffArk AI NOA - Data Architecture & Autonomous \\nIntelligence\\nData Architecture\\nInternal-First Philosophy: Ark AI NOA is built on an internal-first data philosophy. All \\ncritical data and artifacts remain inside the trust boundary of the system's private \\ninfrastructure[1]. This means the platform avoids external dependencies for storage and \\ncomputation whenever possible. Only finished",
              "signed outputs are allowed to leave the \\nenclave",
              "ensuring that internal work-in-progress",
              "models",
              "and intermediate data stay \\nprotected. By \\\"shipping only signed artifacts outward\\\"[1]",
              "Ark AI NOA maintains tight \\ncontrol over integrity and confidentiality. This approach reduces exposure to external \\nbreaches and keeps sensitive intelligence in-house.\\nStorage Components & Structure: The data plane is composed\"}"
            ],
            "spawn_policy": [
              "pack=PACK-ae6209fe",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "The Board Agents also have the authority to spawn MicroAgentStacks",
          "name": "The Board Agents also have the authority to spawn MicroAgentStacks",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "qx TTL",
            "agent_id": "The Board Agents also have the authority to spawn MicroAgentStacks",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-5b813172",
            "category": "Micro-Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "The Board Agents also have the authority to spawn MicroAgentStacks",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Ark AI NOA \u2014 Data Architecture & Autonomous Intelligence.txt",
            "source_rows_json": [
              "{\"sample\": \"\ufeffArk AI NOA - Data Architecture & Autonomous \\nIntelligence\\nData Architecture\\nInternal-First Philosophy: Ark AI NOA is built on an internal-first data philosophy. All \\ncritical data and artifacts remain inside the trust boundary of the system's private \\ninfrastructure[1]. This means the platform avoids external dependencies for storage and \\ncomputation whenever possible. Only finished",
              "signed outputs are allowed to leave the \\nenclave",
              "ensuring that internal work-in-progress",
              "models",
              "and intermediate data stay \\nprotected. By \\\"shipping only signed artifacts outward\\\"[1]",
              "Ark AI NOA maintains tight \\ncontrol over integrity and confidentiality. This approach reduces exposure to external \\nbreaches and keeps sensitive intelligence in-house.\\nStorage Components & Structure: The data plane is composed\"}"
            ],
            "spawn_policy": [
              "pack=PACK-5b813172",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Micro-Agent Stacks",
          "name": "Micro-Agent Stacks",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "xj EWK",
            "agent_id": "Micro-Agent Stacks",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-c8df16f8",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "Micro-Agent Stacks",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-ai-noa_ build-setup-instructions.txt",
            "source_rows_json": [
              "{\"sample\": \"\\nArk-OS-NOA Build Instruction Manual\\nSummary\\nArk-OS-NOA is a local-first agentic operating system designed to run on Windows 11 Professional hardware without relying on external services. It treats your machine as an autonomous ecosystem: a hive-mind of specialized micro-agents orchestrated by an executive controller that plans",
              "acts",
              "learns",
              "adapts and self-upgrades your software and hardware environment. It offers offline privacy",
              "near-zero latency and full customization because all models",
              "data and tools are stored locally 1 . The system's layered architecture combines a sandbox/research plane for digesting new capabilities",
              "a coordinator/ control plane that evaluates and promotes those capabilities",
              "and a deployed application plane that runs the live agents. An internal Trifecta-Court \"}"
            ],
            "spawn_policy": [
              "pack=PACK-c8df16f8",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Micro-Agent",
          "name": "Micro-Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ji ADF-8",
            "agent_id": "Micro-Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-fc7be497",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "Micro-Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-ai-noa_ build-setup-instructions.txt",
            "source_rows_json": [
              "{\"sample\": \"\\nArk-OS-NOA Build Instruction Manual\\nSummary\\nArk-OS-NOA is a local-first agentic operating system designed to run on Windows 11 Professional hardware without relying on external services. It treats your machine as an autonomous ecosystem: a hive-mind of specialized micro-agents orchestrated by an executive controller that plans",
              "acts",
              "learns",
              "adapts and self-upgrades your software and hardware environment. It offers offline privacy",
              "near-zero latency and full customization because all models",
              "data and tools are stored locally 1 . The system's layered architecture combines a sandbox/research plane for digesting new capabilities",
              "a coordinator/ control plane that evaluates and promotes those capabilities",
              "and a deployed application plane that runs the live agents. An internal Trifecta-Court \"}"
            ],
            "spawn_policy": [
              "pack=PACK-fc7be497",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "CommanderChiefAgent",
          "name": "CommanderChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "nm CCK",
            "agent_id": "CommanderChiefAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-5756d42f",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "CommanderChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-ai-noa_ build-setup-instructions.txt",
            "source_rows_json": [
              "{\"sample\": \"\\nArk-OS-NOA Build Instruction Manual\\nSummary\\nArk-OS-NOA is a local-first agentic operating system designed to run on Windows 11 Professional hardware without relying on external services. It treats your machine as an autonomous ecosystem: a hive-mind of specialized micro-agents orchestrated by an executive controller that plans",
              "acts",
              "learns",
              "adapts and self-upgrades your software and hardware environment. It offers offline privacy",
              "near-zero latency and full customization because all models",
              "data and tools are stored locally 1 . The system's layered architecture combines a sandbox/research plane for digesting new capabilities",
              "a coordinator/ control plane that evaluates and promotes those capabilities",
              "and a deployed application plane that runs the live agents. An internal Trifecta-Court \"}"
            ],
            "spawn_policy": [
              "pack=PACK-5756d42f",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "The NOA ExecutiveCommanderChiefAgent",
          "name": "The NOA ExecutiveCommanderChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "dm BBK",
            "agent_id": "The NOA ExecutiveCommanderChiefAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-c41ea84d",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "The NOA ExecutiveCommanderChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Executive",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-ai-noa_ build-setup-instructions.txt",
            "source_rows_json": [
              "{\"sample\": \"\\nArk-OS-NOA Build Instruction Manual\\nSummary\\nArk-OS-NOA is a local-first agentic operating system designed to run on Windows 11 Professional hardware without relying on external services. It treats your machine as an autonomous ecosystem: a hive-mind of specialized micro-agents orchestrated by an executive controller that plans",
              "acts",
              "learns",
              "adapts and self-upgrades your software and hardware environment. It offers offline privacy",
              "near-zero latency and full customization because all models",
              "data and tools are stored locally 1 . The system's layered architecture combines a sandbox/research plane for digesting new capabilities",
              "a coordinator/ control plane that evaluates and promotes those capabilities",
              "and a deployed application plane that runs the live agents. An internal Trifecta-Court \"}"
            ],
            "spawn_policy": [
              "pack=PACK-c41ea84d",
              "min_plane=Deployed",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "IngestAgent",
          "name": "IngestAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "qm PFQ",
            "agent_id": "IngestAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-6fadcebe",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "IngestAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-ai-noa_ build-setup-instructions.txt",
            "source_rows_json": [
              "{\"sample\": \"3. Define tables for embeddings (id",
              "doc_id",
              "vector",
              "metadata). Use LangChain or LlamaIndex connectors to store and retrieve embeddings.\\nOption B - Qdrant or Chroma\\n1. Download prebuilt Qdrant binary (a single executable) or run via Docker for Windows. Qdrant is optimized for high-dimensional vectors and can run offline.\\n2. Configure persistent storage path in the configuration file. Use the Python qdrant-client to upsert and search vectors.\\n5.4 Set Up Object Storage\\nRun MinIO as a Windows service or inside a container. MinIO will store large files (models",
              "datasets",
              "SBOMs) in an S3-compatible API. Configure a bucket called arkos with versioning. Set environment variables for access key and secret key in your micro-agent scripts.\\n5.5 Install and Configure LangChain/LlamaIndex\\nUse LangChain\"}"
            ],
            "spawn_policy": [
              "pack=PACK-6fadcebe",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "PlanAgent",
          "name": "PlanAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "sb ZPT",
            "agent_id": "PlanAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-a4bd8597",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "PlanAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-ai-noa_ build-setup-instructions.txt",
            "source_rows_json": [
              "{\"sample\": \"3. Define tables for embeddings (id",
              "doc_id",
              "vector",
              "metadata). Use LangChain or LlamaIndex connectors to store and retrieve embeddings.\\nOption B - Qdrant or Chroma\\n1. Download prebuilt Qdrant binary (a single executable) or run via Docker for Windows. Qdrant is optimized for high-dimensional vectors and can run offline.\\n2. Configure persistent storage path in the configuration file. Use the Python qdrant-client to upsert and search vectors.\\n5.4 Set Up Object Storage\\nRun MinIO as a Windows service or inside a container. MinIO will store large files (models",
              "datasets",
              "SBOMs) in an S3-compatible API. Configure a bucket called arkos with versioning. Set environment variables for access key and secret key in your micro-agent scripts.\\n5.5 Install and Configure LangChain/LlamaIndex\\nUse LangChain\"}"
            ],
            "spawn_policy": [
              "pack=PACK-a4bd8597",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "SearchAgent",
          "name": "SearchAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "gj AAH",
            "agent_id": "SearchAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-8bd7b5d1",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "SearchAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-ai-noa_ build-setup-instructions.txt",
            "source_rows_json": [
              "{\"sample\": \"3. Define tables for embeddings (id",
              "doc_id",
              "vector",
              "metadata). Use LangChain or LlamaIndex connectors to store and retrieve embeddings.\\nOption B - Qdrant or Chroma\\n1. Download prebuilt Qdrant binary (a single executable) or run via Docker for Windows. Qdrant is optimized for high-dimensional vectors and can run offline.\\n2. Configure persistent storage path in the configuration file. Use the Python qdrant-client to upsert and search vectors.\\n5.4 Set Up Object Storage\\nRun MinIO as a Windows service or inside a container. MinIO will store large files (models",
              "datasets",
              "SBOMs) in an S3-compatible API. Configure a bucket called arkos with versioning. Set environment variables for access key and secret key in your micro-agent scripts.\\n5.5 Install and Configure LangChain/LlamaIndex\\nUse LangChain\"}"
            ],
            "spawn_policy": [
              "pack=PACK-8bd7b5d1",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "MultiActionAgent",
          "name": "MultiActionAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "so RVE",
            "agent_id": "MultiActionAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-8ffd0475",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "MultiActionAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-ai-noa_ build-setup-instructions.txt",
            "source_rows_json": [
              "{\"sample\": \"3. Define tables for embeddings (id",
              "doc_id",
              "vector",
              "metadata). Use LangChain or LlamaIndex connectors to store and retrieve embeddings.\\nOption B - Qdrant or Chroma\\n1. Download prebuilt Qdrant binary (a single executable) or run via Docker for Windows. Qdrant is optimized for high-dimensional vectors and can run offline.\\n2. Configure persistent storage path in the configuration file. Use the Python qdrant-client to upsert and search vectors.\\n5.4 Set Up Object Storage\\nRun MinIO as a Windows service or inside a container. MinIO will store large files (models",
              "datasets",
              "SBOMs) in an S3-compatible API. Configure a bucket called arkos with versioning. Set environment variables for access key and secret key in your micro-agent scripts.\\n5.5 Install and Configure LangChain/LlamaIndex\\nUse LangChain\"}"
            ],
            "spawn_policy": [
              "pack=PACK-8ffd0475",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "The ExecutiveCommanderChiefAgent",
          "name": "The ExecutiveCommanderChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "gt VJD-4",
            "agent_id": "The ExecutiveCommanderChiefAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-a4541e11",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "The ExecutiveCommanderChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Executive",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-ai-noa_ build-setup-instructions.txt",
            "source_rows_json": [
              "{\"sample\": \"3. Define tables for embeddings (id",
              "doc_id",
              "vector",
              "metadata). Use LangChain or LlamaIndex connectors to store and retrieve embeddings.\\nOption B - Qdrant or Chroma\\n1. Download prebuilt Qdrant binary (a single executable) or run via Docker for Windows. Qdrant is optimized for high-dimensional vectors and can run offline.\\n2. Configure persistent storage path in the configuration file. Use the Python qdrant-client to upsert and search vectors.\\n5.4 Set Up Object Storage\\nRun MinIO as a Windows service or inside a container. MinIO will store large files (models",
              "datasets",
              "SBOMs) in an S3-compatible API. Configure a bucket called arkos with versioning. Set environment variables for access key and secret key in your micro-agent scripts.\\n5.5 Install and Configure LangChain/LlamaIndex\\nUse LangChain\"}"
            ],
            "spawn_policy": [
              "pack=PACK-a4541e11",
              "min_plane=Deployed",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Micro-Agent",
          "name": "Micro-Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ji ADF-9",
            "agent_id": "Micro-Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-fc7be497",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "Micro-Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-ai-noa_ build-setup-instructions.txt",
            "source_rows_json": [
              "{\"sample\": \"3. Define tables for embeddings (id",
              "doc_id",
              "vector",
              "metadata). Use LangChain or LlamaIndex connectors to store and retrieve embeddings.\\nOption B - Qdrant or Chroma\\n1. Download prebuilt Qdrant binary (a single executable) or run via Docker for Windows. Qdrant is optimized for high-dimensional vectors and can run offline.\\n2. Configure persistent storage path in the configuration file. Use the Python qdrant-client to upsert and search vectors.\\n5.4 Set Up Object Storage\\nRun MinIO as a Windows service or inside a container. MinIO will store large files (models",
              "datasets",
              "SBOMs) in an S3-compatible API. Configure a bucket called arkos with versioning. Set environment variables for access key and secret key in your micro-agent scripts.\\n5.5 Install and Configure LangChain/LlamaIndex\\nUse LangChain\"}"
            ],
            "spawn_policy": [
              "pack=PACK-fc7be497",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "ExecutiveCommanderChiefAgent",
          "name": "ExecutiveCommanderChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "vw MFS-14",
            "agent_id": "ExecutiveCommanderChiefAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-df6b24c4",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "ExecutiveCommanderChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Executive",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-ai-noa_ build-setup-instructions.txt",
            "source_rows_json": [
              "{\"sample\": \"3. Define tables for embeddings (id",
              "doc_id",
              "vector",
              "metadata). Use LangChain or LlamaIndex connectors to store and retrieve embeddings.\\nOption B - Qdrant or Chroma\\n1. Download prebuilt Qdrant binary (a single executable) or run via Docker for Windows. Qdrant is optimized for high-dimensional vectors and can run offline.\\n2. Configure persistent storage path in the configuration file. Use the Python qdrant-client to upsert and search vectors.\\n5.4 Set Up Object Storage\\nRun MinIO as a Windows service or inside a container. MinIO will store large files (models",
              "datasets",
              "SBOMs) in an S3-compatible API. Configure a bucket called arkos with versioning. Set environment variables for access key and secret key in your micro-agent scripts.\\n5.5 Install and Configure LangChain/LlamaIndex\\nUse LangChain\"}"
            ],
            "spawn_policy": [
              "pack=PACK-df6b24c4",
              "min_plane=Deployed",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "SearchAgent to fetch data and then the SummarizeAgent",
          "name": "SearchAgent to fetch data and then the SummarizeAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "qb CWI",
            "agent_id": "SearchAgent to fetch data and then the SummarizeAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-639b61f6",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "SearchAgent to fetch data and then the SummarizeAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-ai-noa_ build-setup-instructions.txt",
            "source_rows_json": [
              "{\"sample\": \"3. Define tables for embeddings (id",
              "doc_id",
              "vector",
              "metadata). Use LangChain or LlamaIndex connectors to store and retrieve embeddings.\\nOption B - Qdrant or Chroma\\n1. Download prebuilt Qdrant binary (a single executable) or run via Docker for Windows. Qdrant is optimized for high-dimensional vectors and can run offline.\\n2. Configure persistent storage path in the configuration file. Use the Python qdrant-client to upsert and search vectors.\\n5.4 Set Up Object Storage\\nRun MinIO as a Windows service or inside a container. MinIO will store large files (models",
              "datasets",
              "SBOMs) in an S3-compatible API. Configure a bucket called arkos with versioning. Set environment variables for access key and secret key in your micro-agent scripts.\\n5.5 Install and Configure LangChain/LlamaIndex\\nUse LangChain\"}"
            ],
            "spawn_policy": [
              "pack=PACK-639b61f6",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Building Micro-Agent Stacks",
          "name": "Building Micro-Agent Stacks",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "cj BVS",
            "agent_id": "Building Micro-Agent Stacks",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-fa66354b",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-E",
            "display_name": "Building Micro-Agent Stacks",
            "efg_requirements": [
              "cpu>=0.5",
              "ram>=1GB",
              "disk>=200MB",
              "net>=5Mbps"
            ],
            "epic": "E",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-ai-noa_ build-setup-instructions.txt",
            "source_rows_json": [
              "{\"sample\": \"3. Define tables for embeddings (id",
              "doc_id",
              "vector",
              "metadata). Use LangChain or LlamaIndex connectors to store and retrieve embeddings.\\nOption B - Qdrant or Chroma\\n1. Download prebuilt Qdrant binary (a single executable) or run via Docker for Windows. Qdrant is optimized for high-dimensional vectors and can run offline.\\n2. Configure persistent storage path in the configuration file. Use the Python qdrant-client to upsert and search vectors.\\n5.4 Set Up Object Storage\\nRun MinIO as a Windows service or inside a container. MinIO will store large files (models",
              "datasets",
              "SBOMs) in an S3-compatible API. Configure a bucket called arkos with versioning. Set environment variables for access key and secret key in your micro-agent scripts.\\n5.5 Install and Configure LangChain/LlamaIndex\\nUse LangChain\"}"
            ],
            "spawn_policy": [
              "pack=PACK-fa66354b",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.e",
            "type": "Agent"
          }
        },
        {
          "id": "CodeExecutorAgent",
          "name": "CodeExecutorAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "in BQO",
            "agent_id": "CodeExecutorAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-6eeea48a",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "CodeExecutorAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-ai-noa_ build-setup-instructions.txt",
            "source_rows_json": [
              "{\"sample\": \"3. Define tables for embeddings (id",
              "doc_id",
              "vector",
              "metadata). Use LangChain or LlamaIndex connectors to store and retrieve embeddings.\\nOption B - Qdrant or Chroma\\n1. Download prebuilt Qdrant binary (a single executable) or run via Docker for Windows. Qdrant is optimized for high-dimensional vectors and can run offline.\\n2. Configure persistent storage path in the configuration file. Use the Python qdrant-client to upsert and search vectors.\\n5.4 Set Up Object Storage\\nRun MinIO as a Windows service or inside a container. MinIO will store large files (models",
              "datasets",
              "SBOMs) in an S3-compatible API. Configure a bucket called arkos with versioning. Set environment variables for access key and secret key in your micro-agent scripts.\\n5.5 Install and Configure LangChain/LlamaIndex\\nUse LangChain\"}"
            ],
            "spawn_policy": [
              "pack=PACK-6eeea48a",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "SummarizeAgent",
          "name": "SummarizeAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "bd FYV",
            "agent_id": "SummarizeAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-e0d73e40",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "SummarizeAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-ai-noa_ build-setup-instructions.txt",
            "source_rows_json": [
              "{\"sample\": \"3. Define tables for embeddings (id",
              "doc_id",
              "vector",
              "metadata). Use LangChain or LlamaIndex connectors to store and retrieve embeddings.\\nOption B - Qdrant or Chroma\\n1. Download prebuilt Qdrant binary (a single executable) or run via Docker for Windows. Qdrant is optimized for high-dimensional vectors and can run offline.\\n2. Configure persistent storage path in the configuration file. Use the Python qdrant-client to upsert and search vectors.\\n5.4 Set Up Object Storage\\nRun MinIO as a Windows service or inside a container. MinIO will store large files (models",
              "datasets",
              "SBOMs) in an S3-compatible API. Configure a bucket called arkos with versioning. Set environment variables for access key and secret key in your micro-agent scripts.\\n5.5 Install and Configure LangChain/LlamaIndex\\nUse LangChain\"}"
            ],
            "spawn_policy": [
              "pack=PACK-e0d73e40",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "The SearchAgent",
          "name": "The SearchAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "bq MQR",
            "agent_id": "The SearchAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-d9ed8e91",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "The SearchAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-ai-noa_ build-setup-instructions.txt",
            "source_rows_json": [
              "{\"sample\": \"3. Run the build script: \\nPyInstaller will create dist\\\\arkos-noa.exe . When launched",
              "this executable starts the ExecutiveCommander",
              "spins up the coordinator (if configured to run locally)",
              "launches the UI and initializes micro-agent stacks. Terminal commands (setting environment variables",
              "starting MinIO",
              "launching Postgres) should be executed automatically in Python via subprocess or os.system .\\nProvide clear log messages and handle errors gracefully.\\n4. Test the .exe on a clean Windows 11 VM to verify that all dependencies are bundled. If missing DLLs or libraries are reported",
              "add them to the spec file.\\n5. Sign the executable with a code-signing certificate if distributing to others.\\n7 Operational Workflow\\n7.1 Starting the System\\n1. Launch arkos-noa.exe . The application should display\"}"
            ],
            "spawn_policy": [
              "pack=PACK-d9ed8e91",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Micro-Agent",
          "name": "Micro-Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ji ADF-10",
            "agent_id": "Micro-Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-fc7be497",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "Micro-Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-ai-noa_ build-setup-instructions.txt",
            "source_rows_json": [
              "{\"sample\": \"3. Run the build script: \\nPyInstaller will create dist\\\\arkos-noa.exe . When launched",
              "this executable starts the ExecutiveCommander",
              "spins up the coordinator (if configured to run locally)",
              "launches the UI and initializes micro-agent stacks. Terminal commands (setting environment variables",
              "starting MinIO",
              "launching Postgres) should be executed automatically in Python via subprocess or os.system .\\nProvide clear log messages and handle errors gracefully.\\n4. Test the .exe on a clean Windows 11 VM to verify that all dependencies are bundled. If missing DLLs or libraries are reported",
              "add them to the spec file.\\n5. Sign the executable with a code-signing certificate if distributing to others.\\n7 Operational Workflow\\n7.1 Starting the System\\n1. Launch arkos-noa.exe . The application should display\"}"
            ],
            "spawn_policy": [
              "pack=PACK-fc7be497",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "SummarizeAgent",
          "name": "SummarizeAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "bd FYV",
            "agent_id": "SummarizeAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-e0d73e40",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "SummarizeAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-ai-noa_ build-setup-instructions.txt",
            "source_rows_json": [
              "{\"sample\": \"3. Run the build script: \\nPyInstaller will create dist\\\\arkos-noa.exe . When launched",
              "this executable starts the ExecutiveCommander",
              "spins up the coordinator (if configured to run locally)",
              "launches the UI and initializes micro-agent stacks. Terminal commands (setting environment variables",
              "starting MinIO",
              "launching Postgres) should be executed automatically in Python via subprocess or os.system .\\nProvide clear log messages and handle errors gracefully.\\n4. Test the .exe on a clean Windows 11 VM to verify that all dependencies are bundled. If missing DLLs or libraries are reported",
              "add them to the spec file.\\n5. Sign the executable with a code-signing certificate if distributing to others.\\n7 Operational Workflow\\n7.1 Starting the System\\n1. Launch arkos-noa.exe . The application should display\"}"
            ],
            "spawn_policy": [
              "pack=PACK-e0d73e40",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Build a Local AI Agent Operating",
          "name": "Build a Local AI Agent Operating",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "vy XDR",
            "agent_id": "Build a Local AI Agent Operating",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-87edfdfe",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-E",
            "display_name": "Build a Local AI Agent Operating",
            "efg_requirements": [
              "cpu>=0.5",
              "ram>=1GB",
              "disk>=200MB",
              "net>=5Mbps"
            ],
            "epic": "E",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-ai-noa_ build-setup-instructions.txt",
            "source_rows_json": "{\"sample\": \"1\\t2\\t7 Build a Local AI Agent Operating System: A Complete Guide\\nhttps://www.arsturn.com/blog/building-a-local-first-ai-agent-operating-system-a-guide\\n3\\t4 13 The Rise of AI Micro-Agents: Tiny Models Automating Big Tasks - DEV Community\\nhttps://dev.to/koolkamalkishor/the-rise-of-ai-micro-agents-tiny-models-automating-big-tasks-386m\\n 5 Orchestrate Apps with Orbitype's Agentic Cloud OS https://www.orbitype.com/posts/nMGYCZ/orchestrate-apps-with-orbitypes-agentic-cloud-os\\n 6 Environment variables\\nhttps://huggingface.co/docs/huggingface_hub/en/package_reference/environment_variables\\n 8\\t9 10 11 12 14 15 Understanding AI Agent Operating Systems: A Comprehensive Guide https://www.ema.co/additional-blogs/addition-blogs/ai-agent-operating-systems-guide\\n 16 17 Open-Source AI Agent Stack 2025: Complete\"}",
            "spawn_policy": [
              "pack=PACK-87edfdfe",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.e",
            "type": "Agent"
          }
        },
        {
          "id": "Understanding AI Agent Operating",
          "name": "Understanding AI Agent Operating",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "hd BLC",
            "agent_id": "Understanding AI Agent Operating",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-85167fd1",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Understanding AI Agent Operating",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-ai-noa_ build-setup-instructions.txt",
            "source_rows_json": "{\"sample\": \"1\\t2\\t7 Build a Local AI Agent Operating System: A Complete Guide\\nhttps://www.arsturn.com/blog/building-a-local-first-ai-agent-operating-system-a-guide\\n3\\t4 13 The Rise of AI Micro-Agents: Tiny Models Automating Big Tasks - DEV Community\\nhttps://dev.to/koolkamalkishor/the-rise-of-ai-micro-agents-tiny-models-automating-big-tasks-386m\\n 5 Orchestrate Apps with Orbitype's Agentic Cloud OS https://www.orbitype.com/posts/nMGYCZ/orchestrate-apps-with-orbitypes-agentic-cloud-os\\n 6 Environment variables\\nhttps://huggingface.co/docs/huggingface_hub/en/package_reference/environment_variables\\n 8\\t9 10 11 12 14 15 Understanding AI Agent Operating Systems: A Comprehensive Guide https://www.ema.co/additional-blogs/addition-blogs/ai-agent-operating-systems-guide\\n 16 17 Open-Source AI Agent Stack 2025: Complete\"}",
            "spawn_policy": [
              "pack=PACK-85167fd1",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Open-Source AI Agent Stack",
          "name": "Open-Source AI Agent Stack",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ai VOR",
            "agent_id": "Open-Source AI Agent Stack",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-d8c404be",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Open-Source AI Agent Stack",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-ai-noa_ build-setup-instructions.txt",
            "source_rows_json": "{\"sample\": \"1\\t2\\t7 Build a Local AI Agent Operating System: A Complete Guide\\nhttps://www.arsturn.com/blog/building-a-local-first-ai-agent-operating-system-a-guide\\n3\\t4 13 The Rise of AI Micro-Agents: Tiny Models Automating Big Tasks - DEV Community\\nhttps://dev.to/koolkamalkishor/the-rise-of-ai-micro-agents-tiny-models-automating-big-tasks-386m\\n 5 Orchestrate Apps with Orbitype's Agentic Cloud OS https://www.orbitype.com/posts/nMGYCZ/orchestrate-apps-with-orbitypes-agentic-cloud-os\\n 6 Environment variables\\nhttps://huggingface.co/docs/huggingface_hub/en/package_reference/environment_variables\\n 8\\t9 10 11 12 14 15 Understanding AI Agent Operating Systems: A Comprehensive Guide https://www.ema.co/additional-blogs/addition-blogs/ai-agent-operating-systems-guide\\n 16 17 Open-Source AI Agent Stack 2025: Complete\"}",
            "spawn_policy": [
              "pack=PACK-d8c404be",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Micro-Agent",
          "name": "Micro-Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ji ADF-11",
            "agent_id": "Micro-Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-fc7be497",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "Micro-Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-ai-noa_ build-setup-instructions.txt",
            "source_rows_json": "{\"sample\": \"1\\t2\\t7 Build a Local AI Agent Operating System: A Complete Guide\\nhttps://www.arsturn.com/blog/building-a-local-first-ai-agent-operating-system-a-guide\\n3\\t4 13 The Rise of AI Micro-Agents: Tiny Models Automating Big Tasks - DEV Community\\nhttps://dev.to/koolkamalkishor/the-rise-of-ai-micro-agents-tiny-models-automating-big-tasks-386m\\n 5 Orchestrate Apps with Orbitype's Agentic Cloud OS https://www.orbitype.com/posts/nMGYCZ/orchestrate-apps-with-orbitypes-agentic-cloud-os\\n 6 Environment variables\\nhttps://huggingface.co/docs/huggingface_hub/en/package_reference/environment_variables\\n 8\\t9 10 11 12 14 15 Understanding AI Agent Operating Systems: A Comprehensive Guide https://www.ema.co/additional-blogs/addition-blogs/ai-agent-operating-systems-guide\\n 16 17 Open-Source AI Agent Stack 2025: Complete\"}",
            "spawn_policy": [
              "pack=PACK-fc7be497",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Micro-Agent",
          "name": "Micro-Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ji ADF-12",
            "agent_id": "Micro-Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-fc7be497",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "Micro-Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "Ark-AI-NOA_The Local-First Agentic OS.txt",
            "source_rows_json": [
              "{\"sample\": \"Ark-AI-NOA: The Local-First Agentic OS \\nArk-AI-NOA is a local-first agentic operating system designed to function as a hive-mind of orchestrated micro-agent stacks. It autonomously plans",
              "acts",
              "learns",
              "and adapts to manage and self-upgrade your entire software and hardware environment. \\nIt fundamentally replaces the fragility of traditional applications and cloud-based services with a unified neural runtime and a dynamic UI. This system digests all forms of code and data",
              "composes tools on demand",
              "and continuously optimizes itself across your entire infrastructure-from servers and networks to PCs and mobile devices. \\n \\nCore Principles \\n Local-First & Autonomous: Operates with complete independence from the cloud. Your data",
              "models",
              "and operations stay on your hardware",
              "under your control. \"}"
            ],
            "spawn_policy": [
              "pack=PACK-fc7be497",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "ExecutiveCommanderChiefAgent\nNOA",
          "name": "ExecutiveCommanderChiefAgent\nNOA",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "xu BEH",
            "agent_id": "ExecutiveCommanderChiefAgent\nNOA",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-f10a32e9",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "ExecutiveCommanderChiefAgent\nNOA",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Executive",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "arkos-expanded-explained.txt",
            "source_rows_json": [
              "{\"sample\": \"### NOA \u2013 ExecutiveCommanderChiefAgent\\nNOA stands at the top of the hierarchy.  It transforms high\u2011level business goals into actionable work plans",
              "assigns Board Agents and **MicroAgentStacks**",
              "enforces policies and model selection",
              "and ensures packaging and archiving.  NOA prohibits privileged Docker\u2011in\u2011Docker usage",
              "instead relying on sidecars and outer BuildKit/containerd to run builds securelyhttps://stackoverflow.com/questions/76224543/multiple-microservices-in-one-docker-container#:~:text=Show%20activity%20on%20this%20post.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-f10a32e9",
              "min_plane=Deployed",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "MicroAgentStacks",
          "name": "MicroAgentStacks",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "kp RIU-33",
            "agent_id": "MicroAgentStacks",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-24114ed9",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "MicroAgentStacks",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "arkos-expanded-explained.txt",
            "source_rows_json": [
              "{\"sample\": \"### NOA \u2013 ExecutiveCommanderChiefAgent\\nNOA stands at the top of the hierarchy.  It transforms high\u2011level business goals into actionable work plans",
              "assigns Board Agents and **MicroAgentStacks**",
              "enforces policies and model selection",
              "and ensures packaging and archiving.  NOA prohibits privileged Docker\u2011in\u2011Docker usage",
              "instead relying on sidecars and outer BuildKit/containerd to run builds securelyhttps://stackoverflow.com/questions/76224543/multiple-microservices-in-one-docker-container#:~:text=Show%20activity%20on%20this%20post.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-24114ed9",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "The Digest Agent",
          "name": "The Digest Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "lp TKI-8",
            "agent_id": "The Digest Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-919bde43",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "The Digest Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "arkos-expanded-explained.txt",
            "source_rows_json": [
              "{\"sample\": \"### Board Agents\\nThe Board Agents act like an executive team.  Each owns a domain (Strategy/CTO",
              "COO",
              "CFO",
              "Legal",
              "Security",
              "Growth/Partnerships and Digest).  They commission MicroAgentStacks",
              "enforce policies",
              "request ModelSelector assistance and govern spending",
              "risk",
              "compliance and partnerships.  The Digest Agent sits here and acts as R&D.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-919bde43",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "They commission MicroAgentStacks",
          "name": "They commission MicroAgentStacks",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "di LNY",
            "agent_id": "They commission MicroAgentStacks",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-e8601114",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "They commission MicroAgentStacks",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "arkos-expanded-explained.txt",
            "source_rows_json": [
              "{\"sample\": \"### Board Agents\\nThe Board Agents act like an executive team.  Each owns a domain (Strategy/CTO",
              "COO",
              "CFO",
              "Legal",
              "Security",
              "Growth/Partnerships and Digest).  They commission MicroAgentStacks",
              "enforce policies",
              "request ModelSelector assistance and govern spending",
              "risk",
              "compliance and partnerships.  The Digest Agent sits here and acts as R&D.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-e8601114",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "CommandChiefAgent",
          "name": "CommandChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "jj CON-15",
            "agent_id": "CommandChiefAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-299e0062",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "CommandChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "arkos-expanded-explained.txt",
            "source_rows_json": [
              "{\"sample\": \"### MicroAgentStacks\\nA MicroAgentStack is an on\u2011demand work pod containing a **CommandChiefAgent**",
              "Operators",
              "Adapters and Guards.  It runs through a five\u2011stage lifecycle (Bootstrap",
              "Execute",
              "Validate",
              "Package",
              "Archive).  Each stack uses the Capsule pattern to avoid nested Docker and relies on sidecars to talk to the outer runtimehttps://stackoverflow.com/questions/76224543/multiple-microservices-in-one-docker-container#:~:text=Show%20activity%20on%20this%20post.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-299e0062",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "A MicroAgentStack",
          "name": "A MicroAgentStack",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "xd VAX-2",
            "agent_id": "A MicroAgentStack",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-598896fd",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "A MicroAgentStack",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "arkos-expanded-explained.txt",
            "source_rows_json": [
              "{\"sample\": \"### MicroAgentStacks\\nA MicroAgentStack is an on\u2011demand work pod containing a **CommandChiefAgent**",
              "Operators",
              "Adapters and Guards.  It runs through a five\u2011stage lifecycle (Bootstrap",
              "Execute",
              "Validate",
              "Package",
              "Archive).  Each stack uses the Capsule pattern to avoid nested Docker and relies on sidecars to talk to the outer runtimehttps://stackoverflow.com/questions/76224543/multiple-microservices-in-one-docker-container#:~:text=Show%20activity%20on%20this%20post.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-598896fd",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "MicroAgentStacks",
          "name": "MicroAgentStacks",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "kp RIU-34",
            "agent_id": "MicroAgentStacks",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-24114ed9",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "MicroAgentStacks",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "arkos-expanded-explained.txt",
            "source_rows_json": [
              "{\"sample\": \"### MicroAgentStacks\\nA MicroAgentStack is an on\u2011demand work pod containing a **CommandChiefAgent**",
              "Operators",
              "Adapters and Guards.  It runs through a five\u2011stage lifecycle (Bootstrap",
              "Execute",
              "Validate",
              "Package",
              "Archive).  Each stack uses the Capsule pattern to avoid nested Docker and relies on sidecars to talk to the outer runtimehttps://stackoverflow.com/questions/76224543/multiple-microservices-in-one-docker-container#:~:text=Show%20activity%20on%20this%20post.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-24114ed9",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Digest Agent\nThe",
          "name": "Digest Agent\nThe",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wf KXE",
            "agent_id": "Digest Agent\nThe",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-2c761aaf",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "Digest Agent\nThe",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "arkos-expanded-explained.txt",
            "source_rows_json": [
              "{\"sample\": \"### Digest Agent\\nThe Digest Agent digests code",
              "data",
              "APIs",
              "SaaS and AI models.  It performs discovery",
              "fetching",
              "parsing",
              "analysis",
              "summarisation",
              "surfacing and security scanning.  Outputs include digest reports",
              "knowledge graphs",
              "embeddings and SBOM/security reports.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-2c761aaf",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "Digest Agent",
          "name": "Digest Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "es FPS-23",
            "agent_id": "Digest Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-a7c4c5d1",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "Digest Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "arkos-expanded-explained.txt",
            "source_rows_json": [
              "{\"sample\": \"### Digest Agent\\nThe Digest Agent digests code",
              "data",
              "APIs",
              "SaaS and AI models.  It performs discovery",
              "fetching",
              "parsing",
              "analysis",
              "summarisation",
              "surfacing and security scanning.  Outputs include digest reports",
              "knowledge graphs",
              "embeddings and SBOM/security reports.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-a7c4c5d1",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "MicroAgentStacks",
          "name": "MicroAgentStacks",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "kp RIU-35",
            "agent_id": "MicroAgentStacks",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-24114ed9",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "MicroAgentStacks",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "arkos-expanded-explained.txt",
            "source_rows_json": [
              "{\"sample\": \"### Combined Framework & Architecture\\nThe system layers strategy (NOA",
              "Board Agents)",
              "execution (MicroAgentStacks",
              "services)",
              "infrastructure (Capsule",
              "event bus",
              "data plane) and intelligence (ModelSelectorAgents",
              "Digest Agent).  This modular architecture allows horizontal scaling",
              "robust security and continuous adaptationhttps://stackoverflow.com/questions/76224543/multiple-microservices-in-one-docker-container#:~:text=Show%20activity%20on%20this%20post.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-24114ed9",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Digest Agent",
          "name": "Digest Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "es FPS-24",
            "agent_id": "Digest Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-a7c4c5d1",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "Digest Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "arkos-expanded-explained.txt",
            "source_rows_json": [
              "{\"sample\": \"### Combined Framework & Architecture\\nThe system layers strategy (NOA",
              "Board Agents)",
              "execution (MicroAgentStacks",
              "services)",
              "infrastructure (Capsule",
              "event bus",
              "data plane) and intelligence (ModelSelectorAgents",
              "Digest Agent).  This modular architecture allows horizontal scaling",
              "robust security and continuous adaptationhttps://stackoverflow.com/questions/76224543/multiple-microservices-in-one-docker-container#:~:text=Show%20activity%20on%20this%20post.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-a7c4c5d1",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "MicroAgentStack",
          "name": "MicroAgentStack",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "qi KZU-12",
            "agent_id": "MicroAgentStack",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-d2c954bc",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "MicroAgentStack",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "arkos-expanded-explained.txt",
            "source_rows_json": [
              "{\"sample\": \"* **Trigger:** A Board Agent or NOA identifies sources to digest\u2014repositories",
              "APIs",
              "CRMs",
              "datasets or models.\\n* **MicroAgentStack:** An intake stack uses Adapters to authenticate and fetch sources.  Provenance and commit metadata are recorded in Postgres and the registry.\\n* **Data Storage Integration:** Raw sources and metadata are stored in the object store (MinIO) and registry (for images).  Each artefact is content\u2011addressed and tagged for retrieval.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-d2c954bc",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "A Board Agent",
          "name": "A Board Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "sy UJI",
            "agent_id": "A Board Agent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-93dcab06",
            "category": "Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "A Board Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "arkos-expanded-explained.txt",
            "source_rows_json": [
              "{\"sample\": \"* **Trigger:** A Board Agent or NOA identifies sources to digest\u2014repositories",
              "APIs",
              "CRMs",
              "datasets or models.\\n* **MicroAgentStack:** An intake stack uses Adapters to authenticate and fetch sources.  Provenance and commit metadata are recorded in Postgres and the registry.\\n* **Data Storage Integration:** Raw sources and metadata are stored in the object store (MinIO) and registry (for images).  Each artefact is content\u2011addressed and tagged for retrieval.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-93dcab06",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "The Embeddings service segments code and documentation into chunks and converts them into vector embeddings via models selected by a ModelSelectorAgent",
          "name": "The Embeddings service segments code and documentation into chunks and converts them into vector embeddings via models selected by a ModelSelectorAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ax WQK",
            "agent_id": "The Embeddings service segments code and documentation into chunks and converts them into vector embeddings via models selected by a ModelSelectorAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-476a4a24",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-F",
            "display_name": "The Embeddings service segments code and documentation into chunks and converts them into vector embeddings via models selected by a ModelSelectorAgent",
            "efg_requirements": [
              "gpu>=1",
              "vram>=8GB",
              "disk>=10GB",
              "net>=50Mbps"
            ],
            "epic": "F",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "arkos-expanded-explained.txt",
            "source_rows_json": [
              "{\"sample\": \"* **Embedding Generation:** The Embeddings service segments code and documentation into chunks and converts them into vector embeddings via models selected by a ModelSelectorAgent (e.g. sentence transformers or llama.cpp embeddings).\\n* **Vector Store Upsert:** Embeddings are stored in pgvector or Qdrant along with metadata referencing their source file and graph node.  This provides a searchable semantic index across all digested artefacts.\\n* **Storage Integration:** The embedding index resides in the vector store",
              "each upsert is logged in Postgres.  The embedding models themselves are stored as OCI images or in MinIO.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-476a4a24",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.f",
            "type": "Agent"
          }
        },
        {
          "id": "ModelSelectorAgent",
          "name": "ModelSelectorAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "fl YEL-14",
            "agent_id": "ModelSelectorAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-20c0247c",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-F",
            "display_name": "ModelSelectorAgent",
            "efg_requirements": [
              "gpu>=1",
              "vram>=8GB",
              "disk>=10GB",
              "net>=50Mbps"
            ],
            "epic": "F",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "arkos-expanded-explained.txt",
            "source_rows_json": [
              "{\"sample\": \"* **Benchmarking:** When new models are ingested",
              "the Model Serving service runs benchmarks",
              "measuring latency",
              "cost and accuracy on representative workloads.  Results feed back into the ModelSelector\u2019s knowledge base.\\n* **Selection:** For each task",
              "a ModelSelectorAgent decides which model to use based on task classification",
              "complexity",
              "privacy tier and constraints.  The decision",
              "rationale",
              "predicted cost and latency are logged in the Trace.\\n* **Execution:** The chosen model processes the task.  Outputs (summaries",
              "embeddings",
              "classifications) are stored in MinIO/pgvector and linked to the run ID.\\n* **Storage Integration:** Benchmark results and model metadata live in Postgres/Supabase",
              "model artefacts (e.g. GGUF files) live in MinIO or the registry.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-20c0247c",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.f",
            "type": "Agent"
          }
        },
        {
          "id": "MicroAgentStacks",
          "name": "MicroAgentStacks",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "kp RIU-36",
            "agent_id": "MicroAgentStacks",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-24114ed9",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "MicroAgentStacks",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "arkos-expanded-explained.txt",
            "source_rows_json": [
              "{\"sample\": \"* **Mind Mapping:** Using the knowledge graph and embeddings",
              "the system constructs mind maps\u2014visual representations of relationships between components",
              "domains and tasks.  These maps help identify impact areas",
              "missing connections and potential integration opportunities.\\n* **Branchwise Foresight:** The Board and NOA employ scenario planning and decision\u2011tree analysis to evaluate multiple future paths before committing resources.  This process is described in detail below and uses the knowledge base built in earlier stages.https://www.databricks.com/blog/generalists-specialists-evolution-ai-systems-toward-compound-ai#:~:text=We%E2%80%99re%20seeing%20the%20same%20evolution",
              "aren%E2%80%99t%20perfect%20for%20every%20job\\n* **Learning Simulation:** For major decisions",
              "MicroAgentStacks can simu\"}"
            ],
            "spawn_policy": [
              "pack=PACK-24114ed9",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "MicroAgentStacks",
          "name": "MicroAgentStacks",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "kp RIU-37",
            "agent_id": "MicroAgentStacks",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-24114ed9",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "MicroAgentStacks",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "arkos-expanded-explained.txt",
            "source_rows_json": [
              "{\"sample\": \"A **VHDX** is a virtual hard disk format used by Hyper\u2011V and other hypervisors to represent disk images.  It can contain an entire filesystem and operating system.  Using VHDX files in ark\u2011os\u2011noa can provide a portable",
              "reproducible environment for running MicroAgentStacks or preserving states.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-24114ed9",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "Each MicroAgentStack",
          "name": "Each MicroAgentStack",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ks XSZ-2",
            "agent_id": "Each MicroAgentStack",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-1f41c682",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "Each MicroAgentStack",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "arkos-expanded-explained.txt",
            "source_rows_json": [
              "{\"sample\": \"1. **Stack Packaging:** Each MicroAgentStack could be exported as a VHDX image at the end of its lifecycle.  This captures the exact file system state (including compiled artefacts",
              "logs and caches) and can be rehydrated later for forensic analysis or reproducibility.  The VHDX would be stored in MinIO and content\u2011addressed via SHA\u2011256.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-1f41c682",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "These prompts can be issued to a ModelSelectorAgent",
          "name": "These prompts can be issued to a ModelSelectorAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "pu AKZ",
            "agent_id": "These prompts can be issued to a ModelSelectorAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-954b33e9",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-F",
            "display_name": "These prompts can be issued to a ModelSelectorAgent",
            "efg_requirements": [
              "gpu>=1",
              "vram>=8GB",
              "disk>=10GB",
              "net>=50Mbps"
            ],
            "epic": "F",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "arkos-expanded-explained.txt",
            "source_rows_json": "{\"sample\": \"These prompts can be issued to a ModelSelectorAgent or LLM for deeper analysis:\"}",
            "spawn_policy": [
              "pack=PACK-954b33e9",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.f",
            "type": "Agent"
          }
        },
        {
          "id": "Comprehensive Agent Directory",
          "name": "Comprehensive Agent Directory",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "kj BTH",
            "agent_id": "Comprehensive Agent Directory",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-63bd3f91",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "Comprehensive Agent Directory",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"# Ark-OS-NOA \u2014 Comprehensive Agent Directory (Merged)\"}",
            "spawn_policy": [
              "pack=PACK-63bd3f91",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "EthicsBoardAgent",
          "name": "EthicsBoardAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "rv NON",
            "agent_id": "EthicsBoardAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-2ee649c0",
            "category": "Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "EthicsBoardAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`AuditBoardAgent`",
              "Responsible for compliance",
              "audit trails",
              "and reporting to external regulators.",
              "``",
              "ExecutiveCommanderChiefAgent",
              "ModelSelectorAgent_Audit",
              "None",
              "approved",
              "global_agent_manifest.json",
              "\\n",
              "`EthicsBoardAgent`",
              "Monitors for bias",
              "hallucination",
              "and ethical alignment in agent outputs and actions.",
              "``",
              "ExecutiveCommanderChiefAgent",
              "ModelSelectorAgent_Ethics",
              "None",
              "approved",
              "global_agent_manifest.json",
              "\\n",
              "`FinanceBoardAgent`",
              "Handles all finance",
              "accounting",
              "and budget planning tasks.",
              "``",
              "ExecutiveCommanderChiefAgent",
              "ModelSelectorAgent\"}"
            ],
            "spawn_policy": [
              "pack=PACK-2ee649c0",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "VisionBoardAgent",
          "name": "VisionBoardAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "mt SVN",
            "agent_id": "VisionBoardAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-a2247e76",
            "category": "Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "VisionBoardAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`AuditBoardAgent`",
              "Responsible for compliance",
              "audit trails",
              "and reporting to external regulators.",
              "``",
              "ExecutiveCommanderChiefAgent",
              "ModelSelectorAgent_Audit",
              "None",
              "approved",
              "global_agent_manifest.json",
              "\\n",
              "`EthicsBoardAgent`",
              "Monitors for bias",
              "hallucination",
              "and ethical alignment in agent outputs and actions.",
              "``",
              "ExecutiveCommanderChiefAgent",
              "ModelSelectorAgent_Ethics",
              "None",
              "approved",
              "global_agent_manifest.json",
              "\\n",
              "`FinanceBoardAgent`",
              "Handles all finance",
              "accounting",
              "and budget planning tasks.",
              "``",
              "ExecutiveCommanderChiefAgent",
              "ModelSelectorAgent\"}"
            ],
            "spawn_policy": [
              "pack=PACK-a2247e76",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "StrategyBoardAgent",
          "name": "StrategyBoardAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wa BUB",
            "agent_id": "StrategyBoardAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-e3a14dee",
            "category": "Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "StrategyBoardAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`AuditBoardAgent`",
              "Responsible for compliance",
              "audit trails",
              "and reporting to external regulators.",
              "``",
              "ExecutiveCommanderChiefAgent",
              "ModelSelectorAgent_Audit",
              "None",
              "approved",
              "global_agent_manifest.json",
              "\\n",
              "`EthicsBoardAgent`",
              "Monitors for bias",
              "hallucination",
              "and ethical alignment in agent outputs and actions.",
              "``",
              "ExecutiveCommanderChiefAgent",
              "ModelSelectorAgent_Ethics",
              "None",
              "approved",
              "global_agent_manifest.json",
              "\\n",
              "`FinanceBoardAgent`",
              "Handles all finance",
              "accounting",
              "and budget planning tasks.",
              "``",
              "ExecutiveCommanderChiefAgent",
              "ModelSelectorAgent\"}"
            ],
            "spawn_policy": [
              "pack=PACK-e3a14dee",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "FinanceBoardAgent",
          "name": "FinanceBoardAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "vh IQS",
            "agent_id": "FinanceBoardAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-a648db4f",
            "category": "Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "FinanceBoardAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`AuditBoardAgent`",
              "Responsible for compliance",
              "audit trails",
              "and reporting to external regulators.",
              "``",
              "ExecutiveCommanderChiefAgent",
              "ModelSelectorAgent_Audit",
              "None",
              "approved",
              "global_agent_manifest.json",
              "\\n",
              "`EthicsBoardAgent`",
              "Monitors for bias",
              "hallucination",
              "and ethical alignment in agent outputs and actions.",
              "``",
              "ExecutiveCommanderChiefAgent",
              "ModelSelectorAgent_Ethics",
              "None",
              "approved",
              "global_agent_manifest.json",
              "\\n",
              "`FinanceBoardAgent`",
              "Handles all finance",
              "accounting",
              "and budget planning tasks.",
              "``",
              "ExecutiveCommanderChiefAgent",
              "ModelSelectorAgent\"}"
            ],
            "spawn_policy": [
              "pack=PACK-a648db4f",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "LegalComplianceBoardAgent",
          "name": "LegalComplianceBoardAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "qe RII",
            "agent_id": "LegalComplianceBoardAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-4652de8c",
            "category": "Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "LegalComplianceBoardAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`AuditBoardAgent`",
              "Responsible for compliance",
              "audit trails",
              "and reporting to external regulators.",
              "``",
              "ExecutiveCommanderChiefAgent",
              "ModelSelectorAgent_Audit",
              "None",
              "approved",
              "global_agent_manifest.json",
              "\\n",
              "`EthicsBoardAgent`",
              "Monitors for bias",
              "hallucination",
              "and ethical alignment in agent outputs and actions.",
              "``",
              "ExecutiveCommanderChiefAgent",
              "ModelSelectorAgent_Ethics",
              "None",
              "approved",
              "global_agent_manifest.json",
              "\\n",
              "`FinanceBoardAgent`",
              "Handles all finance",
              "accounting",
              "and budget planning tasks.",
              "``",
              "ExecutiveCommanderChiefAgent",
              "ModelSelectorAgent\"}"
            ],
            "spawn_policy": [
              "pack=PACK-4652de8c",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "SecurityBoardAgent",
          "name": "SecurityBoardAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ly HLR",
            "agent_id": "SecurityBoardAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-9c867093",
            "category": "Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "SecurityBoardAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=2GB",
              "disk>=2GB",
              "net>=10Mbps"
            ],
            "epic": "D",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`AuditBoardAgent`",
              "Responsible for compliance",
              "audit trails",
              "and reporting to external regulators.",
              "``",
              "ExecutiveCommanderChiefAgent",
              "ModelSelectorAgent_Audit",
              "None",
              "approved",
              "global_agent_manifest.json",
              "\\n",
              "`EthicsBoardAgent`",
              "Monitors for bias",
              "hallucination",
              "and ethical alignment in agent outputs and actions.",
              "``",
              "ExecutiveCommanderChiefAgent",
              "ModelSelectorAgent_Ethics",
              "None",
              "approved",
              "global_agent_manifest.json",
              "\\n",
              "`FinanceBoardAgent`",
              "Handles all finance",
              "accounting",
              "and budget planning tasks.",
              "``",
              "ExecutiveCommanderChiefAgent",
              "ModelSelectorAgent\"}"
            ],
            "spawn_policy": [
              "pack=PACK-9c867093",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "ExecutiveCommanderChiefAgent",
          "name": "ExecutiveCommanderChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "vw MFS-15",
            "agent_id": "ExecutiveCommanderChiefAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-df6b24c4",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "ExecutiveCommanderChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Executive",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`AuditBoardAgent`",
              "Responsible for compliance",
              "audit trails",
              "and reporting to external regulators.",
              "``",
              "ExecutiveCommanderChiefAgent",
              "ModelSelectorAgent_Audit",
              "None",
              "approved",
              "global_agent_manifest.json",
              "\\n",
              "`EthicsBoardAgent`",
              "Monitors for bias",
              "hallucination",
              "and ethical alignment in agent outputs and actions.",
              "``",
              "ExecutiveCommanderChiefAgent",
              "ModelSelectorAgent_Ethics",
              "None",
              "approved",
              "global_agent_manifest.json",
              "\\n",
              "`FinanceBoardAgent`",
              "Handles all finance",
              "accounting",
              "and budget planning tasks.",
              "``",
              "ExecutiveCommanderChiefAgent",
              "ModelSelectorAgent\"}"
            ],
            "spawn_policy": [
              "pack=PACK-df6b24c4",
              "min_plane=Deployed",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "AuditBoardAgent",
          "name": "AuditBoardAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "bq HHM",
            "agent_id": "AuditBoardAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-6defa8cc",
            "category": "Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "AuditBoardAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`AuditBoardAgent`",
              "Responsible for compliance",
              "audit trails",
              "and reporting to external regulators.",
              "``",
              "ExecutiveCommanderChiefAgent",
              "ModelSelectorAgent_Audit",
              "None",
              "approved",
              "global_agent_manifest.json",
              "\\n",
              "`EthicsBoardAgent`",
              "Monitors for bias",
              "hallucination",
              "and ethical alignment in agent outputs and actions.",
              "``",
              "ExecutiveCommanderChiefAgent",
              "ModelSelectorAgent_Ethics",
              "None",
              "approved",
              "global_agent_manifest.json",
              "\\n",
              "`FinanceBoardAgent`",
              "Handles all finance",
              "accounting",
              "and budget planning tasks.",
              "``",
              "ExecutiveCommanderChiefAgent",
              "ModelSelectorAgent\"}"
            ],
            "spawn_policy": [
              "pack=PACK-6defa8cc",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "OperationsBoardAgent",
          "name": "OperationsBoardAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ny ZEB",
            "agent_id": "OperationsBoardAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-e2923dc6",
            "category": "Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "OperationsBoardAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`AuditBoardAgent`",
              "Responsible for compliance",
              "audit trails",
              "and reporting to external regulators.",
              "``",
              "ExecutiveCommanderChiefAgent",
              "ModelSelectorAgent_Audit",
              "None",
              "approved",
              "global_agent_manifest.json",
              "\\n",
              "`EthicsBoardAgent`",
              "Monitors for bias",
              "hallucination",
              "and ethical alignment in agent outputs and actions.",
              "``",
              "ExecutiveCommanderChiefAgent",
              "ModelSelectorAgent_Ethics",
              "None",
              "approved",
              "global_agent_manifest.json",
              "\\n",
              "`FinanceBoardAgent`",
              "Handles all finance",
              "accounting",
              "and budget planning tasks.",
              "``",
              "ExecutiveCommanderChiefAgent",
              "ModelSelectorAgent\"}"
            ],
            "spawn_policy": [
              "pack=PACK-e2923dc6",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "HRBoardAgent",
          "name": "HRBoardAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "fi ERC",
            "agent_id": "HRBoardAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-e541d2fc",
            "category": "Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "HRBoardAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`AuditBoardAgent`",
              "Responsible for compliance",
              "audit trails",
              "and reporting to external regulators.",
              "``",
              "ExecutiveCommanderChiefAgent",
              "ModelSelectorAgent_Audit",
              "None",
              "approved",
              "global_agent_manifest.json",
              "\\n",
              "`EthicsBoardAgent`",
              "Monitors for bias",
              "hallucination",
              "and ethical alignment in agent outputs and actions.",
              "``",
              "ExecutiveCommanderChiefAgent",
              "ModelSelectorAgent_Ethics",
              "None",
              "approved",
              "global_agent_manifest.json",
              "\\n",
              "`FinanceBoardAgent`",
              "Handles all finance",
              "accounting",
              "and budget planning tasks.",
              "``",
              "ExecutiveCommanderChiefAgent",
              "ModelSelectorAgent\"}"
            ],
            "spawn_policy": [
              "pack=PACK-e541d2fc",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "MarketingBoardAgent",
          "name": "MarketingBoardAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ij EHW",
            "agent_id": "MarketingBoardAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-e8b7483d",
            "category": "Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "MarketingBoardAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`AuditBoardAgent`",
              "Responsible for compliance",
              "audit trails",
              "and reporting to external regulators.",
              "``",
              "ExecutiveCommanderChiefAgent",
              "ModelSelectorAgent_Audit",
              "None",
              "approved",
              "global_agent_manifest.json",
              "\\n",
              "`EthicsBoardAgent`",
              "Monitors for bias",
              "hallucination",
              "and ethical alignment in agent outputs and actions.",
              "``",
              "ExecutiveCommanderChiefAgent",
              "ModelSelectorAgent_Ethics",
              "None",
              "approved",
              "global_agent_manifest.json",
              "\\n",
              "`FinanceBoardAgent`",
              "Handles all finance",
              "accounting",
              "and budget planning tasks.",
              "``",
              "ExecutiveCommanderChiefAgent",
              "ModelSelectorAgent\"}"
            ],
            "spawn_policy": [
              "pack=PACK-e8b7483d",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "TechnologyBoardAgent",
          "name": "TechnologyBoardAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "xu GJW",
            "agent_id": "TechnologyBoardAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-50a613ad",
            "category": "Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "TechnologyBoardAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`AuditBoardAgent`",
              "Responsible for compliance",
              "audit trails",
              "and reporting to external regulators.",
              "``",
              "ExecutiveCommanderChiefAgent",
              "ModelSelectorAgent_Audit",
              "None",
              "approved",
              "global_agent_manifest.json",
              "\\n",
              "`EthicsBoardAgent`",
              "Monitors for bias",
              "hallucination",
              "and ethical alignment in agent outputs and actions.",
              "``",
              "ExecutiveCommanderChiefAgent",
              "ModelSelectorAgent_Ethics",
              "None",
              "approved",
              "global_agent_manifest.json",
              "\\n",
              "`FinanceBoardAgent`",
              "Handles all finance",
              "accounting",
              "and budget planning tasks.",
              "``",
              "ExecutiveCommanderChiefAgent",
              "ModelSelectorAgent\"}"
            ],
            "spawn_policy": [
              "pack=PACK-50a613ad",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "ExecutionPlanningAgent",
          "name": "ExecutionPlanningAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "je USF",
            "agent_id": "ExecutionPlanningAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-d0ed8997",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "ExecutionPlanningAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`CodeGenAgent`",
              "Auto-generates agent/app code",
              "scripts",
              "Dockerfiles",
              "and CI/CD pipelines",
              "escalates only for ambiguous or user-customized implementation.",
              "`def generate(self",
              "agent_entry): ...`",
              "agent_spec",
              "blueprint",
              "code_files",
              "Dockerfile",
              "CI_snippet",
              "True",
              "approved",
              "updated_agent_manifest.json",
              "\\n",
              "`CodeQualityAgent`",
              "Enforces linting",
              "formatting",
              "and static analysis on all generated agent code",
              "escalates for non-standard code styles or critical formatting issues.",
              "`def check_quality(self",
              "code): ...`",
              "code_files",
              "lint_report",
              "formatted_code",
              "True",
              "approved",
              "up\"}"
            ],
            "spawn_policy": [
              "pack=PACK-d0ed8997",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "PromptDesignerAgent",
          "name": "PromptDesignerAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "nw XQN",
            "agent_id": "PromptDesignerAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-63b0d012",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "PromptDesignerAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`CodeGenAgent`",
              "Auto-generates agent/app code",
              "scripts",
              "Dockerfiles",
              "and CI/CD pipelines",
              "escalates only for ambiguous or user-customized implementation.",
              "`def generate(self",
              "agent_entry): ...`",
              "agent_spec",
              "blueprint",
              "code_files",
              "Dockerfile",
              "CI_snippet",
              "True",
              "approved",
              "updated_agent_manifest.json",
              "\\n",
              "`CodeQualityAgent`",
              "Enforces linting",
              "formatting",
              "and static analysis on all generated agent code",
              "escalates for non-standard code styles or critical formatting issues.",
              "`def check_quality(self",
              "code): ...`",
              "code_files",
              "lint_report",
              "formatted_code",
              "True",
              "approved",
              "up\"}"
            ],
            "spawn_policy": [
              "pack=PACK-63b0d012",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "DocumentationGeneratorAgent",
          "name": "DocumentationGeneratorAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "fq JFI",
            "agent_id": "DocumentationGeneratorAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-f8e72a59",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "DocumentationGeneratorAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`CodeGenAgent`",
              "Auto-generates agent/app code",
              "scripts",
              "Dockerfiles",
              "and CI/CD pipelines",
              "escalates only for ambiguous or user-customized implementation.",
              "`def generate(self",
              "agent_entry): ...`",
              "agent_spec",
              "blueprint",
              "code_files",
              "Dockerfile",
              "CI_snippet",
              "True",
              "approved",
              "updated_agent_manifest.json",
              "\\n",
              "`CodeQualityAgent`",
              "Enforces linting",
              "formatting",
              "and static analysis on all generated agent code",
              "escalates for non-standard code styles or critical formatting issues.",
              "`def check_quality(self",
              "code): ...`",
              "code_files",
              "lint_report",
              "formatted_code",
              "True",
              "approved",
              "up\"}"
            ],
            "spawn_policy": [
              "pack=PACK-f8e72a59",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "CodeGenAgent",
          "name": "CodeGenAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "bv IYD",
            "agent_id": "CodeGenAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-2fc3b49b",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-F",
            "display_name": "CodeGenAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "F",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`CodeGenAgent`",
              "Auto-generates agent/app code",
              "scripts",
              "Dockerfiles",
              "and CI/CD pipelines",
              "escalates only for ambiguous or user-customized implementation.",
              "`def generate(self",
              "agent_entry): ...`",
              "agent_spec",
              "blueprint",
              "code_files",
              "Dockerfile",
              "CI_snippet",
              "True",
              "approved",
              "updated_agent_manifest.json",
              "\\n",
              "`CodeQualityAgent`",
              "Enforces linting",
              "formatting",
              "and static analysis on all generated agent code",
              "escalates for non-standard code styles or critical formatting issues.",
              "`def check_quality(self",
              "code): ...`",
              "code_files",
              "lint_report",
              "formatted_code",
              "True",
              "approved",
              "up\"}"
            ],
            "spawn_policy": [
              "pack=PACK-2fc3b49b",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.f",
            "type": "Agent"
          }
        },
        {
          "id": "DependencyResolverAgent",
          "name": "DependencyResolverAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "jd EUI",
            "agent_id": "DependencyResolverAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-def46285",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "DependencyResolverAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`CodeGenAgent`",
              "Auto-generates agent/app code",
              "scripts",
              "Dockerfiles",
              "and CI/CD pipelines",
              "escalates only for ambiguous or user-customized implementation.",
              "`def generate(self",
              "agent_entry): ...`",
              "agent_spec",
              "blueprint",
              "code_files",
              "Dockerfile",
              "CI_snippet",
              "True",
              "approved",
              "updated_agent_manifest.json",
              "\\n",
              "`CodeQualityAgent`",
              "Enforces linting",
              "formatting",
              "and static analysis on all generated agent code",
              "escalates for non-standard code styles or critical formatting issues.",
              "`def check_quality(self",
              "code): ...`",
              "code_files",
              "lint_report",
              "formatted_code",
              "True",
              "approved",
              "up\"}"
            ],
            "spawn_policy": [
              "pack=PACK-def46285",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "TemplateManagerAgent",
          "name": "TemplateManagerAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "bn NQM",
            "agent_id": "TemplateManagerAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-56c235b5",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "TemplateManagerAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`CodeGenAgent`",
              "Auto-generates agent/app code",
              "scripts",
              "Dockerfiles",
              "and CI/CD pipelines",
              "escalates only for ambiguous or user-customized implementation.",
              "`def generate(self",
              "agent_entry): ...`",
              "agent_spec",
              "blueprint",
              "code_files",
              "Dockerfile",
              "CI_snippet",
              "True",
              "approved",
              "updated_agent_manifest.json",
              "\\n",
              "`CodeQualityAgent`",
              "Enforces linting",
              "formatting",
              "and static analysis on all generated agent code",
              "escalates for non-standard code styles or critical formatting issues.",
              "`def check_quality(self",
              "code): ...`",
              "code_files",
              "lint_report",
              "formatted_code",
              "True",
              "approved",
              "up\"}"
            ],
            "spawn_policy": [
              "pack=PACK-56c235b5",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "CodeQualityAgent",
          "name": "CodeQualityAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "jp LCZ",
            "agent_id": "CodeQualityAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-3f0566ee",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "CodeQualityAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`CodeGenAgent`",
              "Auto-generates agent/app code",
              "scripts",
              "Dockerfiles",
              "and CI/CD pipelines",
              "escalates only for ambiguous or user-customized implementation.",
              "`def generate(self",
              "agent_entry): ...`",
              "agent_spec",
              "blueprint",
              "code_files",
              "Dockerfile",
              "CI_snippet",
              "True",
              "approved",
              "updated_agent_manifest.json",
              "\\n",
              "`CodeQualityAgent`",
              "Enforces linting",
              "formatting",
              "and static analysis on all generated agent code",
              "escalates for non-standard code styles or critical formatting issues.",
              "`def check_quality(self",
              "code): ...`",
              "code_files",
              "lint_report",
              "formatted_code",
              "True",
              "approved",
              "up\"}"
            ],
            "spawn_policy": [
              "pack=PACK-3f0566ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "DocumentationListenerAgent",
          "name": "DocumentationListenerAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "kq ZQT",
            "agent_id": "DocumentationListenerAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-8035ea1e",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "DocumentationListenerAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`CodeGenAgent`",
              "Auto-generates agent/app code",
              "scripts",
              "Dockerfiles",
              "and CI/CD pipelines",
              "escalates only for ambiguous or user-customized implementation.",
              "`def generate(self",
              "agent_entry): ...`",
              "agent_spec",
              "blueprint",
              "code_files",
              "Dockerfile",
              "CI_snippet",
              "True",
              "approved",
              "updated_agent_manifest.json",
              "\\n",
              "`CodeQualityAgent`",
              "Enforces linting",
              "formatting",
              "and static analysis on all generated agent code",
              "escalates for non-standard code styles or critical formatting issues.",
              "`def check_quality(self",
              "code): ...`",
              "code_files",
              "lint_report",
              "formatted_code",
              "True",
              "approved",
              "up\"}"
            ],
            "spawn_policy": [
              "pack=PACK-8035ea1e",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "TestCaseGeneratorAgent",
          "name": "TestCaseGeneratorAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ru KQO",
            "agent_id": "TestCaseGeneratorAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-eb982bdd",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "TestCaseGeneratorAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`CodeGenAgent`",
              "Auto-generates agent/app code",
              "scripts",
              "Dockerfiles",
              "and CI/CD pipelines",
              "escalates only for ambiguous or user-customized implementation.",
              "`def generate(self",
              "agent_entry): ...`",
              "agent_spec",
              "blueprint",
              "code_files",
              "Dockerfile",
              "CI_snippet",
              "True",
              "approved",
              "updated_agent_manifest.json",
              "\\n",
              "`CodeQualityAgent`",
              "Enforces linting",
              "formatting",
              "and static analysis on all generated agent code",
              "escalates for non-standard code styles or critical formatting issues.",
              "`def check_quality(self",
              "code): ...`",
              "code_files",
              "lint_report",
              "formatted_code",
              "True",
              "approved",
              "up\"}"
            ],
            "spawn_policy": [
              "pack=PACK-eb982bdd",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "ExecutiveCommanderChiefAgent",
          "name": "ExecutiveCommanderChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "vw MFS-16",
            "agent_id": "ExecutiveCommanderChiefAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-df6b24c4",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "ExecutiveCommanderChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Executive",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`ExecutiveCommanderChiefAgent`",
              "Global CEO agent",
              "consults dynamic executive board",
              "receives directives from human owner",
              "issues strategy to CommanderChiefAgents.",
              "`def execute_strategy(self",
              "intent): ...`",
              "human_owner",
              "CommanderChiefAgent_DataStack",
              "CommanderChiefAgent_DevOps",
              "ModelSelectorAgent_CEO",
              "llama3-70b",
              "True",
              "approved",
              "director_agent_manifest.json",
              "global_agent_manifest.json",
              "\"}"
            ],
            "spawn_policy": [
              "pack=PACK-df6b24c4",
              "min_plane=Deployed",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "AuditComplianceAgent",
          "name": "AuditComplianceAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ip TVM",
            "agent_id": "AuditComplianceAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-e4265101",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "AuditComplianceAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`AuditComplianceAgent`",
              "Maintains audit trails",
              "compliance dashboards",
              "and interfaces with regulators",
              "escalates for audit failures or legal subpoenas.",
              "`def audit(self): ...`",
              "ethics_alert",
              "compliance_alert",
              "action_logs",
              "audit_report",
              "compliance_dashboard",
              "True",
              "approved",
              "updated_agent_manifest.json",
              "\\n",
              "`ComplianceEnforcementAgent`",
              "Monitors and enforces compliance with policies",
              "standards",
              "and regulations",
              "escalates unresolved violations.",
              "`def enforce(self",
              "policy): ...`",
              "access_logs",
              "compliance_policies",
              "compliance_alert",
              "enforcement_action",
              "True",
              "approved",
              "u\"}"
            ],
            "spawn_policy": [
              "pack=PACK-e4265101",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "ReviewAgent",
          "name": "ReviewAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ui FXT-2",
            "agent_id": "ReviewAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-bb4ee1b9",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "ReviewAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`AuditComplianceAgent`",
              "Maintains audit trails",
              "compliance dashboards",
              "and interfaces with regulators",
              "escalates for audit failures or legal subpoenas.",
              "`def audit(self): ...`",
              "ethics_alert",
              "compliance_alert",
              "action_logs",
              "audit_report",
              "compliance_dashboard",
              "True",
              "approved",
              "updated_agent_manifest.json",
              "\\n",
              "`ComplianceEnforcementAgent`",
              "Monitors and enforces compliance with policies",
              "standards",
              "and regulations",
              "escalates unresolved violations.",
              "`def enforce(self",
              "policy): ...`",
              "access_logs",
              "compliance_policies",
              "compliance_alert",
              "enforcement_action",
              "True",
              "approved",
              "u\"}"
            ],
            "spawn_policy": [
              "pack=PACK-bb4ee1b9",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "EthicsAIAlignmentAgent",
          "name": "EthicsAIAlignmentAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "cu SAU",
            "agent_id": "EthicsAIAlignmentAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-8de976e4",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "EthicsAIAlignmentAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`AuditComplianceAgent`",
              "Maintains audit trails",
              "compliance dashboards",
              "and interfaces with regulators",
              "escalates for audit failures or legal subpoenas.",
              "`def audit(self): ...`",
              "ethics_alert",
              "compliance_alert",
              "action_logs",
              "audit_report",
              "compliance_dashboard",
              "True",
              "approved",
              "updated_agent_manifest.json",
              "\\n",
              "`ComplianceEnforcementAgent`",
              "Monitors and enforces compliance with policies",
              "standards",
              "and regulations",
              "escalates unresolved violations.",
              "`def enforce(self",
              "policy): ...`",
              "access_logs",
              "compliance_policies",
              "compliance_alert",
              "enforcement_action",
              "True",
              "approved",
              "u\"}"
            ],
            "spawn_policy": [
              "pack=PACK-8de976e4",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "ManifestEditorAgent",
          "name": "ManifestEditorAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "re YFD",
            "agent_id": "ManifestEditorAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-a79dc066",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "ManifestEditorAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`AuditComplianceAgent`",
              "Maintains audit trails",
              "compliance dashboards",
              "and interfaces with regulators",
              "escalates for audit failures or legal subpoenas.",
              "`def audit(self): ...`",
              "ethics_alert",
              "compliance_alert",
              "action_logs",
              "audit_report",
              "compliance_dashboard",
              "True",
              "approved",
              "updated_agent_manifest.json",
              "\\n",
              "`ComplianceEnforcementAgent`",
              "Monitors and enforces compliance with policies",
              "standards",
              "and regulations",
              "escalates unresolved violations.",
              "`def enforce(self",
              "policy): ...`",
              "access_logs",
              "compliance_policies",
              "compliance_alert",
              "enforcement_action",
              "True",
              "approved",
              "u\"}"
            ],
            "spawn_policy": [
              "pack=PACK-a79dc066",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "ComplianceEnforcementAgent",
          "name": "ComplianceEnforcementAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ra HVZ",
            "agent_id": "ComplianceEnforcementAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-c303ad0f",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "ComplianceEnforcementAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`AuditComplianceAgent`",
              "Maintains audit trails",
              "compliance dashboards",
              "and interfaces with regulators",
              "escalates for audit failures or legal subpoenas.",
              "`def audit(self): ...`",
              "ethics_alert",
              "compliance_alert",
              "action_logs",
              "audit_report",
              "compliance_dashboard",
              "True",
              "approved",
              "updated_agent_manifest.json",
              "\\n",
              "`ComplianceEnforcementAgent`",
              "Monitors and enforces compliance with policies",
              "standards",
              "and regulations",
              "escalates unresolved violations.",
              "`def enforce(self",
              "policy): ...`",
              "access_logs",
              "compliance_policies",
              "compliance_alert",
              "enforcement_action",
              "True",
              "approved",
              "u\"}"
            ],
            "spawn_policy": [
              "pack=PACK-c303ad0f",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "DemoAgent",
          "name": "DemoAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "cf MFG",
            "agent_id": "DemoAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-5489a15e",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "DemoAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`DemoAgent`",
              "Demonstration agent to test proposal workflow.",
              "`def demo(self): pass`",
              "False",
              "approved",
              "updated_agent_manifest.json",
              "\"}"
            ],
            "spawn_policy": [
              "pack=PACK-5489a15e",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "ConfigManagerAgent",
          "name": "ConfigManagerAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "zt HBD",
            "agent_id": "ConfigManagerAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-141c2aba",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "ConfigManagerAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`AgentSupervisorHeartbeatAgent`",
              "Supervises all agent uptime and health",
              "restarts or repairs agents if down",
              "and can escalate for human action if persistent system-wide failure.",
              "`def supervise(self): ...`",
              "agent_status",
              "health_signals",
              "health_report",
              "restart_action",
              "True",
              "approved",
              "updated_agent_manifest.json",
              "\\n",
              "`BackupRestoreAgent`",
              "Manages snapshots",
              "backup",
              "and restore for agent/app data",
              "escalates for backup corruption or restore failure.",
              "`def backup(self): ...`",
              "data_state",
              "backup_policy",
              "backup_file",
              "restore_status",
              "True",
              "approved",
              "updated_agent_manifest\"}"
            ],
            "spawn_policy": [
              "pack=PACK-141c2aba",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "OperatorAgent",
          "name": "OperatorAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "dh TUE",
            "agent_id": "OperatorAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-dc281579",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "OperatorAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`AgentSupervisorHeartbeatAgent`",
              "Supervises all agent uptime and health",
              "restarts or repairs agents if down",
              "and can escalate for human action if persistent system-wide failure.",
              "`def supervise(self): ...`",
              "agent_status",
              "health_signals",
              "health_report",
              "restart_action",
              "True",
              "approved",
              "updated_agent_manifest.json",
              "\\n",
              "`BackupRestoreAgent`",
              "Manages snapshots",
              "backup",
              "and restore for agent/app data",
              "escalates for backup corruption or restore failure.",
              "`def backup(self): ...`",
              "data_state",
              "backup_policy",
              "backup_file",
              "restore_status",
              "True",
              "approved",
              "updated_agent_manifest\"}"
            ],
            "spawn_policy": [
              "pack=PACK-dc281579",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "SafeStackAgent",
          "name": "SafeStackAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "nc VKB",
            "agent_id": "SafeStackAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-d75f524a",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "SafeStackAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`AgentSupervisorHeartbeatAgent`",
              "Supervises all agent uptime and health",
              "restarts or repairs agents if down",
              "and can escalate for human action if persistent system-wide failure.",
              "`def supervise(self): ...`",
              "agent_status",
              "health_signals",
              "health_report",
              "restart_action",
              "True",
              "approved",
              "updated_agent_manifest.json",
              "\\n",
              "`BackupRestoreAgent`",
              "Manages snapshots",
              "backup",
              "and restore for agent/app data",
              "escalates for backup corruption or restore failure.",
              "`def backup(self): ...`",
              "data_state",
              "backup_policy",
              "backup_file",
              "restore_status",
              "True",
              "approved",
              "updated_agent_manifest\"}"
            ],
            "spawn_policy": [
              "pack=PACK-d75f524a",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "MonitoringAlertingAgent",
          "name": "MonitoringAlertingAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "au IHH",
            "agent_id": "MonitoringAlertingAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-99619e31",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "MonitoringAlertingAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`AgentSupervisorHeartbeatAgent`",
              "Supervises all agent uptime and health",
              "restarts or repairs agents if down",
              "and can escalate for human action if persistent system-wide failure.",
              "`def supervise(self): ...`",
              "agent_status",
              "health_signals",
              "health_report",
              "restart_action",
              "True",
              "approved",
              "updated_agent_manifest.json",
              "\\n",
              "`BackupRestoreAgent`",
              "Manages snapshots",
              "backup",
              "and restore for agent/app data",
              "escalates for backup corruption or restore failure.",
              "`def backup(self): ...`",
              "data_state",
              "backup_policy",
              "backup_file",
              "restore_status",
              "True",
              "approved",
              "updated_agent_manifest\"}"
            ],
            "spawn_policy": [
              "pack=PACK-99619e31",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "CacheManagerAgent",
          "name": "CacheManagerAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "nj WXF",
            "agent_id": "CacheManagerAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-53084827",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "CacheManagerAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`AgentSupervisorHeartbeatAgent`",
              "Supervises all agent uptime and health",
              "restarts or repairs agents if down",
              "and can escalate for human action if persistent system-wide failure.",
              "`def supervise(self): ...`",
              "agent_status",
              "health_signals",
              "health_report",
              "restart_action",
              "True",
              "approved",
              "updated_agent_manifest.json",
              "\\n",
              "`BackupRestoreAgent`",
              "Manages snapshots",
              "backup",
              "and restore for agent/app data",
              "escalates for backup corruption or restore failure.",
              "`def backup(self): ...`",
              "data_state",
              "backup_policy",
              "backup_file",
              "restore_status",
              "True",
              "approved",
              "updated_agent_manifest\"}"
            ],
            "spawn_policy": [
              "pack=PACK-53084827",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "BackupRestoreAgent",
          "name": "BackupRestoreAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "gm AZJ",
            "agent_id": "BackupRestoreAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-8e166b00",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "BackupRestoreAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`AgentSupervisorHeartbeatAgent`",
              "Supervises all agent uptime and health",
              "restarts or repairs agents if down",
              "and can escalate for human action if persistent system-wide failure.",
              "`def supervise(self): ...`",
              "agent_status",
              "health_signals",
              "health_report",
              "restart_action",
              "True",
              "approved",
              "updated_agent_manifest.json",
              "\\n",
              "`BackupRestoreAgent`",
              "Manages snapshots",
              "backup",
              "and restore for agent/app data",
              "escalates for backup corruption or restore failure.",
              "`def backup(self): ...`",
              "data_state",
              "backup_policy",
              "backup_file",
              "restore_status",
              "True",
              "approved",
              "updated_agent_manifest\"}"
            ],
            "spawn_policy": [
              "pack=PACK-8e166b00",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "LoggingObservabilityHelperAgent",
          "name": "LoggingObservabilityHelperAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "qn CXF",
            "agent_id": "LoggingObservabilityHelperAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-cab51552",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "LoggingObservabilityHelperAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`AgentSupervisorHeartbeatAgent`",
              "Supervises all agent uptime and health",
              "restarts or repairs agents if down",
              "and can escalate for human action if persistent system-wide failure.",
              "`def supervise(self): ...`",
              "agent_status",
              "health_signals",
              "health_report",
              "restart_action",
              "True",
              "approved",
              "updated_agent_manifest.json",
              "\\n",
              "`BackupRestoreAgent`",
              "Manages snapshots",
              "backup",
              "and restore for agent/app data",
              "escalates for backup corruption or restore failure.",
              "`def backup(self): ...`",
              "data_state",
              "backup_policy",
              "backup_file",
              "restore_status",
              "True",
              "approved",
              "updated_agent_manifest\"}"
            ],
            "spawn_policy": [
              "pack=PACK-cab51552",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "AgentSupervisorHeartbeatAgent",
          "name": "AgentSupervisorHeartbeatAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ws HNK",
            "agent_id": "AgentSupervisorHeartbeatAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-ffea4d80",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "AgentSupervisorHeartbeatAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`AgentSupervisorHeartbeatAgent`",
              "Supervises all agent uptime and health",
              "restarts or repairs agents if down",
              "and can escalate for human action if persistent system-wide failure.",
              "`def supervise(self): ...`",
              "agent_status",
              "health_signals",
              "health_report",
              "restart_action",
              "True",
              "approved",
              "updated_agent_manifest.json",
              "\\n",
              "`BackupRestoreAgent`",
              "Manages snapshots",
              "backup",
              "and restore for agent/app data",
              "escalates for backup corruption or restore failure.",
              "`def backup(self): ...`",
              "data_state",
              "backup_policy",
              "backup_file",
              "restore_status",
              "True",
              "approved",
              "updated_agent_manifest\"}"
            ],
            "spawn_policy": [
              "pack=PACK-ffea4d80",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "MasterChiefIncidentResponseAgent",
          "name": "MasterChiefIncidentResponseAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "db LRY",
            "agent_id": "MasterChiefIncidentResponseAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-4d71bc40",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "MasterChiefIncidentResponseAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`AgentSupervisorHeartbeatAgent`",
              "Supervises all agent uptime and health",
              "restarts or repairs agents if down",
              "and can escalate for human action if persistent system-wide failure.",
              "`def supervise(self): ...`",
              "agent_status",
              "health_signals",
              "health_report",
              "restart_action",
              "True",
              "approved",
              "updated_agent_manifest.json",
              "\\n",
              "`BackupRestoreAgent`",
              "Manages snapshots",
              "backup",
              "and restore for agent/app data",
              "escalates for backup corruption or restore failure.",
              "`def backup(self): ...`",
              "data_state",
              "backup_policy",
              "backup_file",
              "restore_status",
              "True",
              "approved",
              "updated_agent_manifest\"}"
            ],
            "spawn_policy": [
              "pack=PACK-4d71bc40",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "CostEstimationAgent",
          "name": "CostEstimationAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "tu EKG",
            "agent_id": "CostEstimationAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-40568938",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "CostEstimationAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`AgentSupervisorHeartbeatAgent`",
              "Supervises all agent uptime and health",
              "restarts or repairs agents if down",
              "and can escalate for human action if persistent system-wide failure.",
              "`def supervise(self): ...`",
              "agent_status",
              "health_signals",
              "health_report",
              "restart_action",
              "True",
              "approved",
              "updated_agent_manifest.json",
              "\\n",
              "`BackupRestoreAgent`",
              "Manages snapshots",
              "backup",
              "and restore for agent/app data",
              "escalates for backup corruption or restore failure.",
              "`def backup(self): ...`",
              "data_state",
              "backup_policy",
              "backup_file",
              "restore_status",
              "True",
              "approved",
              "updated_agent_manifest\"}"
            ],
            "spawn_policy": [
              "pack=PACK-40568938",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "ErrorHandlingRetryHelperAgent",
          "name": "ErrorHandlingRetryHelperAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "mb KWX",
            "agent_id": "ErrorHandlingRetryHelperAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-acbc6506",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "ErrorHandlingRetryHelperAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`AgentSupervisorHeartbeatAgent`",
              "Supervises all agent uptime and health",
              "restarts or repairs agents if down",
              "and can escalate for human action if persistent system-wide failure.",
              "`def supervise(self): ...`",
              "agent_status",
              "health_signals",
              "health_report",
              "restart_action",
              "True",
              "approved",
              "updated_agent_manifest.json",
              "\\n",
              "`BackupRestoreAgent`",
              "Manages snapshots",
              "backup",
              "and restore for agent/app data",
              "escalates for backup corruption or restore failure.",
              "`def backup(self): ...`",
              "data_state",
              "backup_policy",
              "backup_file",
              "restore_status",
              "True",
              "approved",
              "updated_agent_manifest\"}"
            ],
            "spawn_policy": [
              "pack=PACK-acbc6506",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "OrchestratorAgent",
          "name": "OrchestratorAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ux TEJ",
            "agent_id": "OrchestratorAgent",
            "budget_cap": "per_subject",
            "capability_pack_id": "PACK-1ee123f4",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "OrchestratorAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Orchestrator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`OrchestrationDefinitionAgent`",
              "Translates high-level pipeline/DAG definitions into orchestrator-ready workflow specs",
              "escalates for ambiguous dependencies.",
              "`def define_workflow(self",
              "dependency_graph): ...`",
              "dependency_graph",
              "execution_order",
              "workflow_definition",
              "True",
              "approved",
              "updated_agent_manifest.json",
              "\\n",
              "`OrchestratorAgent`",
              "Global controller for workflow sequencing",
              "agent execution",
              "event routing",
              "and error retries.",
              "`def execute_workflow(self",
              "workflow): ...`",
              "workflow",
              "execution_plan",
              "task_status",
              "error_report",
              "False",
              "approved",
              "updated_agent_manifest.j\"}"
            ],
            "spawn_policy": [
              "pack=PACK-1ee123f4",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "OrchestratorFederationAgent",
          "name": "OrchestratorFederationAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "hb TEA",
            "agent_id": "OrchestratorFederationAgent",
            "budget_cap": "per_subject",
            "capability_pack_id": "PACK-fec27234",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "OrchestratorFederationAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Orchestrator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`OrchestrationDefinitionAgent`",
              "Translates high-level pipeline/DAG definitions into orchestrator-ready workflow specs",
              "escalates for ambiguous dependencies.",
              "`def define_workflow(self",
              "dependency_graph): ...`",
              "dependency_graph",
              "execution_order",
              "workflow_definition",
              "True",
              "approved",
              "updated_agent_manifest.json",
              "\\n",
              "`OrchestratorAgent`",
              "Global controller for workflow sequencing",
              "agent execution",
              "event routing",
              "and error retries.",
              "`def execute_workflow(self",
              "workflow): ...`",
              "workflow",
              "execution_plan",
              "task_status",
              "error_report",
              "False",
              "approved",
              "updated_agent_manifest.j\"}"
            ],
            "spawn_policy": [
              "pack=PACK-fec27234",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "OrchestrationDefinitionAgent",
          "name": "OrchestrationDefinitionAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "fi MFE",
            "agent_id": "OrchestrationDefinitionAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-74a5a735",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "OrchestrationDefinitionAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`OrchestrationDefinitionAgent`",
              "Translates high-level pipeline/DAG definitions into orchestrator-ready workflow specs",
              "escalates for ambiguous dependencies.",
              "`def define_workflow(self",
              "dependency_graph): ...`",
              "dependency_graph",
              "execution_order",
              "workflow_definition",
              "True",
              "approved",
              "updated_agent_manifest.json",
              "\\n",
              "`OrchestratorAgent`",
              "Global controller for workflow sequencing",
              "agent execution",
              "event routing",
              "and error retries.",
              "`def execute_workflow(self",
              "workflow): ...`",
              "workflow",
              "execution_plan",
              "task_status",
              "error_report",
              "False",
              "approved",
              "updated_agent_manifest.j\"}"
            ],
            "spawn_policy": [
              "pack=PACK-74a5a735",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "MarketplaceRatingFeedbackAgent",
          "name": "MarketplaceRatingFeedbackAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "bu TRA",
            "agent_id": "MarketplaceRatingFeedbackAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-35078219",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "MarketplaceRatingFeedbackAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`MarketplaceComplianceAgent`",
              "Ensures plugins comply with legal",
              "regulatory",
              "and organizational standards",
              "escalates for unresolved compliance issues.",
              "`def check_compliance(self",
              "plugin): ...`",
              "plugin_metadata",
              "compliance_standards",
              "compliance_report",
              "approval_status",
              "True",
              "approved",
              "updated_agent_manifest.json",
              "\\n",
              "`MarketplaceDiscoveryAgent`",
              "Discovers and catalogs plugins/apps from public and private marketplaces",
              "escalates for new marketplace integrations or credentialed API access.",
              "`def discover(self): ...`",
              "marketplace_urls",
              "api_keys",
              "plugin_catalog",
              "discovery_events",
              "\"}"
            ],
            "spawn_policy": [
              "pack=PACK-35078219",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "PluginEvaluationAgent",
          "name": "PluginEvaluationAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ws BED",
            "agent_id": "PluginEvaluationAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-78c256b9",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "PluginEvaluationAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`MarketplaceComplianceAgent`",
              "Ensures plugins comply with legal",
              "regulatory",
              "and organizational standards",
              "escalates for unresolved compliance issues.",
              "`def check_compliance(self",
              "plugin): ...`",
              "plugin_metadata",
              "compliance_standards",
              "compliance_report",
              "approval_status",
              "True",
              "approved",
              "updated_agent_manifest.json",
              "\\n",
              "`MarketplaceDiscoveryAgent`",
              "Discovers and catalogs plugins/apps from public and private marketplaces",
              "escalates for new marketplace integrations or credentialed API access.",
              "`def discover(self): ...`",
              "marketplace_urls",
              "api_keys",
              "plugin_catalog",
              "discovery_events",
              "\"}"
            ],
            "spawn_policy": [
              "pack=PACK-78c256b9",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "PluginSandboxSecurityAgent",
          "name": "PluginSandboxSecurityAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "sn ZMT",
            "agent_id": "PluginSandboxSecurityAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-64d13b50",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "PluginSandboxSecurityAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=2GB",
              "disk>=2GB",
              "net>=10Mbps"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`MarketplaceComplianceAgent`",
              "Ensures plugins comply with legal",
              "regulatory",
              "and organizational standards",
              "escalates for unresolved compliance issues.",
              "`def check_compliance(self",
              "plugin): ...`",
              "plugin_metadata",
              "compliance_standards",
              "compliance_report",
              "approval_status",
              "True",
              "approved",
              "updated_agent_manifest.json",
              "\\n",
              "`MarketplaceDiscoveryAgent`",
              "Discovers and catalogs plugins/apps from public and private marketplaces",
              "escalates for new marketplace integrations or credentialed API access.",
              "`def discover(self): ...`",
              "marketplace_urls",
              "api_keys",
              "plugin_catalog",
              "discovery_events",
              "\"}"
            ],
            "spawn_policy": [
              "pack=PACK-64d13b50",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "PluginLifecycleManagerAgent",
          "name": "PluginLifecycleManagerAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "rh UTT",
            "agent_id": "PluginLifecycleManagerAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-ad3fa20f",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "PluginLifecycleManagerAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`MarketplaceComplianceAgent`",
              "Ensures plugins comply with legal",
              "regulatory",
              "and organizational standards",
              "escalates for unresolved compliance issues.",
              "`def check_compliance(self",
              "plugin): ...`",
              "plugin_metadata",
              "compliance_standards",
              "compliance_report",
              "approval_status",
              "True",
              "approved",
              "updated_agent_manifest.json",
              "\\n",
              "`MarketplaceDiscoveryAgent`",
              "Discovers and catalogs plugins/apps from public and private marketplaces",
              "escalates for new marketplace integrations or credentialed API access.",
              "`def discover(self): ...`",
              "marketplace_urls",
              "api_keys",
              "plugin_catalog",
              "discovery_events",
              "\"}"
            ],
            "spawn_policy": [
              "pack=PACK-ad3fa20f",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "MarketplaceMonetizationBillingAgent",
          "name": "MarketplaceMonetizationBillingAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "tw UIL",
            "agent_id": "MarketplaceMonetizationBillingAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-1d3904e7",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "MarketplaceMonetizationBillingAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`MarketplaceComplianceAgent`",
              "Ensures plugins comply with legal",
              "regulatory",
              "and organizational standards",
              "escalates for unresolved compliance issues.",
              "`def check_compliance(self",
              "plugin): ...`",
              "plugin_metadata",
              "compliance_standards",
              "compliance_report",
              "approval_status",
              "True",
              "approved",
              "updated_agent_manifest.json",
              "\\n",
              "`MarketplaceDiscoveryAgent`",
              "Discovers and catalogs plugins/apps from public and private marketplaces",
              "escalates for new marketplace integrations or credentialed API access.",
              "`def discover(self): ...`",
              "marketplace_urls",
              "api_keys",
              "plugin_catalog",
              "discovery_events",
              "\"}"
            ],
            "spawn_policy": [
              "pack=PACK-1d3904e7",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "MarketplaceDiscoveryAgent",
          "name": "MarketplaceDiscoveryAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "me UEZ",
            "agent_id": "MarketplaceDiscoveryAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-bb0d81da",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-GATEWAY_SERVICES-C",
            "display_name": "MarketplaceDiscoveryAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "C",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`MarketplaceComplianceAgent`",
              "Ensures plugins comply with legal",
              "regulatory",
              "and organizational standards",
              "escalates for unresolved compliance issues.",
              "`def check_compliance(self",
              "plugin): ...`",
              "plugin_metadata",
              "compliance_standards",
              "compliance_report",
              "approval_status",
              "True",
              "approved",
              "updated_agent_manifest.json",
              "\\n",
              "`MarketplaceDiscoveryAgent`",
              "Discovers and catalogs plugins/apps from public and private marketplaces",
              "escalates for new marketplace integrations or credentialed API access.",
              "`def discover(self): ...`",
              "marketplace_urls",
              "api_keys",
              "plugin_catalog",
              "discovery_events",
              "\"}"
            ],
            "spawn_policy": [
              "pack=PACK-bb0d81da",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.gateway-services.c",
            "type": "Agent"
          }
        },
        {
          "id": "SDKPluginManagerAgent",
          "name": "SDKPluginManagerAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "xn UMB",
            "agent_id": "SDKPluginManagerAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-6be05076",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "SDKPluginManagerAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`MarketplaceComplianceAgent`",
              "Ensures plugins comply with legal",
              "regulatory",
              "and organizational standards",
              "escalates for unresolved compliance issues.",
              "`def check_compliance(self",
              "plugin): ...`",
              "plugin_metadata",
              "compliance_standards",
              "compliance_report",
              "approval_status",
              "True",
              "approved",
              "updated_agent_manifest.json",
              "\\n",
              "`MarketplaceDiscoveryAgent`",
              "Discovers and catalogs plugins/apps from public and private marketplaces",
              "escalates for new marketplace integrations or credentialed API access.",
              "`def discover(self): ...`",
              "marketplace_urls",
              "api_keys",
              "plugin_catalog",
              "discovery_events",
              "\"}"
            ],
            "spawn_policy": [
              "pack=PACK-6be05076",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "MarketplaceComplianceAgent",
          "name": "MarketplaceComplianceAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "te MNI",
            "agent_id": "MarketplaceComplianceAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-b027d0da",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "MarketplaceComplianceAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`MarketplaceComplianceAgent`",
              "Ensures plugins comply with legal",
              "regulatory",
              "and organizational standards",
              "escalates for unresolved compliance issues.",
              "`def check_compliance(self",
              "plugin): ...`",
              "plugin_metadata",
              "compliance_standards",
              "compliance_report",
              "approval_status",
              "True",
              "approved",
              "updated_agent_manifest.json",
              "\\n",
              "`MarketplaceDiscoveryAgent`",
              "Discovers and catalogs plugins/apps from public and private marketplaces",
              "escalates for new marketplace integrations or credentialed API access.",
              "`def discover(self): ...`",
              "marketplace_urls",
              "api_keys",
              "plugin_catalog",
              "discovery_events",
              "\"}"
            ],
            "spawn_policy": [
              "pack=PACK-b027d0da",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "RegistryDiscoveryAgent",
          "name": "RegistryDiscoveryAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "cl GMN",
            "agent_id": "RegistryDiscoveryAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-e5483272",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-GATEWAY_SERVICES-C",
            "display_name": "RegistryDiscoveryAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "C",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`RegistryDiscoveryAgent`",
              "Registers and discovers available agents/services for dynamic self-discovery",
              "hot-swapping",
              "and registry health.",
              "`def register(self",
              "agent_info): ...`",
              "agent_manifest",
              "heartbeat",
              "service_directory",
              "registration_log",
              "False",
              "approved",
              "updated_agent_manifest.json",
              "\"}"
            ],
            "spawn_policy": [
              "pack=PACK-e5483272",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.gateway-services.c",
            "type": "Agent"
          }
        },
        {
          "id": "ResearchAgent",
          "name": "ResearchAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "oq CML",
            "agent_id": "ResearchAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-dee477cc",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "ResearchAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`AlternativesComparisonAgent`",
              "Benchmarks and compares alternative solutions/tools/services. Escalates for human direction only if choices are equally weighted",
              "personal",
              "or strategic.",
              "`def compare(self",
              "option1",
              "option2): ...`",
              "option1",
              "option2",
              "criteria",
              "comparison_report",
              "recommendation",
              "True",
              "approved",
              "updated_agent_manifest.json",
              "\\n",
              "`DataIngestionETLAgent`",
              "Ingests",
              "transforms",
              "and loads data from APIs",
              "files",
              "databases",
              "or streams",
              "escalates only for credential or source access needs.",
              "`def ingest(self",
              "source): ...`",
              "source_config",
              "raw_data",
              "processed_data",
              "ingestion_re\"}"
            ],
            "spawn_policy": [
              "pack=PACK-dee477cc",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "DataIngestionETLAgent",
          "name": "DataIngestionETLAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "yr VHL",
            "agent_id": "DataIngestionETLAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-5d2a92c2",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "DataIngestionETLAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`AlternativesComparisonAgent`",
              "Benchmarks and compares alternative solutions/tools/services. Escalates for human direction only if choices are equally weighted",
              "personal",
              "or strategic.",
              "`def compare(self",
              "option1",
              "option2): ...`",
              "option1",
              "option2",
              "criteria",
              "comparison_report",
              "recommendation",
              "True",
              "approved",
              "updated_agent_manifest.json",
              "\\n",
              "`DataIngestionETLAgent`",
              "Ingests",
              "transforms",
              "and loads data from APIs",
              "files",
              "databases",
              "or streams",
              "escalates only for credential or source access needs.",
              "`def ingest(self",
              "source): ...`",
              "source_config",
              "raw_data",
              "processed_data",
              "ingestion_re\"}"
            ],
            "spawn_policy": [
              "pack=PACK-5d2a92c2",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "AlternativesComparisonAgent",
          "name": "AlternativesComparisonAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "vr CIX",
            "agent_id": "AlternativesComparisonAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-226e1f9d",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "AlternativesComparisonAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`AlternativesComparisonAgent`",
              "Benchmarks and compares alternative solutions/tools/services. Escalates for human direction only if choices are equally weighted",
              "personal",
              "or strategic.",
              "`def compare(self",
              "option1",
              "option2): ...`",
              "option1",
              "option2",
              "criteria",
              "comparison_report",
              "recommendation",
              "True",
              "approved",
              "updated_agent_manifest.json",
              "\\n",
              "`DataIngestionETLAgent`",
              "Ingests",
              "transforms",
              "and loads data from APIs",
              "files",
              "databases",
              "or streams",
              "escalates only for credential or source access needs.",
              "`def ingest(self",
              "source): ...`",
              "source_config",
              "raw_data",
              "processed_data",
              "ingestion_re\"}"
            ],
            "spawn_policy": [
              "pack=PACK-226e1f9d",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "KnowledgeBaseAgent",
          "name": "KnowledgeBaseAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "bt YXP",
            "agent_id": "KnowledgeBaseAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-681ecb2c",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "KnowledgeBaseAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`AlternativesComparisonAgent`",
              "Benchmarks and compares alternative solutions/tools/services. Escalates for human direction only if choices are equally weighted",
              "personal",
              "or strategic.",
              "`def compare(self",
              "option1",
              "option2): ...`",
              "option1",
              "option2",
              "criteria",
              "comparison_report",
              "recommendation",
              "True",
              "approved",
              "updated_agent_manifest.json",
              "\\n",
              "`DataIngestionETLAgent`",
              "Ingests",
              "transforms",
              "and loads data from APIs",
              "files",
              "databases",
              "or streams",
              "escalates only for credential or source access needs.",
              "`def ingest(self",
              "source): ...`",
              "source_config",
              "raw_data",
              "processed_data",
              "ingestion_re\"}"
            ],
            "spawn_policy": [
              "pack=PACK-681ecb2c",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "SimulationRiskAnalysisAgent",
          "name": "SimulationRiskAnalysisAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "cv HRZ",
            "agent_id": "SimulationRiskAnalysisAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-805a755f",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "SimulationRiskAnalysisAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`AlternativesComparisonAgent`",
              "Benchmarks and compares alternative solutions/tools/services. Escalates for human direction only if choices are equally weighted",
              "personal",
              "or strategic.",
              "`def compare(self",
              "option1",
              "option2): ...`",
              "option1",
              "option2",
              "criteria",
              "comparison_report",
              "recommendation",
              "True",
              "approved",
              "updated_agent_manifest.json",
              "\\n",
              "`DataIngestionETLAgent`",
              "Ingests",
              "transforms",
              "and loads data from APIs",
              "files",
              "databases",
              "or streams",
              "escalates only for credential or source access needs.",
              "`def ingest(self",
              "source): ...`",
              "source_config",
              "raw_data",
              "processed_data",
              "ingestion_re\"}"
            ],
            "spawn_policy": [
              "pack=PACK-805a755f",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "KnowledgeGraphAgent",
          "name": "KnowledgeGraphAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ma VIK",
            "agent_id": "KnowledgeGraphAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-2ad7a11e",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-C",
            "display_name": "KnowledgeGraphAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "C",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`AlternativesComparisonAgent`",
              "Benchmarks and compares alternative solutions/tools/services. Escalates for human direction only if choices are equally weighted",
              "personal",
              "or strategic.",
              "`def compare(self",
              "option1",
              "option2): ...`",
              "option1",
              "option2",
              "criteria",
              "comparison_report",
              "recommendation",
              "True",
              "approved",
              "updated_agent_manifest.json",
              "\\n",
              "`DataIngestionETLAgent`",
              "Ingests",
              "transforms",
              "and loads data from APIs",
              "files",
              "databases",
              "or streams",
              "escalates only for credential or source access needs.",
              "`def ingest(self",
              "source): ...`",
              "source_config",
              "raw_data",
              "processed_data",
              "ingestion_re\"}"
            ],
            "spawn_policy": [
              "pack=PACK-2ad7a11e",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.c",
            "type": "Agent"
          }
        },
        {
          "id": "SecretsCryptoAgent",
          "name": "SecretsCryptoAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "nq PAP",
            "agent_id": "SecretsCryptoAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-640c1ee3",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "SecretsCryptoAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`SecretsCryptoAgent`",
              "Encrypts",
              "decrypts",
              "and rotates secrets via KMS/Vault APIs",
              "escalates for new secret types or if unable to obtain/rotate secrets autonomously.",
              "`def manage_secret(self",
              "secret): ...`",
              "secret",
              "rotation_policy",
              "encrypted_secret",
              "audit_log",
              "True",
              "approved",
              "updated_agent_manifest.json",
              "\"}"
            ],
            "spawn_policy": [
              "pack=PACK-640c1ee3",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "CommandChiefAgent",
          "name": "CommandChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "jj CON-16",
            "agent_id": "CommandChiefAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-299e0062",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "CommandChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`CommandChiefAgent`",
              "Master orchestrator for deploying",
              "customizing",
              "and overseeing the entire microagent stack for any resource.",
              "`def deploy_stack(self",
              "resource): ...`",
              "resource",
              "user_intent",
              "deployment_plan",
              "status",
              "False",
              "approved",
              "updated_agent_manifest.json",
              "\\n",
              "`CommanderChiefAgent_DataStack`",
              "Local director/VP for DataStack",
              "manages agents and operations within the data stack.",
              "`def manage_stack(self",
              "tasks): ...`",
              "ExecutiveCommanderChiefAgent",
              "PCOperatorAgent_DataStack",
              "ModelSelectorAgent_DataStack",
              "ModelSelectorAgent_DataStack",
              "qwen2.5",
              "False",
              "approved",
              "dir\"}"
            ],
            "spawn_policy": [
              "pack=PACK-299e0062",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Micro-Agent",
          "name": "Micro-Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ji ADF-13",
            "agent_id": "Micro-Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-fc7be497",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "Micro-Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`CommandChiefAgent`",
              "Master orchestrator for deploying",
              "customizing",
              "and overseeing the entire microagent stack for any resource.",
              "`def deploy_stack(self",
              "resource): ...`",
              "resource",
              "user_intent",
              "deployment_plan",
              "status",
              "False",
              "approved",
              "updated_agent_manifest.json",
              "\\n",
              "`CommanderChiefAgent_DataStack`",
              "Local director/VP for DataStack",
              "manages agents and operations within the data stack.",
              "`def manage_stack(self",
              "tasks): ...`",
              "ExecutiveCommanderChiefAgent",
              "PCOperatorAgent_DataStack",
              "ModelSelectorAgent_DataStack",
              "ModelSelectorAgent_DataStack",
              "qwen2.5",
              "False",
              "approved",
              "dir\"}"
            ],
            "spawn_policy": [
              "pack=PACK-fc7be497",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "ExecutiveCommanderChiefAgent",
          "name": "ExecutiveCommanderChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "vw MFS-17",
            "agent_id": "ExecutiveCommanderChiefAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-df6b24c4",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "ExecutiveCommanderChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Executive",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`CommandChiefAgent`",
              "Master orchestrator for deploying",
              "customizing",
              "and overseeing the entire microagent stack for any resource.",
              "`def deploy_stack(self",
              "resource): ...`",
              "resource",
              "user_intent",
              "deployment_plan",
              "status",
              "False",
              "approved",
              "updated_agent_manifest.json",
              "\\n",
              "`CommanderChiefAgent_DataStack`",
              "Local director/VP for DataStack",
              "manages agents and operations within the data stack.",
              "`def manage_stack(self",
              "tasks): ...`",
              "ExecutiveCommanderChiefAgent",
              "PCOperatorAgent_DataStack",
              "ModelSelectorAgent_DataStack",
              "ModelSelectorAgent_DataStack",
              "qwen2.5",
              "False",
              "approved",
              "dir\"}"
            ],
            "spawn_policy": [
              "pack=PACK-df6b24c4",
              "min_plane=Deployed",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "UXAccessibilityAgent",
          "name": "UXAccessibilityAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "hf RSA",
            "agent_id": "UXAccessibilityAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-29d4f7b0",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-E",
            "display_name": "UXAccessibilityAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "E",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`FeedbackContinuousImprovementAgent`",
              "Collects feedback and drives continuous improvement (RLHF)",
              "escalates for feedback requiring subjective or strategic user review.",
              "`def feedback(self",
              "result): ...`",
              "result",
              "user_feedback",
              "improvement_suggestion",
              "feedback_log",
              "True",
              "approved",
              "updated_agent_manifest.json",
              "\\n",
              "`MultiModalInterfaceAgent`",
              "Handles multi-modal input/output\u2014voice",
              "vision",
              "XR",
              "text\u2014routes user intent to the right agent",
              "escalates for new input types or permissions.",
              "`def route_input(self",
              "input_data): ...`",
              "user_input",
              "sensor_data",
              "normalized_command",
              "user_feedback\"}"
            ],
            "spawn_policy": [
              "pack=PACK-29d4f7b0",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.e",
            "type": "Agent"
          }
        },
        {
          "id": "MultiModalInterfaceAgent",
          "name": "MultiModalInterfaceAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "rt FUB",
            "agent_id": "MultiModalInterfaceAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-5cd724b0",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "MultiModalInterfaceAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`FeedbackContinuousImprovementAgent`",
              "Collects feedback and drives continuous improvement (RLHF)",
              "escalates for feedback requiring subjective or strategic user review.",
              "`def feedback(self",
              "result): ...`",
              "result",
              "user_feedback",
              "improvement_suggestion",
              "feedback_log",
              "True",
              "approved",
              "updated_agent_manifest.json",
              "\\n",
              "`MultiModalInterfaceAgent`",
              "Handles multi-modal input/output\u2014voice",
              "vision",
              "XR",
              "text\u2014routes user intent to the right agent",
              "escalates for new input types or permissions.",
              "`def route_input(self",
              "input_data): ...`",
              "user_input",
              "sensor_data",
              "normalized_command",
              "user_feedback\"}"
            ],
            "spawn_policy": [
              "pack=PACK-5cd724b0",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "FeedbackContinuousImprovementAgent",
          "name": "FeedbackContinuousImprovementAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "hj PBT",
            "agent_id": "FeedbackContinuousImprovementAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-2a21d2d2",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "FeedbackContinuousImprovementAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`FeedbackContinuousImprovementAgent`",
              "Collects feedback and drives continuous improvement (RLHF)",
              "escalates for feedback requiring subjective or strategic user review.",
              "`def feedback(self",
              "result): ...`",
              "result",
              "user_feedback",
              "improvement_suggestion",
              "feedback_log",
              "True",
              "approved",
              "updated_agent_manifest.json",
              "\\n",
              "`MultiModalInterfaceAgent`",
              "Handles multi-modal input/output\u2014voice",
              "vision",
              "XR",
              "text\u2014routes user intent to the right agent",
              "escalates for new input types or permissions.",
              "`def route_input(self",
              "input_data): ...`",
              "user_input",
              "sensor_data",
              "normalized_command",
              "user_feedback\"}"
            ],
            "spawn_policy": [
              "pack=PACK-2a21d2d2",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "AgentSelfUpgradeRetirementAgent",
          "name": "AgentSelfUpgradeRetirementAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "jz PNM",
            "agent_id": "AgentSelfUpgradeRetirementAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-6837eee4",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "AgentSelfUpgradeRetirementAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`AgentSelfUpgradeRetirementAgent`",
              "Enables self-upgrading and safe agent retirement/merging",
              "escalates for human approval before permanent agent removal.",
              "`def self_manage(self): ...`",
              "upgrade_status",
              "retirement_policy",
              "agent_lifecycle_event",
              "True",
              "approved",
              "updated_agent_manifest.json",
              "\\n",
              "`MultiTenantIsolationAgent`",
              "Manages tenant isolation",
              "quotas",
              "and cross-tenant security",
              "escalates for human aid only if legal or business policy changes required.",
              "`def isolate(self",
              "tenant_id): ...`",
              "tenant_config",
              "resource_usage",
              "isolation_report",
              "quota_alert",
              "True",
              "approved\"}"
            ],
            "spawn_policy": [
              "pack=PACK-6837eee4",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "MultiTenantIsolationAgent",
          "name": "MultiTenantIsolationAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ii ZZH",
            "agent_id": "MultiTenantIsolationAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-4bbdc416",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "MultiTenantIsolationAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`AgentSelfUpgradeRetirementAgent`",
              "Enables self-upgrading and safe agent retirement/merging",
              "escalates for human approval before permanent agent removal.",
              "`def self_manage(self): ...`",
              "upgrade_status",
              "retirement_policy",
              "agent_lifecycle_event",
              "True",
              "approved",
              "updated_agent_manifest.json",
              "\\n",
              "`MultiTenantIsolationAgent`",
              "Manages tenant isolation",
              "quotas",
              "and cross-tenant security",
              "escalates for human aid only if legal or business policy changes required.",
              "`def isolate(self",
              "tenant_id): ...`",
              "tenant_config",
              "resource_usage",
              "isolation_report",
              "quota_alert",
              "True",
              "approved\"}"
            ],
            "spawn_policy": [
              "pack=PACK-4bbdc416",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "UpgradePatchAgent",
          "name": "UpgradePatchAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "hb JHA",
            "agent_id": "UpgradePatchAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-3d4a1c03",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "UpgradePatchAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"",
              "Agent ID",
              "Purpose",
              "Function",
              "Inputs",
              "Outputs",
              "Reports To",
              "Oversees",
              "Model Selector",
              "Paired LLM",
              "Requires Human",
              "Approval",
              "Sources",
              "\\n",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "---",
              "\\n",
              "`AgentSelfUpgradeRetirementAgent`",
              "Enables self-upgrading and safe agent retirement/merging",
              "escalates for human approval before permanent agent removal.",
              "`def self_manage(self): ...`",
              "upgrade_status",
              "retirement_policy",
              "agent_lifecycle_event",
              "True",
              "approved",
              "updated_agent_manifest.json",
              "\\n",
              "`MultiTenantIsolationAgent`",
              "Manages tenant isolation",
              "quotas",
              "and cross-tenant security",
              "escalates for human aid only if legal or business policy changes required.",
              "`def isolate(self",
              "tenant_id): ...`",
              "tenant_config",
              "resource_usage",
              "isolation_report",
              "quota_alert",
              "True",
              "approved\"}"
            ],
            "spawn_policy": [
              "pack=PACK-3d4a1c03",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "AgentSelfUpgradeRetirementAgent",
          "name": "AgentSelfUpgradeRetirementAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "jz PNM",
            "agent_id": "AgentSelfUpgradeRetirementAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-6837eee4",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "AgentSelfUpgradeRetirementAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### AgentSelfUpgradeRetirementAgent\"}",
            "spawn_policy": [
              "pack=PACK-6837eee4",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "OrchestratorAgent",
          "name": "OrchestratorAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ux TEJ",
            "agent_id": "OrchestratorAgent",
            "budget_cap": "per_subject",
            "capability_pack_id": "PACK-1ee123f4",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "OrchestratorAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Orchestrator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Escalation Path:** OrchestratorAgent\"}",
            "spawn_policy": [
              "pack=PACK-1ee123f4",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "AgentSupervisorHeartbeatAgent",
          "name": "AgentSupervisorHeartbeatAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ws HNK",
            "agent_id": "AgentSupervisorHeartbeatAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-ffea4d80",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "AgentSupervisorHeartbeatAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### AgentSupervisorHeartbeatAgent\"}",
            "spawn_policy": [
              "pack=PACK-ffea4d80",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "CommandChiefAgent",
          "name": "CommandChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "jj CON-17",
            "agent_id": "CommandChiefAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-299e0062",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "CommandChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Escalation Path:** CommandChiefAgent\"}",
            "spawn_policy": [
              "pack=PACK-299e0062",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "AlternativesComparisonAgent",
          "name": "AlternativesComparisonAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "vr CIX",
            "agent_id": "AlternativesComparisonAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-226e1f9d",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "AlternativesComparisonAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### AlternativesComparisonAgent\"}",
            "spawn_policy": [
              "pack=PACK-226e1f9d",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "ExecutionPlanningAgent",
          "name": "ExecutionPlanningAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "je USF",
            "agent_id": "ExecutionPlanningAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-d0ed8997",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "ExecutionPlanningAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Escalation Path:** ExecutionPlanningAgent\"}",
            "spawn_policy": [
              "pack=PACK-d0ed8997",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "AuditBoardAgent",
          "name": "AuditBoardAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "bq HHM",
            "agent_id": "AuditBoardAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-6defa8cc",
            "category": "Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "AuditBoardAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### AuditBoardAgent\"}",
            "spawn_policy": [
              "pack=PACK-6defa8cc",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "ExecutiveCommanderChiefAgent",
          "name": "ExecutiveCommanderChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "vw MFS-18",
            "agent_id": "ExecutiveCommanderChiefAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-df6b24c4",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "ExecutiveCommanderChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Executive",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Reports To:** ExecutiveCommanderChiefAgent\"}",
            "spawn_policy": [
              "pack=PACK-df6b24c4",
              "min_plane=Deployed",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "AuditComplianceAgent",
          "name": "AuditComplianceAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ip TVM",
            "agent_id": "AuditComplianceAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-e4265101",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "AuditComplianceAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### AuditComplianceAgent\"}",
            "spawn_policy": [
              "pack=PACK-e4265101",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "BackupRestoreAgent",
          "name": "BackupRestoreAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "gm AZJ",
            "agent_id": "BackupRestoreAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-8e166b00",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "BackupRestoreAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### BackupRestoreAgent\"}",
            "spawn_policy": [
              "pack=PACK-8e166b00",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "OrchestratorAgent",
          "name": "OrchestratorAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ux TEJ",
            "agent_id": "OrchestratorAgent",
            "budget_cap": "per_subject",
            "capability_pack_id": "PACK-1ee123f4",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "OrchestratorAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Orchestrator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Escalation Path:** OrchestratorAgent\"}",
            "spawn_policy": [
              "pack=PACK-1ee123f4",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "CacheManagerAgent",
          "name": "CacheManagerAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "nj WXF",
            "agent_id": "CacheManagerAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-53084827",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "CacheManagerAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### CacheManagerAgent\"}",
            "spawn_policy": [
              "pack=PACK-53084827",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "ExecutionPlanningAgent",
          "name": "ExecutionPlanningAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "je USF",
            "agent_id": "ExecutionPlanningAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-d0ed8997",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "ExecutionPlanningAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Escalation Path:** ExecutionPlanningAgent\"}",
            "spawn_policy": [
              "pack=PACK-d0ed8997",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "CodeGenAgent",
          "name": "CodeGenAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "bv IYD",
            "agent_id": "CodeGenAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-2fc3b49b",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-F",
            "display_name": "CodeGenAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "F",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### CodeGenAgent\"}",
            "spawn_policy": [
              "pack=PACK-2fc3b49b",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.f",
            "type": "Agent"
          }
        },
        {
          "id": "OrchestratorAgent",
          "name": "OrchestratorAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ux TEJ",
            "agent_id": "OrchestratorAgent",
            "budget_cap": "per_subject",
            "capability_pack_id": "PACK-1ee123f4",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "OrchestratorAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Orchestrator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Escalation Path:** OrchestratorAgent\"}",
            "spawn_policy": [
              "pack=PACK-1ee123f4",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "CodeQualityAgent",
          "name": "CodeQualityAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "jp LCZ",
            "agent_id": "CodeQualityAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-3f0566ee",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "CodeQualityAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### CodeQualityAgent\"}",
            "spawn_policy": [
              "pack=PACK-3f0566ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "TestCaseGeneratorAgent",
          "name": "TestCaseGeneratorAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ru KQO",
            "agent_id": "TestCaseGeneratorAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-eb982bdd",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "TestCaseGeneratorAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"- **Triggers:** TestCaseGeneratorAgent complete",
              "CI failure\"}"
            ],
            "spawn_policy": [
              "pack=PACK-eb982bdd",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "CodeGenAgent",
          "name": "CodeGenAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "bv IYD",
            "agent_id": "CodeGenAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-2fc3b49b",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-F",
            "display_name": "CodeGenAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "F",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Escalation Path:** CodeGenAgent\"}",
            "spawn_policy": [
              "pack=PACK-2fc3b49b",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.f",
            "type": "Agent"
          }
        },
        {
          "id": "CommandChiefAgent",
          "name": "CommandChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "jj CON-18",
            "agent_id": "CommandChiefAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-299e0062",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "CommandChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### CommandChiefAgent\"}",
            "spawn_policy": [
              "pack=PACK-299e0062",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "Micro-Agent",
          "name": "Micro-Agent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ji ADF-14",
            "agent_id": "Micro-Agent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-fc7be497",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "Micro-Agent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"- **Purpose:** Master orchestrator for deploying",
              "customizing",
              "and overseeing the entire microagent stack for any resource.\"}"
            ],
            "spawn_policy": [
              "pack=PACK-fc7be497",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "OrchestratorAgent",
          "name": "OrchestratorAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ux TEJ",
            "agent_id": "OrchestratorAgent",
            "budget_cap": "per_subject",
            "capability_pack_id": "PACK-1ee123f4",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "OrchestratorAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Orchestrator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Escalation Path:** OrchestratorAgent\"}",
            "spawn_policy": [
              "pack=PACK-1ee123f4",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "ExecutiveCommanderChiefAgent",
          "name": "ExecutiveCommanderChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "vw MFS-19",
            "agent_id": "ExecutiveCommanderChiefAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-df6b24c4",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "ExecutiveCommanderChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Executive",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Reports To:** ExecutiveCommanderChiefAgent\"}",
            "spawn_policy": [
              "pack=PACK-df6b24c4",
              "min_plane=Deployed",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "ExecutiveCommanderChiefAgent",
          "name": "ExecutiveCommanderChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "vw MFS-20",
            "agent_id": "ExecutiveCommanderChiefAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-df6b24c4",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "ExecutiveCommanderChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Executive",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Escalation Path:** ExecutiveCommanderChiefAgent\"}",
            "spawn_policy": [
              "pack=PACK-df6b24c4",
              "min_plane=Deployed",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "ExecutiveCommanderChiefAgent",
          "name": "ExecutiveCommanderChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "vw MFS-21",
            "agent_id": "ExecutiveCommanderChiefAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-df6b24c4",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "ExecutiveCommanderChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Executive",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Reports To:** ExecutiveCommanderChiefAgent\"}",
            "spawn_policy": [
              "pack=PACK-df6b24c4",
              "min_plane=Deployed",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "ExecutiveCommanderChiefAgent",
          "name": "ExecutiveCommanderChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "vw MFS-22",
            "agent_id": "ExecutiveCommanderChiefAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-df6b24c4",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "ExecutiveCommanderChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Executive",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Escalation Path:** ExecutiveCommanderChiefAgent\"}",
            "spawn_policy": [
              "pack=PACK-df6b24c4",
              "min_plane=Deployed",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "ComplianceEnforcementAgent",
          "name": "ComplianceEnforcementAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ra HVZ",
            "agent_id": "ComplianceEnforcementAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-c303ad0f",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "ComplianceEnforcementAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### ComplianceEnforcementAgent\"}",
            "spawn_policy": [
              "pack=PACK-c303ad0f",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "AuditComplianceAgent",
          "name": "AuditComplianceAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ip TVM",
            "agent_id": "AuditComplianceAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-e4265101",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "AuditComplianceAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Escalation Path:** AuditComplianceAgent\"}",
            "spawn_policy": [
              "pack=PACK-e4265101",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "ConfigManagerAgent",
          "name": "ConfigManagerAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "zt HBD",
            "agent_id": "ConfigManagerAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-141c2aba",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "ConfigManagerAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### ConfigManagerAgent\"}",
            "spawn_policy": [
              "pack=PACK-141c2aba",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "ExecutionPlanningAgent",
          "name": "ExecutionPlanningAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "je USF",
            "agent_id": "ExecutionPlanningAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-d0ed8997",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "ExecutionPlanningAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Escalation Path:** ExecutionPlanningAgent\"}",
            "spawn_policy": [
              "pack=PACK-d0ed8997",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "CostEstimationAgent",
          "name": "CostEstimationAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "tu EKG",
            "agent_id": "CostEstimationAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-40568938",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "CostEstimationAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### CostEstimationAgent\"}",
            "spawn_policy": [
              "pack=PACK-40568938",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "ExecutionPlanningAgent",
          "name": "ExecutionPlanningAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "je USF",
            "agent_id": "ExecutionPlanningAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-d0ed8997",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "ExecutionPlanningAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Escalation Path:** ExecutionPlanningAgent\"}",
            "spawn_policy": [
              "pack=PACK-d0ed8997",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "DataIngestionETLAgent",
          "name": "DataIngestionETLAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "yr VHL",
            "agent_id": "DataIngestionETLAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-5d2a92c2",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "DataIngestionETLAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### DataIngestionETLAgent\"}",
            "spawn_policy": [
              "pack=PACK-5d2a92c2",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "KnowledgeGraphAgent",
          "name": "KnowledgeGraphAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ma VIK",
            "agent_id": "KnowledgeGraphAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-2ad7a11e",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-C",
            "display_name": "KnowledgeGraphAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "C",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Escalation Path:** KnowledgeGraphAgent\"}",
            "spawn_policy": [
              "pack=PACK-2ad7a11e",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.c",
            "type": "Agent"
          }
        },
        {
          "id": "DemoAgent",
          "name": "DemoAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "cf MFG",
            "agent_id": "DemoAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-5489a15e",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "DemoAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### DemoAgent\"}",
            "spawn_policy": [
              "pack=PACK-5489a15e",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "DependencyResolverAgent",
          "name": "DependencyResolverAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "jd EUI",
            "agent_id": "DependencyResolverAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-def46285",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "DependencyResolverAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### DependencyResolverAgent\"}",
            "spawn_policy": [
              "pack=PACK-def46285",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "CodeGenAgent",
          "name": "CodeGenAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "bv IYD",
            "agent_id": "CodeGenAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-2fc3b49b",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-F",
            "display_name": "CodeGenAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "F",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Escalation Path:** CodeGenAgent\"}",
            "spawn_policy": [
              "pack=PACK-2fc3b49b",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.f",
            "type": "Agent"
          }
        },
        {
          "id": "DocumentationGeneratorAgent",
          "name": "DocumentationGeneratorAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "fq JFI",
            "agent_id": "DocumentationGeneratorAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-f8e72a59",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "DocumentationGeneratorAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### DocumentationGeneratorAgent\"}",
            "spawn_policy": [
              "pack=PACK-f8e72a59",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "CodeQualityAgent",
          "name": "CodeQualityAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "jp LCZ",
            "agent_id": "CodeQualityAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-3f0566ee",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "CodeQualityAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"- **Triggers:** CodeQualityAgent complete",
              "Documentation update required\"}"
            ],
            "spawn_policy": [
              "pack=PACK-3f0566ee",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "DocumentationListenerAgent",
          "name": "DocumentationListenerAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "kq ZQT",
            "agent_id": "DocumentationListenerAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-8035ea1e",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "DocumentationListenerAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Escalation Path:** DocumentationListenerAgent\"}",
            "spawn_policy": [
              "pack=PACK-8035ea1e",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "DocumentationListenerAgent",
          "name": "DocumentationListenerAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "kq ZQT",
            "agent_id": "DocumentationListenerAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-8035ea1e",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "DocumentationListenerAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### DocumentationListenerAgent\"}",
            "spawn_policy": [
              "pack=PACK-8035ea1e",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "DocumentationGeneratorAgent",
          "name": "DocumentationGeneratorAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "fq JFI",
            "agent_id": "DocumentationGeneratorAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-f8e72a59",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "DocumentationGeneratorAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Escalation Path:** DocumentationGeneratorAgent\"}",
            "spawn_policy": [
              "pack=PACK-f8e72a59",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "ErrorHandlingRetryHelperAgent",
          "name": "ErrorHandlingRetryHelperAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "mb KWX",
            "agent_id": "ErrorHandlingRetryHelperAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-acbc6506",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "ErrorHandlingRetryHelperAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### ErrorHandlingRetryHelperAgent\"}",
            "spawn_policy": [
              "pack=PACK-acbc6506",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "OrchestratorAgent",
          "name": "OrchestratorAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ux TEJ",
            "agent_id": "OrchestratorAgent",
            "budget_cap": "per_subject",
            "capability_pack_id": "PACK-1ee123f4",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "OrchestratorAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Orchestrator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Escalation Path:** OrchestratorAgent\"}",
            "spawn_policy": [
              "pack=PACK-1ee123f4",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "EthicsAIAlignmentAgent",
          "name": "EthicsAIAlignmentAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "cu SAU",
            "agent_id": "EthicsAIAlignmentAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-8de976e4",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "EthicsAIAlignmentAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### EthicsAIAlignmentAgent\"}",
            "spawn_policy": [
              "pack=PACK-8de976e4",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "EthicsBoardAgent",
          "name": "EthicsBoardAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "rv NON",
            "agent_id": "EthicsBoardAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-2ee649c0",
            "category": "Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "EthicsBoardAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### EthicsBoardAgent\"}",
            "spawn_policy": [
              "pack=PACK-2ee649c0",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "ExecutiveCommanderChiefAgent",
          "name": "ExecutiveCommanderChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "vw MFS-23",
            "agent_id": "ExecutiveCommanderChiefAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-df6b24c4",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "ExecutiveCommanderChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Executive",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Reports To:** ExecutiveCommanderChiefAgent\"}",
            "spawn_policy": [
              "pack=PACK-df6b24c4",
              "min_plane=Deployed",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "ExecutionPlanningAgent",
          "name": "ExecutionPlanningAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "je USF",
            "agent_id": "ExecutionPlanningAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-d0ed8997",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "ExecutionPlanningAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### ExecutionPlanningAgent\"}",
            "spawn_policy": [
              "pack=PACK-d0ed8997",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "OrchestratorAgent",
          "name": "OrchestratorAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ux TEJ",
            "agent_id": "OrchestratorAgent",
            "budget_cap": "per_subject",
            "capability_pack_id": "PACK-1ee123f4",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "OrchestratorAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Orchestrator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Escalation Path:** OrchestratorAgent\"}",
            "spawn_policy": [
              "pack=PACK-1ee123f4",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "ExecutiveCommanderChiefAgent",
          "name": "ExecutiveCommanderChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "vw MFS-24",
            "agent_id": "ExecutiveCommanderChiefAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-df6b24c4",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "ExecutiveCommanderChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Executive",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### ExecutiveCommanderChiefAgent\"}",
            "spawn_policy": [
              "pack=PACK-df6b24c4",
              "min_plane=Deployed",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "EthicsBoardAgent",
          "name": "EthicsBoardAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "rv NON",
            "agent_id": "EthicsBoardAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-2ee649c0",
            "category": "Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "EthicsBoardAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"- **Board Agents:** LegalComplianceBoardAgent",
              "FinanceBoardAgent",
              "OperationsBoardAgent",
              "SecurityBoardAgent",
              "HRBoardAgent",
              "MarketingBoardAgent",
              "TechnologyBoardAgent",
              "AuditBoardAgent",
              "EthicsBoardAgent",
              "StrategyBoardAgent",
              "VisionBoardAgent\"}"
            ],
            "spawn_policy": [
              "pack=PACK-2ee649c0",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "VisionBoardAgent",
          "name": "VisionBoardAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "mt SVN",
            "agent_id": "VisionBoardAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-a2247e76",
            "category": "Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "VisionBoardAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"- **Board Agents:** LegalComplianceBoardAgent",
              "FinanceBoardAgent",
              "OperationsBoardAgent",
              "SecurityBoardAgent",
              "HRBoardAgent",
              "MarketingBoardAgent",
              "TechnologyBoardAgent",
              "AuditBoardAgent",
              "EthicsBoardAgent",
              "StrategyBoardAgent",
              "VisionBoardAgent\"}"
            ],
            "spawn_policy": [
              "pack=PACK-a2247e76",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "StrategyBoardAgent",
          "name": "StrategyBoardAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wa BUB",
            "agent_id": "StrategyBoardAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-e3a14dee",
            "category": "Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "StrategyBoardAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"- **Board Agents:** LegalComplianceBoardAgent",
              "FinanceBoardAgent",
              "OperationsBoardAgent",
              "SecurityBoardAgent",
              "HRBoardAgent",
              "MarketingBoardAgent",
              "TechnologyBoardAgent",
              "AuditBoardAgent",
              "EthicsBoardAgent",
              "StrategyBoardAgent",
              "VisionBoardAgent\"}"
            ],
            "spawn_policy": [
              "pack=PACK-e3a14dee",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "FinanceBoardAgent",
          "name": "FinanceBoardAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "vh IQS",
            "agent_id": "FinanceBoardAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-a648db4f",
            "category": "Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "FinanceBoardAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"- **Board Agents:** LegalComplianceBoardAgent",
              "FinanceBoardAgent",
              "OperationsBoardAgent",
              "SecurityBoardAgent",
              "HRBoardAgent",
              "MarketingBoardAgent",
              "TechnologyBoardAgent",
              "AuditBoardAgent",
              "EthicsBoardAgent",
              "StrategyBoardAgent",
              "VisionBoardAgent\"}"
            ],
            "spawn_policy": [
              "pack=PACK-a648db4f",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "LegalComplianceBoardAgent",
          "name": "LegalComplianceBoardAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "qe RII",
            "agent_id": "LegalComplianceBoardAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-4652de8c",
            "category": "Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "LegalComplianceBoardAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"- **Board Agents:** LegalComplianceBoardAgent",
              "FinanceBoardAgent",
              "OperationsBoardAgent",
              "SecurityBoardAgent",
              "HRBoardAgent",
              "MarketingBoardAgent",
              "TechnologyBoardAgent",
              "AuditBoardAgent",
              "EthicsBoardAgent",
              "StrategyBoardAgent",
              "VisionBoardAgent\"}"
            ],
            "spawn_policy": [
              "pack=PACK-4652de8c",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "SecurityBoardAgent",
          "name": "SecurityBoardAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ly HLR",
            "agent_id": "SecurityBoardAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-9c867093",
            "category": "Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "SecurityBoardAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=2GB",
              "disk>=2GB",
              "net>=10Mbps"
            ],
            "epic": "D",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"- **Board Agents:** LegalComplianceBoardAgent",
              "FinanceBoardAgent",
              "OperationsBoardAgent",
              "SecurityBoardAgent",
              "HRBoardAgent",
              "MarketingBoardAgent",
              "TechnologyBoardAgent",
              "AuditBoardAgent",
              "EthicsBoardAgent",
              "StrategyBoardAgent",
              "VisionBoardAgent\"}"
            ],
            "spawn_policy": [
              "pack=PACK-9c867093",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "AuditBoardAgent",
          "name": "AuditBoardAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "bq HHM",
            "agent_id": "AuditBoardAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-6defa8cc",
            "category": "Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "AuditBoardAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"- **Board Agents:** LegalComplianceBoardAgent",
              "FinanceBoardAgent",
              "OperationsBoardAgent",
              "SecurityBoardAgent",
              "HRBoardAgent",
              "MarketingBoardAgent",
              "TechnologyBoardAgent",
              "AuditBoardAgent",
              "EthicsBoardAgent",
              "StrategyBoardAgent",
              "VisionBoardAgent\"}"
            ],
            "spawn_policy": [
              "pack=PACK-6defa8cc",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "OperationsBoardAgent",
          "name": "OperationsBoardAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ny ZEB",
            "agent_id": "OperationsBoardAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-e2923dc6",
            "category": "Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "OperationsBoardAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"- **Board Agents:** LegalComplianceBoardAgent",
              "FinanceBoardAgent",
              "OperationsBoardAgent",
              "SecurityBoardAgent",
              "HRBoardAgent",
              "MarketingBoardAgent",
              "TechnologyBoardAgent",
              "AuditBoardAgent",
              "EthicsBoardAgent",
              "StrategyBoardAgent",
              "VisionBoardAgent\"}"
            ],
            "spawn_policy": [
              "pack=PACK-e2923dc6",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "HRBoardAgent",
          "name": "HRBoardAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "fi ERC",
            "agent_id": "HRBoardAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-e541d2fc",
            "category": "Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "HRBoardAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"- **Board Agents:** LegalComplianceBoardAgent",
              "FinanceBoardAgent",
              "OperationsBoardAgent",
              "SecurityBoardAgent",
              "HRBoardAgent",
              "MarketingBoardAgent",
              "TechnologyBoardAgent",
              "AuditBoardAgent",
              "EthicsBoardAgent",
              "StrategyBoardAgent",
              "VisionBoardAgent\"}"
            ],
            "spawn_policy": [
              "pack=PACK-e541d2fc",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "MarketingBoardAgent",
          "name": "MarketingBoardAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ij EHW",
            "agent_id": "MarketingBoardAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-e8b7483d",
            "category": "Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "MarketingBoardAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"- **Board Agents:** LegalComplianceBoardAgent",
              "FinanceBoardAgent",
              "OperationsBoardAgent",
              "SecurityBoardAgent",
              "HRBoardAgent",
              "MarketingBoardAgent",
              "TechnologyBoardAgent",
              "AuditBoardAgent",
              "EthicsBoardAgent",
              "StrategyBoardAgent",
              "VisionBoardAgent\"}"
            ],
            "spawn_policy": [
              "pack=PACK-e8b7483d",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "TechnologyBoardAgent",
          "name": "TechnologyBoardAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "xu GJW",
            "agent_id": "TechnologyBoardAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-50a613ad",
            "category": "Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "TechnologyBoardAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"- **Board Agents:** LegalComplianceBoardAgent",
              "FinanceBoardAgent",
              "OperationsBoardAgent",
              "SecurityBoardAgent",
              "HRBoardAgent",
              "MarketingBoardAgent",
              "TechnologyBoardAgent",
              "AuditBoardAgent",
              "EthicsBoardAgent",
              "StrategyBoardAgent",
              "VisionBoardAgent\"}"
            ],
            "spawn_policy": [
              "pack=PACK-50a613ad",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "FeedbackContinuousImprovementAgent",
          "name": "FeedbackContinuousImprovementAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "hj PBT",
            "agent_id": "FeedbackContinuousImprovementAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-2a21d2d2",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "FeedbackContinuousImprovementAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### FeedbackContinuousImprovementAgent\"}",
            "spawn_policy": [
              "pack=PACK-2a21d2d2",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "OrchestratorAgent",
          "name": "OrchestratorAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ux TEJ",
            "agent_id": "OrchestratorAgent",
            "budget_cap": "per_subject",
            "capability_pack_id": "PACK-1ee123f4",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "OrchestratorAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Orchestrator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Escalation Path:** OrchestratorAgent\"}",
            "spawn_policy": [
              "pack=PACK-1ee123f4",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "FinanceBoardAgent",
          "name": "FinanceBoardAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "vh IQS",
            "agent_id": "FinanceBoardAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-a648db4f",
            "category": "Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "FinanceBoardAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### FinanceBoardAgent\"}",
            "spawn_policy": [
              "pack=PACK-a648db4f",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "ExecutiveCommanderChiefAgent",
          "name": "ExecutiveCommanderChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "vw MFS-25",
            "agent_id": "ExecutiveCommanderChiefAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-df6b24c4",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "ExecutiveCommanderChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Executive",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Reports To:** ExecutiveCommanderChiefAgent\"}",
            "spawn_policy": [
              "pack=PACK-df6b24c4",
              "min_plane=Deployed",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "AuditComplianceAgent",
          "name": "AuditComplianceAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ip TVM",
            "agent_id": "AuditComplianceAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-e4265101",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "AuditComplianceAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Escalation Path:** AuditComplianceAgent\"}",
            "spawn_policy": [
              "pack=PACK-e4265101",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "HRBoardAgent",
          "name": "HRBoardAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "fi ERC",
            "agent_id": "HRBoardAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-e541d2fc",
            "category": "Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "HRBoardAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### HRBoardAgent\"}",
            "spawn_policy": [
              "pack=PACK-e541d2fc",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "ExecutiveCommanderChiefAgent",
          "name": "ExecutiveCommanderChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "vw MFS-26",
            "agent_id": "ExecutiveCommanderChiefAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-df6b24c4",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "ExecutiveCommanderChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Executive",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Reports To:** ExecutiveCommanderChiefAgent\"}",
            "spawn_policy": [
              "pack=PACK-df6b24c4",
              "min_plane=Deployed",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "KnowledgeBaseAgent",
          "name": "KnowledgeBaseAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "bt YXP",
            "agent_id": "KnowledgeBaseAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-681ecb2c",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "KnowledgeBaseAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### KnowledgeBaseAgent\"}",
            "spawn_policy": [
              "pack=PACK-681ecb2c",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "KnowledgeGraphAgent",
          "name": "KnowledgeGraphAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ma VIK",
            "agent_id": "KnowledgeGraphAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-2ad7a11e",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-C",
            "display_name": "KnowledgeGraphAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "C",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### KnowledgeGraphAgent\"}",
            "spawn_policy": [
              "pack=PACK-2ad7a11e",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.c",
            "type": "Agent"
          }
        },
        {
          "id": "DataIngestionETLAgent",
          "name": "DataIngestionETLAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "yr VHL",
            "agent_id": "DataIngestionETLAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-5d2a92c2",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "DataIngestionETLAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": [
              "{\"sample\": \"- **Triggers:** DataIngestionETLAgent output",
              "Entity relationship update\"}"
            ],
            "spawn_policy": [
              "pack=PACK-5d2a92c2",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "KnowledgeBaseAgent",
          "name": "KnowledgeBaseAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "bt YXP",
            "agent_id": "KnowledgeBaseAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-681ecb2c",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "KnowledgeBaseAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Escalation Path:** KnowledgeBaseAgent\"}",
            "spawn_policy": [
              "pack=PACK-681ecb2c",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "LegalComplianceBoardAgent",
          "name": "LegalComplianceBoardAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "qe RII",
            "agent_id": "LegalComplianceBoardAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-4652de8c",
            "category": "Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "LegalComplianceBoardAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### LegalComplianceBoardAgent\"}",
            "spawn_policy": [
              "pack=PACK-4652de8c",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "ExecutiveCommanderChiefAgent",
          "name": "ExecutiveCommanderChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "vw MFS-27",
            "agent_id": "ExecutiveCommanderChiefAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-df6b24c4",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "ExecutiveCommanderChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Executive",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Reports To:** ExecutiveCommanderChiefAgent\"}",
            "spawn_policy": [
              "pack=PACK-df6b24c4",
              "min_plane=Deployed",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "LoggingObservabilityHelperAgent",
          "name": "LoggingObservabilityHelperAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "qn CXF",
            "agent_id": "LoggingObservabilityHelperAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-cab51552",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "LoggingObservabilityHelperAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### LoggingObservabilityHelperAgent\"}",
            "spawn_policy": [
              "pack=PACK-cab51552",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "EnhancedObservabilityTracingAgent",
          "name": "EnhancedObservabilityTracingAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "on NXN",
            "agent_id": "EnhancedObservabilityTracingAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-6a9cba0e",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "EnhancedObservabilityTracingAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Escalation Path:** EnhancedObservabilityTracingAgent\"}",
            "spawn_policy": [
              "pack=PACK-6a9cba0e",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "ManifestEditorAgent",
          "name": "ManifestEditorAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "re YFD",
            "agent_id": "ManifestEditorAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-a79dc066",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "ManifestEditorAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### ManifestEditorAgent\"}",
            "spawn_policy": [
              "pack=PACK-a79dc066",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "CommandChiefAgent",
          "name": "CommandChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "jj CON-19",
            "agent_id": "CommandChiefAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-299e0062",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "CommandChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Escalation Path:** CommandChiefAgent\"}",
            "spawn_policy": [
              "pack=PACK-299e0062",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "MarketingBoardAgent",
          "name": "MarketingBoardAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ij EHW",
            "agent_id": "MarketingBoardAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-e8b7483d",
            "category": "Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "MarketingBoardAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### MarketingBoardAgent\"}",
            "spawn_policy": [
              "pack=PACK-e8b7483d",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "ExecutiveCommanderChiefAgent",
          "name": "ExecutiveCommanderChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "vw MFS-28",
            "agent_id": "ExecutiveCommanderChiefAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-df6b24c4",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "ExecutiveCommanderChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Executive",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Reports To:** ExecutiveCommanderChiefAgent\"}",
            "spawn_policy": [
              "pack=PACK-df6b24c4",
              "min_plane=Deployed",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "MarketplaceComplianceAgent",
          "name": "MarketplaceComplianceAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "te MNI",
            "agent_id": "MarketplaceComplianceAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-b027d0da",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "MarketplaceComplianceAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### MarketplaceComplianceAgent\"}",
            "spawn_policy": [
              "pack=PACK-b027d0da",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "AuditComplianceAgent",
          "name": "AuditComplianceAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ip TVM",
            "agent_id": "AuditComplianceAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-e4265101",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "AuditComplianceAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Escalation Path:** AuditComplianceAgent\"}",
            "spawn_policy": [
              "pack=PACK-e4265101",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "MarketplaceDiscoveryAgent",
          "name": "MarketplaceDiscoveryAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "me UEZ",
            "agent_id": "MarketplaceDiscoveryAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-bb0d81da",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-GATEWAY_SERVICES-C",
            "display_name": "MarketplaceDiscoveryAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "C",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### MarketplaceDiscoveryAgent\"}",
            "spawn_policy": [
              "pack=PACK-bb0d81da",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.gateway-services.c",
            "type": "Agent"
          }
        },
        {
          "id": "PluginEvaluationAgent",
          "name": "PluginEvaluationAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ws BED",
            "agent_id": "PluginEvaluationAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-78c256b9",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "PluginEvaluationAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Escalation Path:** PluginEvaluationAgent\"}",
            "spawn_policy": [
              "pack=PACK-78c256b9",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "MarketplaceMonetizationBillingAgent",
          "name": "MarketplaceMonetizationBillingAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "tw UIL",
            "agent_id": "MarketplaceMonetizationBillingAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-1d3904e7",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "MarketplaceMonetizationBillingAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### MarketplaceMonetizationBillingAgent\"}",
            "spawn_policy": [
              "pack=PACK-1d3904e7",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "MarketplaceComplianceAgent",
          "name": "MarketplaceComplianceAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "te MNI",
            "agent_id": "MarketplaceComplianceAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-b027d0da",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "MarketplaceComplianceAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Escalation Path:** MarketplaceComplianceAgent\"}",
            "spawn_policy": [
              "pack=PACK-b027d0da",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "MarketplaceRatingFeedbackAgent",
          "name": "MarketplaceRatingFeedbackAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "bu TRA",
            "agent_id": "MarketplaceRatingFeedbackAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-35078219",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "MarketplaceRatingFeedbackAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### MarketplaceRatingFeedbackAgent\"}",
            "spawn_policy": [
              "pack=PACK-35078219",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "PluginEvaluationAgent",
          "name": "PluginEvaluationAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ws BED",
            "agent_id": "PluginEvaluationAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-78c256b9",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "PluginEvaluationAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Escalation Path:** PluginEvaluationAgent\"}",
            "spawn_policy": [
              "pack=PACK-78c256b9",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "MasterChiefIncidentResponseAgent",
          "name": "MasterChiefIncidentResponseAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "db LRY",
            "agent_id": "MasterChiefIncidentResponseAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-4d71bc40",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "MasterChiefIncidentResponseAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### MasterChiefIncidentResponseAgent\"}",
            "spawn_policy": [
              "pack=PACK-4d71bc40",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "OperatorAgent",
          "name": "OperatorAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "dh TUE",
            "agent_id": "OperatorAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-dc281579",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "OperatorAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Escalation Path:** OperatorAgent\"}",
            "spawn_policy": [
              "pack=PACK-dc281579",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "MonitoringAlertingAgent",
          "name": "MonitoringAlertingAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "au IHH",
            "agent_id": "MonitoringAlertingAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-99619e31",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "MonitoringAlertingAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### MonitoringAlertingAgent\"}",
            "spawn_policy": [
              "pack=PACK-99619e31",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "MasterChiefIncidentResponseAgent",
          "name": "MasterChiefIncidentResponseAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "db LRY",
            "agent_id": "MasterChiefIncidentResponseAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-4d71bc40",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "MasterChiefIncidentResponseAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Escalation Path:** MasterChiefIncidentResponseAgent\"}",
            "spawn_policy": [
              "pack=PACK-4d71bc40",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "MultiModalInterfaceAgent",
          "name": "MultiModalInterfaceAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "rt FUB",
            "agent_id": "MultiModalInterfaceAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-5cd724b0",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "MultiModalInterfaceAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### MultiModalInterfaceAgent\"}",
            "spawn_policy": [
              "pack=PACK-5cd724b0",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "UXAccessibilityAgent",
          "name": "UXAccessibilityAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "hf RSA",
            "agent_id": "UXAccessibilityAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-29d4f7b0",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-E",
            "display_name": "UXAccessibilityAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "E",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Escalation Path:** UXAccessibilityAgent\"}",
            "spawn_policy": [
              "pack=PACK-29d4f7b0",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.e",
            "type": "Agent"
          }
        },
        {
          "id": "MultiTenantIsolationAgent",
          "name": "MultiTenantIsolationAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ii ZZH",
            "agent_id": "MultiTenantIsolationAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-4bbdc416",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "MultiTenantIsolationAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### MultiTenantIsolationAgent\"}",
            "spawn_policy": [
              "pack=PACK-4bbdc416",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "ComplianceEnforcementAgent",
          "name": "ComplianceEnforcementAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ra HVZ",
            "agent_id": "ComplianceEnforcementAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-c303ad0f",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "ComplianceEnforcementAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Escalation Path:** ComplianceEnforcementAgent\"}",
            "spawn_policy": [
              "pack=PACK-c303ad0f",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "OperationsBoardAgent",
          "name": "OperationsBoardAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ny ZEB",
            "agent_id": "OperationsBoardAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-e2923dc6",
            "category": "Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "OperationsBoardAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### OperationsBoardAgent\"}",
            "spawn_policy": [
              "pack=PACK-e2923dc6",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "ExecutiveCommanderChiefAgent",
          "name": "ExecutiveCommanderChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "vw MFS-29",
            "agent_id": "ExecutiveCommanderChiefAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-df6b24c4",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "ExecutiveCommanderChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Executive",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Reports To:** ExecutiveCommanderChiefAgent\"}",
            "spawn_policy": [
              "pack=PACK-df6b24c4",
              "min_plane=Deployed",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "OperatorAgent",
          "name": "OperatorAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "dh TUE",
            "agent_id": "OperatorAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-dc281579",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "OperatorAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### OperatorAgent\"}",
            "spawn_policy": [
              "pack=PACK-dc281579",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "MasterChiefIncidentResponseAgent",
          "name": "MasterChiefIncidentResponseAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "db LRY",
            "agent_id": "MasterChiefIncidentResponseAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-4d71bc40",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "MasterChiefIncidentResponseAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Escalation Path:** MasterChiefIncidentResponseAgent\"}",
            "spawn_policy": [
              "pack=PACK-4d71bc40",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "OrchestrationDefinitionAgent",
          "name": "OrchestrationDefinitionAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "fi MFE",
            "agent_id": "OrchestrationDefinitionAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-74a5a735",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "OrchestrationDefinitionAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### OrchestrationDefinitionAgent\"}",
            "spawn_policy": [
              "pack=PACK-74a5a735",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "OrchestratorAgent",
          "name": "OrchestratorAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ux TEJ",
            "agent_id": "OrchestratorAgent",
            "budget_cap": "per_subject",
            "capability_pack_id": "PACK-1ee123f4",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "OrchestratorAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Orchestrator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Escalation Path:** OrchestratorAgent\"}",
            "spawn_policy": [
              "pack=PACK-1ee123f4",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "OrchestratorAgent",
          "name": "OrchestratorAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ux TEJ",
            "agent_id": "OrchestratorAgent",
            "budget_cap": "per_subject",
            "capability_pack_id": "PACK-1ee123f4",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "OrchestratorAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Orchestrator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### OrchestratorAgent\"}",
            "spawn_policy": [
              "pack=PACK-1ee123f4",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "CommandChiefAgent",
          "name": "CommandChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "jj CON-20",
            "agent_id": "CommandChiefAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-299e0062",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "CommandChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Escalation Path:** CommandChiefAgent\"}",
            "spawn_policy": [
              "pack=PACK-299e0062",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "OrchestratorFederationAgent",
          "name": "OrchestratorFederationAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "hb TEA",
            "agent_id": "OrchestratorFederationAgent",
            "budget_cap": "per_subject",
            "capability_pack_id": "PACK-fec27234",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "OrchestratorFederationAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Orchestrator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### OrchestratorFederationAgent\"}",
            "spawn_policy": [
              "pack=PACK-fec27234",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "CommandChiefAgent",
          "name": "CommandChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "jj CON-21",
            "agent_id": "CommandChiefAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-299e0062",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "CommandChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Escalation Path:** CommandChiefAgent\"}",
            "spawn_policy": [
              "pack=PACK-299e0062",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "PluginEvaluationAgent",
          "name": "PluginEvaluationAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ws BED",
            "agent_id": "PluginEvaluationAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-78c256b9",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "PluginEvaluationAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### PluginEvaluationAgent\"}",
            "spawn_policy": [
              "pack=PACK-78c256b9",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "PluginLifecycleManagerAgent",
          "name": "PluginLifecycleManagerAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "rh UTT",
            "agent_id": "PluginLifecycleManagerAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-ad3fa20f",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "PluginLifecycleManagerAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Escalation Path:** PluginLifecycleManagerAgent\"}",
            "spawn_policy": [
              "pack=PACK-ad3fa20f",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "PluginLifecycleManagerAgent",
          "name": "PluginLifecycleManagerAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "rh UTT",
            "agent_id": "PluginLifecycleManagerAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-ad3fa20f",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "PluginLifecycleManagerAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### PluginLifecycleManagerAgent\"}",
            "spawn_policy": [
              "pack=PACK-ad3fa20f",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "PluginSandboxSecurityAgent",
          "name": "PluginSandboxSecurityAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "sn ZMT",
            "agent_id": "PluginSandboxSecurityAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-64d13b50",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "PluginSandboxSecurityAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=2GB",
              "disk>=2GB",
              "net>=10Mbps"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Escalation Path:** PluginSandboxSecurityAgent\"}",
            "spawn_policy": [
              "pack=PACK-64d13b50",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "PluginSandboxSecurityAgent",
          "name": "PluginSandboxSecurityAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "sn ZMT",
            "agent_id": "PluginSandboxSecurityAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-64d13b50",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "PluginSandboxSecurityAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=2GB",
              "disk>=2GB",
              "net>=10Mbps"
            ],
            "epic": "D",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### PluginSandboxSecurityAgent\"}",
            "spawn_policy": [
              "pack=PACK-64d13b50",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "MasterChiefIncidentResponseAgent",
          "name": "MasterChiefIncidentResponseAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "db LRY",
            "agent_id": "MasterChiefIncidentResponseAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-4d71bc40",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "MasterChiefIncidentResponseAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Escalation Path:** MasterChiefIncidentResponseAgent\"}",
            "spawn_policy": [
              "pack=PACK-4d71bc40",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "PromptDesignerAgent",
          "name": "PromptDesignerAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "nw XQN",
            "agent_id": "PromptDesignerAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-63b0d012",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "PromptDesignerAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### PromptDesignerAgent\"}",
            "spawn_policy": [
              "pack=PACK-63b0d012",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "CodeGenAgent",
          "name": "CodeGenAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "bv IYD",
            "agent_id": "CodeGenAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-2fc3b49b",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-F",
            "display_name": "CodeGenAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "F",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Escalation Path:** CodeGenAgent\"}",
            "spawn_policy": [
              "pack=PACK-2fc3b49b",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.f",
            "type": "Agent"
          }
        },
        {
          "id": "ComplianceEnforcementAgent",
          "name": "ComplianceEnforcementAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ra HVZ",
            "agent_id": "ComplianceEnforcementAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-c303ad0f",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "ComplianceEnforcementAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Escalation Path:** ComplianceEnforcementAgent\"}",
            "spawn_policy": [
              "pack=PACK-c303ad0f",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "RegistryDiscoveryAgent",
          "name": "RegistryDiscoveryAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "cl GMN",
            "agent_id": "RegistryDiscoveryAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-e5483272",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-GATEWAY_SERVICES-C",
            "display_name": "RegistryDiscoveryAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "C",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### RegistryDiscoveryAgent\"}",
            "spawn_policy": [
              "pack=PACK-e5483272",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.gateway-services.c",
            "type": "Agent"
          }
        },
        {
          "id": "OrchestratorAgent",
          "name": "OrchestratorAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ux TEJ",
            "agent_id": "OrchestratorAgent",
            "budget_cap": "per_subject",
            "capability_pack_id": "PACK-1ee123f4",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "OrchestratorAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Orchestrator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Escalation Path:** OrchestratorAgent\"}",
            "spawn_policy": [
              "pack=PACK-1ee123f4",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        },
        {
          "id": "ResearchAgent",
          "name": "ResearchAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "oq CML",
            "agent_id": "ResearchAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-dee477cc",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "ResearchAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### ResearchAgent\"}",
            "spawn_policy": [
              "pack=PACK-dee477cc",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "KnowledgeBaseAgent",
          "name": "KnowledgeBaseAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "bt YXP",
            "agent_id": "KnowledgeBaseAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-681ecb2c",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "KnowledgeBaseAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Escalation Path:** KnowledgeBaseAgent\"}",
            "spawn_policy": [
              "pack=PACK-681ecb2c",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "ReviewAgent",
          "name": "ReviewAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ui FXT-3",
            "agent_id": "ReviewAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-bb4ee1b9",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "ReviewAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### ReviewAgent\"}",
            "spawn_policy": [
              "pack=PACK-bb4ee1b9",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "CommandChiefAgent",
          "name": "CommandChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "jj CON-22",
            "agent_id": "CommandChiefAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-299e0062",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "CommandChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Escalation Path:** CommandChiefAgent\"}",
            "spawn_policy": [
              "pack=PACK-299e0062",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "SDKPluginManagerAgent",
          "name": "SDKPluginManagerAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "xn UMB",
            "agent_id": "SDKPluginManagerAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-6be05076",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "SDKPluginManagerAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### SDKPluginManagerAgent\"}",
            "spawn_policy": [
              "pack=PACK-6be05076",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "PluginLifecycleManagerAgent",
          "name": "PluginLifecycleManagerAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "rh UTT",
            "agent_id": "PluginLifecycleManagerAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-ad3fa20f",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "PluginLifecycleManagerAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Escalation Path:** PluginLifecycleManagerAgent\"}",
            "spawn_policy": [
              "pack=PACK-ad3fa20f",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "SafeStackAgent",
          "name": "SafeStackAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "nc VKB",
            "agent_id": "SafeStackAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-d75f524a",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "SafeStackAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### SafeStackAgent\"}",
            "spawn_policy": [
              "pack=PACK-d75f524a",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "ComplianceEnforcementAgent",
          "name": "ComplianceEnforcementAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ra HVZ",
            "agent_id": "ComplianceEnforcementAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-c303ad0f",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "ComplianceEnforcementAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Escalation Path:** ComplianceEnforcementAgent\"}",
            "spawn_policy": [
              "pack=PACK-c303ad0f",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "SecretsCryptoAgent",
          "name": "SecretsCryptoAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "nq PAP",
            "agent_id": "SecretsCryptoAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-640c1ee3",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "SecretsCryptoAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### SecretsCryptoAgent\"}",
            "spawn_policy": [
              "pack=PACK-640c1ee3",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "CredentialsEnvAgent",
          "name": "CredentialsEnvAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "sk WIP",
            "agent_id": "CredentialsEnvAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-21f7e2f5",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "CredentialsEnvAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Escalation Path:** CredentialsEnvAgent\"}",
            "spawn_policy": [
              "pack=PACK-21f7e2f5",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "SecurityBoardAgent",
          "name": "SecurityBoardAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ly HLR",
            "agent_id": "SecurityBoardAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-9c867093",
            "category": "Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-CORE-D",
            "display_name": "SecurityBoardAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=2GB",
              "disk>=2GB",
              "net>=10Mbps"
            ],
            "epic": "D",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### SecurityBoardAgent\"}",
            "spawn_policy": [
              "pack=PACK-9c867093",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.core.d",
            "type": "Agent"
          }
        },
        {
          "id": "ExecutiveCommanderChiefAgent",
          "name": "ExecutiveCommanderChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "vw MFS-30",
            "agent_id": "ExecutiveCommanderChiefAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-df6b24c4",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "ExecutiveCommanderChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Executive",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Reports To:** ExecutiveCommanderChiefAgent\"}",
            "spawn_policy": [
              "pack=PACK-df6b24c4",
              "min_plane=Deployed",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "SimulationRiskAnalysisAgent",
          "name": "SimulationRiskAnalysisAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "cv HRZ",
            "agent_id": "SimulationRiskAnalysisAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-805a755f",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "SimulationRiskAnalysisAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### SimulationRiskAnalysisAgent\"}",
            "spawn_policy": [
              "pack=PACK-805a755f",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "ExecutionPlanningAgent",
          "name": "ExecutionPlanningAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "je USF",
            "agent_id": "ExecutionPlanningAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-d0ed8997",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "ExecutionPlanningAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Escalation Path:** ExecutionPlanningAgent\"}",
            "spawn_policy": [
              "pack=PACK-d0ed8997",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "StrategyBoardAgent",
          "name": "StrategyBoardAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "wa BUB",
            "agent_id": "StrategyBoardAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-e3a14dee",
            "category": "Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "StrategyBoardAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### StrategyBoardAgent\"}",
            "spawn_policy": [
              "pack=PACK-e3a14dee",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "ExecutiveCommanderChiefAgent",
          "name": "ExecutiveCommanderChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "vw MFS-31",
            "agent_id": "ExecutiveCommanderChiefAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-df6b24c4",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "ExecutiveCommanderChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Executive",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Reports To:** ExecutiveCommanderChiefAgent\"}",
            "spawn_policy": [
              "pack=PACK-df6b24c4",
              "min_plane=Deployed",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "TechnologyBoardAgent",
          "name": "TechnologyBoardAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "xu GJW",
            "agent_id": "TechnologyBoardAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-50a613ad",
            "category": "Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "TechnologyBoardAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### TechnologyBoardAgent\"}",
            "spawn_policy": [
              "pack=PACK-50a613ad",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "ExecutiveCommanderChiefAgent",
          "name": "ExecutiveCommanderChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "vw MFS-32",
            "agent_id": "ExecutiveCommanderChiefAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-df6b24c4",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "ExecutiveCommanderChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Executive",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Reports To:** ExecutiveCommanderChiefAgent\"}",
            "spawn_policy": [
              "pack=PACK-df6b24c4",
              "min_plane=Deployed",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "TemplateManagerAgent",
          "name": "TemplateManagerAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "bn NQM",
            "agent_id": "TemplateManagerAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-56c235b5",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "TemplateManagerAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### TemplateManagerAgent\"}",
            "spawn_policy": [
              "pack=PACK-56c235b5",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "CodeGenAgent",
          "name": "CodeGenAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "bv IYD",
            "agent_id": "CodeGenAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-2fc3b49b",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-F",
            "display_name": "CodeGenAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "F",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Escalation Path:** CodeGenAgent\"}",
            "spawn_policy": [
              "pack=PACK-2fc3b49b",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.f",
            "type": "Agent"
          }
        },
        {
          "id": "TestCaseGeneratorAgent",
          "name": "TestCaseGeneratorAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "ru KQO",
            "agent_id": "TestCaseGeneratorAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-eb982bdd",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "TestCaseGeneratorAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### TestCaseGeneratorAgent\"}",
            "spawn_policy": [
              "pack=PACK-eb982bdd",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "TestValidationAgent",
          "name": "TestValidationAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "lc SKZ",
            "agent_id": "TestValidationAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-5e6bd6e0",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "TestValidationAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Escalation Path:** TestValidationAgent\"}",
            "spawn_policy": [
              "pack=PACK-5e6bd6e0",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "UXAccessibilityAgent",
          "name": "UXAccessibilityAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "hf RSA",
            "agent_id": "UXAccessibilityAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-29d4f7b0",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-E",
            "display_name": "UXAccessibilityAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "E",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### UXAccessibilityAgent\"}",
            "spawn_policy": [
              "pack=PACK-29d4f7b0",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.e",
            "type": "Agent"
          }
        },
        {
          "id": "DocumentationListenerAgent",
          "name": "DocumentationListenerAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "kq ZQT",
            "agent_id": "DocumentationListenerAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-8035ea1e",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "DocumentationListenerAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Escalation Path:** DocumentationListenerAgent\"}",
            "spawn_policy": [
              "pack=PACK-8035ea1e",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "UpgradePatchAgent",
          "name": "UpgradePatchAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "hb JHA",
            "agent_id": "UpgradePatchAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-3d4a1c03",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "UpgradePatchAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### UpgradePatchAgent\"}",
            "spawn_policy": [
              "pack=PACK-3d4a1c03",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "AgentSelfUpgradeRetirementAgent",
          "name": "AgentSelfUpgradeRetirementAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "jz PNM",
            "agent_id": "AgentSelfUpgradeRetirementAgent",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-6837eee4",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "AgentSelfUpgradeRetirementAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Operator",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Escalation Path:** AgentSelfUpgradeRetirementAgent\"}",
            "spawn_policy": [
              "pack=PACK-6837eee4",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "VisionBoardAgent",
          "name": "VisionBoardAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "mt SVN",
            "agent_id": "VisionBoardAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-a2247e76",
            "category": "Agent",
            "cost_center": "PMO",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "VisionBoardAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Board",
            "plane": "Control",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"### VisionBoardAgent\"}",
            "spawn_policy": [
              "pack=PACK-a2247e76",
              "min_plane=Control",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.control.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "ExecutiveCommanderChiefAgent",
          "name": "ExecutiveCommanderChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "vw MFS-33",
            "agent_id": "ExecutiveCommanderChiefAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-df6b24c4",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "ExecutiveCommanderChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Executive",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_agent_directory.md",
            "source_rows_json": "{\"sample\": \"- **Reports To:** ExecutiveCommanderChiefAgent\"}",
            "spawn_policy": [
              "pack=PACK-df6b24c4",
              "min_plane=Deployed",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "NOA ExecutiveCommanderChiefAgent",
          "name": "NOA ExecutiveCommanderChiefAgent",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "on YDF-2",
            "agent_id": "NOA ExecutiveCommanderChiefAgent",
            "budget_cap": "per_intent",
            "capability_pack_id": "PACK-f1782d9d",
            "category": "Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-CORE-A",
            "display_name": "NOA ExecutiveCommanderChiefAgent",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Executive",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_framework_flow.md",
            "source_rows_json": [
              "{\"sample\": \"## Mermaid Diagram\\n```mermaid\\nflowchart TD\\n  subgraph SANDBOX / RESEARCH\\n    D[Sources] --> I[Ingestor]\\n    I --> S[Sandbox Runners (Ephemeral)]\\n    S --> G[SBOM & Capability Graph]\\n    S --> T[Test Benches]\\n    S --> R[Risk & License Analyzer]\\n  end\\n  subgraph COORDINATOR (CONTROL PLANE)\\n    G --> C[Capability Registry]\\n    T --> SC[Scorecards]\\n    R --> SC\\n    C --> P[Promotion Controller]\\n    SC --> P\\n  end\\n  subgraph TRIFECTA-COURT\\n    EX[Executive: NOA Commander]\\n    LE[Legislative: Board Policies]\\n    JU[Judicial Engine]\\n    P --> JU\\n    JU --> P\\n  end\\n  subgraph DEPLOYED NOA APP\\n    N[NOA ExecutiveCommanderChiefAgent] --> B[Executive/Board Agents]\\n    B --> MS[ModelSelectorAgents]\\n    MS --> MAS[MicroAgentStacks]\\n  end\\n  P -->",
              "Canary",
              "N\\n  MAS -->",
              "Telemetry",
              "P\\n```\\n\"}"
            ],
            "spawn_policy": [
              "pack=PACK-f1782d9d",
              "min_plane=Deployed",
              "approval=required"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.core.a",
            "type": "Agent"
          }
        },
        {
          "id": "MicroAgentStacks",
          "name": "MicroAgentStacks",
          "layer": "micro",
          "scope": [],
          "inputs": [],
          "outputs": [],
          "tools": [],
          "guardrails": [],
          "escalation_to": "Stack-Chief",
          "metadata": {
            "agent_code": "kp RIU-38",
            "agent_id": "MicroAgentStacks",
            "budget_cap": "tbd",
            "capability_pack_id": "PACK-24114ed9",
            "category": "Micro-Agent",
            "cost_center": "Ops",
            "court_policy_id": "COURT-POLICY-AGENTS-A",
            "display_name": "MicroAgentStacks",
            "efg_requirements": [
              "cpu>=1",
              "ram>=1GB",
              "disk>=500MB"
            ],
            "epic": "A",
            "governance_role": "Sub-agent",
            "plane": "Deployed",
            "scheduler_owner": "SubjectOrchestrator",
            "source_file": "ark-os-noa_framework_flow.md",
            "source_rows_json": [
              "{\"sample\": \"## Mermaid Diagram\\n```mermaid\\nflowchart TD\\n  subgraph SANDBOX / RESEARCH\\n    D[Sources] --> I[Ingestor]\\n    I --> S[Sandbox Runners (Ephemeral)]\\n    S --> G[SBOM & Capability Graph]\\n    S --> T[Test Benches]\\n    S --> R[Risk & License Analyzer]\\n  end\\n  subgraph COORDINATOR (CONTROL PLANE)\\n    G --> C[Capability Registry]\\n    T --> SC[Scorecards]\\n    R --> SC\\n    C --> P[Promotion Controller]\\n    SC --> P\\n  end\\n  subgraph TRIFECTA-COURT\\n    EX[Executive: NOA Commander]\\n    LE[Legislative: Board Policies]\\n    JU[Judicial Engine]\\n    P --> JU\\n    JU --> P\\n  end\\n  subgraph DEPLOYED NOA APP\\n    N[NOA ExecutiveCommanderChiefAgent] --> B[Executive/Board Agents]\\n    B --> MS[ModelSelectorAgents]\\n    MS --> MAS[MicroAgentStacks]\\n  end\\n  P -->",
              "Canary",
              "N\\n  MAS -->",
              "Telemetry",
              "P\\n```\\n\"}"
            ],
            "spawn_policy": [
              "pack=PACK-24114ed9",
              "min_plane=Deployed",
              "approval=auto"
            ],
            "status": "Planned",
            "telemetry_topic": "trace.deployed.agents.a",
            "type": "Agent"
          }
        }
      ]
    }
  ],
  "policy": {}
}